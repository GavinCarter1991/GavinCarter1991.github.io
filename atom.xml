<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gavin&#39;s Blog</title>
  
  <subtitle>记录成长过程中的点点滴滴</subtitle>
  <link href="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/atom.xml" rel="self"/>
  
  <link href="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/"/>
  <updated>2025-06-11T03:43:59.136Z</updated>
  <id>https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/</id>
  
  <author>
    <name>kindyourself@163.com</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>gitHub hexo 个人博客升级版</title>
    <link href="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2025/06/11/gitHub-hexo-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%8D%87%E7%BA%A7%E7%89%88/"/>
    <id>https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2025/06/11/gitHub-hexo-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%8D%87%E7%BA%A7%E7%89%88/</id>
    <published>2025-06-11T01:52:44.000Z</published>
    <updated>2025-06-11T03:43:59.136Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>9年前自己开始学习gitHub hexo搭建个人博客，查了很多资料，最后用hexo 搭建一个个人博客，托管在gitHub上，前段时间换了一个电脑，我在新的电脑上想再发布一篇文章，才发现不行了。因为之前只在GitHub托管了hexo生成的静态文件(public)，忘记备份Hexo的源文件。<br>source&#x2F;_posts&#x2F;（所有文章）<br>_config.yml（Hexo 主配置）<br>themes&#x2F;（主题文件）<br>package.json（依赖列表）<br>如果你遇到这种情况，跟着我进入接下来的重新部署过程。</p></blockquote><p><a href="https://www.jianshu.com/p/e0619df8f245">gitHub hexo 个人博客基础版</a>。</p><h3 id="首先确认你本地已经不存在source-x2F-posts文件夹，再查一查github是否有备份，如何远程和本地都没有，那就只能重新部署了。"><a href="#首先确认你本地已经不存在source-x2F-posts文件夹，再查一查github是否有备份，如何远程和本地都没有，那就只能重新部署了。" class="headerlink" title="首先确认你本地已经不存在source&#x2F;_posts文件夹，再查一查github是否有备份，如何远程和本地都没有，那就只能重新部署了。"></a>首先确认你本地已经不存在source&#x2F;_posts文件夹，再查一查github是否有备份，如何远程和本地都没有，那就只能重新部署了。</h3><blockquote><p>1.静态文件（如 public&#x2F; 下的 HTML）可通过浏览器右键「查看页面源代码」复制正文，或使用工具解析 HTML 结构。</p></blockquote><blockquote><p>2.使用 Markdown 渲染，HTML 中的 “article ”标签内通常包含原始文本的转换结果。</p></blockquote><blockquote><p>3.生成.md文件放在_posts文件夹里面。</p></blockquote><h1 id="1-备份Hexo的源文件"><a href="#1-备份Hexo的源文件" class="headerlink" title="1.备份Hexo的源文件"></a>1.备份Hexo的源文件</h1><p><strong>到这里就可以重新发布文章了，但是为了下一次不要再出现这种情况，我们需要对Hexo的源文件进行备份。</strong></p><p><strong>备份方式共有两种：</strong></p><blockquote><p>1.在当前gitHub管理的hexo生成的静态文件仓库中再开一个分支，用于备份Hexo的源文件。</p></blockquote><blockquote><p>2.单独创建一个私有仓库用于备份Hexo的源文件。</p></blockquote><p><em>因为博客需要对外展示，所以当前gitHub管理的hexo生成的静态文件仓库必须是公开的，所以如果你选择第一种方式你的原文件也只能放在公开的仓库分支。如果不想将自己的Hexo的源文件公开就可以选择第二种方式：单独创建一个私有的仓库用来备份Hexo的源文件。</em></p><h1 id="2-自动化"><a href="#2-自动化" class="headerlink" title="2.自动化"></a>2.自动化</h1><blockquote><p>上文创建完成后每次发布博客，都需要去git提交备份文件，这样太麻烦了。我们可以创建一个自动化脚本，将这些重复步骤自动化。</p></blockquote><p><strong>创建一个deploy.sh放在博客根目录：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 设置绝对路径</span><br><span class="line">BLOG_DIR=&quot;实际路径/blog&quot;</span><br><span class="line"></span><br><span class="line"># 进入博客目录</span><br><span class="line">cd &quot;$BLOG_DIR&quot; || exit 1</span><br><span class="line"></span><br><span class="line"># Hexo操作</span><br><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br><span class="line"></span><br><span class="line"># 源文件备份</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;自动备份: $(date +&quot;%Y-%m-%d %H:%M&quot;)&quot;</span><br><span class="line">git push origin main</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>这样一个简单的发布博客并且源文件备份的自动化脚本就好了。<br>以后每一次写完文章后再在终端进入”实际路径&#x2F;blog” 执行.&#x2F;deploy.sh 就行了</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1976231-be565414c227becd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="执行./deploy.sh"></p><p><strong>首次执行需要先设置执行权限：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x deploy.sh</span><br></pre></td></tr></table></figure><h1 id="3-多博客自动化"><a href="#3-多博客自动化" class="headerlink" title="3.多博客自动化"></a>3.多博客自动化</h1><blockquote><p>当我们有多个博客需要同步是就需要对Hexo的源文件进行再次修改。</p></blockquote><p>我以github为例：</p><p><strong>1.首先我们的有两个GitHub账号并且本地配置好SSH</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/1976231-4b672d531de2e4be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="本地SSH配置"></p><p><strong>2.添加配置文件</strong></p><h3 id="config-yml：为其中一个GitHub账号的配置"><a href="#config-yml：为其中一个GitHub账号的配置" class="headerlink" title="_config.yml：为其中一个GitHub账号的配置"></a>_config.yml：为其中一个GitHub账号的配置</h3><blockquote><p>url: <a href="https://gavincarter1991.github.io/#">https://gavincarter1991.github.io#</a> 博客完整URL</p><p> <img src="https://upload-images.jianshu.io/upload_images/1976231-d4cc0887e0a1f1c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="deploy"></p></blockquote><h3 id="config-other-yml：为另外一个GitHub账号的配置"><a href="#config-other-yml：为另外一个GitHub账号的配置" class="headerlink" title="_config_other.yml：为另外一个GitHub账号的配置"></a>_config_other.yml：为另外一个GitHub账号的配置</h3><blockquote><p>url: <a href="https://kindyourself.github.io/">https://kindyourself.github.io</a> # 博客完整URL</p><p> <img src="https://upload-images.jianshu.io/upload_images/1976231-e88ac014d9ccf8ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="deploy"></p></blockquote><p>考虑到多个博客内容可能不一样：在根目录新建一个scripts文件夹创建一个JS脚本multi-site.js进行内容配置，公共文章放在source&#x2F;_posts，不同的文章各自放在自己的目录里面（source&#x2F;_posts_gavin  source&#x2F;_posts_gavin _posts_kind）脚本会分开发布。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&#x27;fs-extra&#x27;);</span><br><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line"></span><br><span class="line">hexo.extend.filter.register(&#x27;before_generate&#x27;, function() &#123;</span><br><span class="line">  const baseDir = hexo.base_dir;</span><br><span class="line">  const sites = [</span><br><span class="line">    &#123; name: &#x27;kind&#x27;, postDir: &#x27;_posts_kind&#x27;, config: &#x27;_config.yml&#x27; &#125;,</span><br><span class="line">    &#123; name: &#x27;gavin&#x27;, postDir: &#x27;_posts_gavin&#x27;, config: &#x27;_config_gavin.yml&#x27; &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  sites.forEach(site =&gt; &#123;</span><br><span class="line">    const sourceDir = path.join(baseDir, &#x27;source&#x27;);</span><br><span class="line">    const tempSourceDir = path.join(baseDir, `temp_source_$&#123;site.name&#125;`);</span><br><span class="line">    const sitePostsDir = path.join(baseDir, site.postDir);</span><br><span class="line">    </span><br><span class="line">    hexo.log.info(`准备 $&#123;site.name&#125; 站点内容...`);</span><br><span class="line">    </span><br><span class="line">    try &#123;</span><br><span class="line">      // 创建临时源目录</span><br><span class="line">      fs.ensureDirSync(tempSourceDir);</span><br><span class="line">      fs.emptyDirSync(tempSourceDir);</span><br><span class="line">      </span><br><span class="line">      // 复制共享内容</span><br><span class="line">      fs.copySync(sourceDir, tempSourceDir);</span><br><span class="line">      </span><br><span class="line">      // 添加专属文章</span><br><span class="line">      if (fs.existsSync(sitePostsDir)) &#123;</span><br><span class="line">        const targetPostsDir = path.join(tempSourceDir, &#x27;_posts&#x27;);</span><br><span class="line">        fs.ensureDirSync(targetPostsDir);</span><br><span class="line">        </span><br><span class="line">        fs.readdirSync(sitePostsDir).forEach(file =&gt; &#123;</span><br><span class="line">          if (file.endsWith(&#x27;.md&#x27;)) &#123;</span><br><span class="line">            fs.copySync(</span><br><span class="line">              path.join(sitePostsDir, file),</span><br><span class="line">              path.join(targetPostsDir, file)</span><br><span class="line">            );</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      // 更新配置中的source_dir</span><br><span class="line">      const configPath = path.join(baseDir, site.config);</span><br><span class="line">      let configContent = fs.readFileSync(configPath, &#x27;utf-8&#x27;);</span><br><span class="line">      configContent = configContent.replace(</span><br><span class="line">        /source_dir:.+/,</span><br><span class="line">        `source_dir: $&#123;tempSourceDir&#125;`</span><br><span class="line">      );</span><br><span class="line">      fs.writeFileSync(configPath, configContent);</span><br><span class="line">      </span><br><span class="line">      hexo.log.info(`$&#123;site.name&#125; 站点内容准备完成`);</span><br><span class="line">    &#125; catch (e) &#123;</span><br><span class="line">      hexo.log.error(`$&#123;site.name&#125; 站点准备失败: $&#123;e.message&#125;`);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>当然deploy.sh也需要更改为：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env bash</span><br><span class="line"></span><br><span class="line"># 配置区</span><br><span class="line">BLOG_DIR=&quot;/自己路径/blog&quot;</span><br><span class="line">SOURCE_BRANCH=&quot;master&quot;</span><br><span class="line">PUBLIC_REPO_KIND=&quot;git@github.com-kind:kindyourself/kindyourself.github.io.git&quot;</span><br><span class="line">PUBLIC_REPO_GAVIN=&quot;git@github.com-gavin:gavincarter1991/gavincarter1991.github.io.git&quot;</span><br><span class="line">PRIVATE_REPO_KIND=&quot;git@github.com-kind:kindyourself/blog-source.git&quot;</span><br><span class="line">PRIVATE_REPO_GAVIN=&quot;git@github.com-gavin:gavincarter1991/blog-source.git&quot;</span><br><span class="line"></span><br><span class="line">cd &quot;$BLOG_DIR&quot; || &#123; echo &quot;❌ 无法进入博客目录&quot;; exit 1; &#125;</span><br><span class="line"></span><br><span class="line"># 清理上次生成的临时文件</span><br><span class="line">rm -rf temp_source_* public public_gavin</span><br><span class="line"></span><br><span class="line"># 生成两个站点的内容</span><br><span class="line">echo &quot;===== 生成站点内容 =====&quot;</span><br><span class="line">hexo generate --config _config.yml</span><br><span class="line">hexo generate --config _config_gavin.yml</span><br><span class="line"></span><br><span class="line"># 部署到GitHub Pages</span><br><span class="line">echo &quot;===== 部署到GitHub Pages =====&quot;</span><br><span class="line">hexo deploy --config _config.yml</span><br><span class="line">hexo deploy --config _config_gavin.yml</span><br><span class="line"></span><br><span class="line"># 备份到私有仓库</span><br><span class="line">echo &quot;===== 备份源文件到私有仓库 =====&quot;</span><br><span class="line">git add .</span><br><span class="line">if git diff-index --quiet HEAD --; then</span><br><span class="line">    echo &quot;无文件变更&quot;</span><br><span class="line">else</span><br><span class="line">    git commit -m &quot;自动备份: $(date +&quot;%Y-%m-%d %H:%M:%S&quot;)&quot;</span><br><span class="line">    </span><br><span class="line">    # 推送到两个私有仓库</span><br><span class="line">    git push &quot;$PRIVATE_REPO_KIND&quot; &quot;$SOURCE_BRANCH&quot; &amp;&amp; \</span><br><span class="line">        echo &quot;✅ kindyourself/blog-source 备份成功&quot; || \</span><br><span class="line">        echo &quot;❌ kindyourself/blog-source 备份失败&quot;</span><br><span class="line">    </span><br><span class="line">    git push &quot;$PRIVATE_REPO_GAVIN&quot; &quot;$SOURCE_BRANCH&quot; &amp;&amp; \</span><br><span class="line">        echo &quot;✅ gavincarter1991/blog-source 备份成功&quot; || \</span><br><span class="line">        echo &quot;❌ gavincarter1991/blog-source 备份失败&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo &quot;===== 部署完成 =====&quot;</span><br><span class="line">echo &quot;博客地址1: https://kindyourself.github.io&quot;</span><br><span class="line">echo &quot;博客地址2: https://gavincarter1991.github.io&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>以上就是gitHub hexo 个人博客升级版</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;9年前自己开始学习gitHub hexo搭建个人博客，查了很多资料，最后用hexo 搭建一个个人博客，托管在gitHub上，前段时间换了一个电脑，我在新的电脑上想再发布一篇文章，才发现不行了。因为之前只在GitHub托管了hexo生成的静态文件(p</summary>
      
    
    
    
    <category term="其他" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="“Hexo”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9CHexo%E2%80%9D/"/>
    
    <category term="“github&quot;" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9Cgithub/"/>
    
    <category term="“博客&quot;" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9C%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Widget进阶</title>
    <link href="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2025/06/07/widget-advanced/"/>
    <id>https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2025/06/07/widget-advanced/</id>
    <published>2025-06-07T12:17:56.000Z</published>
    <updated>2025-06-11T03:43:59.137Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Widget-介绍"><a href="#1-Widget-介绍" class="headerlink" title="1.Widget 介绍"></a>1.Widget 介绍</h2><blockquote><p>Everything is a widget 这是你学习 flutter 会听到的最多的一句话。因为在 Flutter 中几乎所有的对象都是一个 widget，在 flutter 中 UI 的构建和事件的处理基本都是通过 widget 的组合及嵌套来完成的。在 iOS 中我们经常提及的“组件”、“控件”在 flutter 中就是 widget，当然 widget 的范围比之更加广泛。如：手势检测 GestureDetector、主题 Theme 和动画容器 AnimatedContainer 等也是 widget。</p></blockquote><p><strong>Flutter 默认支持的两种设计风格：</strong></p><blockquote><p><strong>1.Material components Design：</strong> 谷歌（android）的 UI 风格，主要为 Android 设计，但也支持跨平台使用。</p></blockquote><blockquote><p><strong>2.Cupertino Design：</strong> 苹果（iOS）的 UI 风格，模仿苹果原生 UIKit 风格。高度还原 iOS 原生体验，适合需要与苹果生态一致的应用。</p></blockquote><h2 id="2-Widget-分类"><a href="#2-Widget-分类" class="headerlink" title="2.Widget 分类"></a>2.Widget 分类</h2><p><strong><em>1.按状态管理</em></strong></p><h6 id="一、StatelessWidget："><a href="#一、StatelessWidget：" class="headerlink" title="一、StatelessWidget："></a>一、StatelessWidget：</h6><p>无状态组件，通过 build 方法返回静态 UI。不可变，属性（final）在创建后无法修改，适用于不需要内部状态变化的场景（如文本显示、图标），不依赖用户交互或数据变化的 UI 部分。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">class IconTextButton extends StatelessWidget &#123;</span><br><span class="line">  final String iconName;</span><br><span class="line">  final String label;</span><br><span class="line">  final VoidCallback onPressed;</span><br><span class="line"></span><br><span class="line">  const IconTextButton(&#123;</span><br><span class="line">    super.key,</span><br><span class="line">    required this.iconName,</span><br><span class="line">    required this.label,</span><br><span class="line">    required this.onPressed,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return GestureDetector(</span><br><span class="line">      onTap: onPressed,</span><br><span class="line">      child: Column(</span><br><span class="line">        mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          Image.asset(</span><br><span class="line">            &quot;assets/images/$iconName.png&quot;,</span><br><span class="line">            width: 40,</span><br><span class="line">            height: 40,</span><br><span class="line">          ),</span><br><span class="line">          const SizedBox(</span><br><span class="line">            height: 10,</span><br><span class="line">          ), // 图标</span><br><span class="line">          Text(</span><br><span class="line">            label,</span><br><span class="line">            style: const TextStyle(color: ColorConstant.color33, fontSize: 10),</span><br><span class="line">          ), // 文字</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="二、StatefulWidget："><a href="#二、StatefulWidget：" class="headerlink" title="二、StatefulWidget："></a>二、StatefulWidget：</h6><p>有状态组件，通过 State 对象管理动态数据。当状态变化时调用 setState 触发 UI 更新，需要用户交互（如按钮点击、表单输入）和依赖实时数据变化（如计数器、动态列表）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">// 上下滚动的消息轮播</span><br><span class="line">class MarqueeWidget extends StatefulWidget &#123;</span><br><span class="line">  /// 子视图数量</span><br><span class="line">  final int count;</span><br><span class="line"></span><br><span class="line">  ///子视图构建器</span><br><span class="line">  final IndexedWidgetBuilder itemBuilder;</span><br><span class="line"></span><br><span class="line">  ///轮播的时间间隔</span><br><span class="line">  final int loopSeconds;</span><br><span class="line"></span><br><span class="line">  const MarqueeWidget(&#123;</span><br><span class="line">    super.key,</span><br><span class="line">    required this.count,</span><br><span class="line">    required this.itemBuilder,</span><br><span class="line">    this.loopSeconds = 5,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  _MarqueeWidgetState createState() =&gt; _MarqueeWidgetState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class _MarqueeWidgetState extends State&lt;MarqueeWidget&gt; &#123;</span><br><span class="line">  late PageController _controller;</span><br><span class="line">  late Timer _timer;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  void initState() &#123;</span><br><span class="line">    super.initState();</span><br><span class="line">    _controller = PageController();</span><br><span class="line">    _timer = Timer.periodic(Duration(seconds: widget.loopSeconds), (timer) &#123;</span><br><span class="line">      if (_controller.page != null) &#123;</span><br><span class="line">        // 如果当前位于最后一页，则直接跳转到第一页，两者内容相同，跳转时视觉上无感知</span><br><span class="line">        if (_controller.page!.round() &gt;= widget.count) &#123;</span><br><span class="line">          _controller.jumpToPage(0);</span><br><span class="line">        &#125;</span><br><span class="line">        _controller.nextPage(</span><br><span class="line">            duration: const Duration(seconds: 1), curve: Curves.linear);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return PageView.builder(</span><br><span class="line">      scrollDirection: Axis.vertical,</span><br><span class="line">      controller: _controller,</span><br><span class="line">      itemBuilder: (buildContext, index) &#123;</span><br><span class="line">        if (index &lt; widget.count) &#123;</span><br><span class="line">          return widget.itemBuilder(buildContext, index);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          return widget.itemBuilder(buildContext, 0);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      itemCount: widget.count + 1,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  void dispose() &#123;</span><br><span class="line">    super.dispose();</span><br><span class="line">    _controller.dispose();</span><br><span class="line">    _timer.cancel();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong><em>2.按功能分类</em></strong></p><blockquote><p><strong>1.布局类 Widget：</strong> 控制子 Widget 的排列方式。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">常见有：</span><br><span class="line">Row/Column：水平/垂直排列子项（基于 Flexbox）。</span><br><span class="line">Stack：子 Widget 堆叠（类似 CSS 的绝对定位）。</span><br><span class="line">Expanded/Flexible：在 Row 或 Column 中分配剩余空间。</span><br><span class="line">Container：结合布局、装饰、边距等功能</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>2.基础组件 Widget：</strong> 构成 UI 的基本元素。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">常见有：</span><br><span class="line">Text：显示文本。</span><br><span class="line">Image：加载本地或网络图片。</span><br><span class="line">Icon：显示图标（需引入 cupertino_icons 或自定义图标库）</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>3.滚动类 Widget：</strong> 处理内容超出屏幕时的滚动行为。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">常见有：</span><br><span class="line">ListView：垂直/水平滚动列表。</span><br><span class="line">GridView：网格布局滚动视图。</span><br><span class="line">SingleChildScrollView：包裹单个可滚动子组件。</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>4.交互类 Widget：</strong> 响应用户输入事件。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">常见有：</span><br><span class="line">ElevatedButton/TextButton：按钮交互。</span><br><span class="line">TextField：文本输入框。</span><br><span class="line">Checkbox/Switch：选择控件。</span><br><span class="line">GestureDetector：自定义手势检测（点击、长按、拖动）。</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>5.平台风格类 Widget：</strong> 适配不同操作系统的视觉风格。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">常见有：</span><br><span class="line">Material Design：MaterialApp、AppBar、FloatingActionButton。</span><br><span class="line">Cupertino（iOS 风格）：CupertinoApp、CupertinoNavigationBar、CupertinoPicker。</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>6.动画类 Widget：</strong> 实现动态视觉效果。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">常见有：</span><br><span class="line">AnimatedContainer：自动过渡的容器（大小、颜色等属性变化）。</span><br><span class="line">Hero：页面切换共享元素的过渡动画。</span><br><span class="line">AnimatedBuilder：自定义复杂动画。</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>7. 导航与路由类 Widget：</strong> 管理页面跳转和导航结构。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">常见有：</span><br><span class="line">Navigator：管理页面堆栈（push/pop）。</span><br><span class="line">PageView：实现滑动切换页面。</span><br><span class="line">BottomNavigationBar：底部导航栏。</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>通过简单 Widget 组合实现复杂 UI（例如用 Row + Expanded 替代自定义布局）(优先组合而非继承)<br>局部状态使用 StatefulWidget<br>全局状态使用状态管理工具（如 Provider、Riverpod）<br>对频繁更新的部分使用 const 构造函数<br>长列表使用 ListView.builder 懒加载</p></blockquote><h2 id="3-Widget-生命周期"><a href="#3-Widget-生命周期" class="headerlink" title="3.Widget 生命周期"></a>3.Widget 生命周期</h2><p><strong>StatelessWidget 的生命周期</strong></p><blockquote><p>StatelessWidget 仅有一个 build() 方法，无状态管理逻辑，其生命周期完全由父组件控制。</p></blockquote><p><strong>StatefulWidget 主要生命周期方法</strong></p><blockquote><p>创建阶段<br>createState()</p></blockquote><blockquote><p>初始化阶段<br>initState()<br>didChangeDependencies()</p></blockquote><blockquote><p>更新阶段<br>didUpdateWidget(oldWidget)<br>build()</p></blockquote><blockquote><p>销毁阶段<br>deactivate()<br>dispose()</p></blockquote><p><img src="https://i-blog.csdnimg.cn/img_convert/a33469c55f94b5278f698d8605d8e0cc.webp?x-oss-process=image/format,png" alt="2025-05-22 18.38.22.png"></p><p><strong>1.createState()</strong><br>当 StatefulWidget 被插入 Widget 树时调用，而且只执行一次。</p><blockquote><p>主要用于创建与之关联的 State 对象（每个 Widget 对应一个 State 实例）。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class MyWidget extends StatefulWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  _MyWidgetState createState() =&gt; _MyWidgetState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2.initState()</strong><br>在 State 对象创建后，首次调用 build() 之前触发该方法，而且只执行一次。</p><blockquote><p>主要用于初始化依赖数据（如订阅事件、加载本地配置）和 创建动画控制器（AnimationController）等需与 dispose() 配对的资源。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@override</span><br><span class="line">void initState() &#123;</span><br><span class="line">  super.initState();</span><br><span class="line">  _controller = AnimationController(vsync: this);</span><br><span class="line">  _fetchData(); // 初始化数据</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>需要注意的是：<br><code>必须调用 super.initState()。</code><br><code>在这里 View 并没有渲染，只是 StatefulWidget 被加载到渲染树里了。</code><br><code>避免在此处触发 setState（可能导致渲染未完成）。</code><br><code>StatefulWidget的 mount 的值变为了true（调用dispose()才会变为 false）。</code></p><p><strong>3.didChangeDependencies()</strong><br>initState() 后立即调用 didChangeDependencies()。<br>当 State 依赖的 InheritedWidget 发生变化时（如主题、本地化）也会调用 didChangeDependencies()。</p><blockquote><p>主要用于处理依赖变化后的逻辑（如重新请求网络数据）。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@override</span><br><span class="line">void didChangeDependencies() &#123;</span><br><span class="line">  super.didChangeDependencies();</span><br><span class="line">  if (Provider.of&lt;Data&gt;(context).hasChanged) &#123;</span><br><span class="line">    _updateData();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>4. didUpdateWidget(oldWidget)</strong><br>在父组件重建时，若新旧 Widget 的 runtimeType 和 key 相同触发 didUpdateWidget（didUpdateWidget 我们一般不会用到）。</p><blockquote><p>主要是：<br>对比新旧 Widget 的配置（如属性变化）。<br>根据变化调整状态（如重置动画、更新监听）。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@override</span><br><span class="line">void didUpdateWidget(MyWidget oldWidget) &#123;</span><br><span class="line">  super.didUpdateWidget(oldWidget);</span><br><span class="line">  if (oldWidget.color != widget.color) &#123;</span><br><span class="line">    _updateColor(); // 颜色变化时执行逻辑</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>5. build()</strong><br>初始化后、依赖变化后、setState() 调用后调用 build()。<br>父组件或祖先组件触发重建时调用 build()。</p><blockquote><p>主要是根据当前状态构建 UI（不要在这里做除了创建 Widget 之外的操作）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@override</span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  return Container(</span><br><span class="line">    color: widget.color,</span><br><span class="line">    child: Text(&#x27;Count: $_count&#x27;),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>需要注意的是：<br><code>必须返回一个 Widget</code><br><code>避免在此处修改状态或执行耗时操作</code></p><p><strong>6. deactivate()</strong><br>当 State 从树中暂时移除（如页面切换、组件被移除）触发 deactivate()。</p><blockquote><p>清理临时资源或保存临时状态.</p></blockquote><p>需要注意的是：<br><code>可能被重新插入树中（如页面返回时），需与 dispose() 区分</code></p><p><strong>7. dispose()</strong><br>State 被永久移除时调用 dispose()。</p><blockquote><p>释放资源（如取消网络请求、销毁动画控制器）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@override</span><br><span class="line">void dispose() &#123;</span><br><span class="line">  _controller.dispose(); // 销毁动画控制器</span><br><span class="line">  _subscription.cancel(); // 取消事件订阅</span><br><span class="line">  super.dispose();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>需要注意的是：<br><code>如果在 dispose() 中未释放资源（如动画控制器、Stream 订阅）可能造成内存泄漏</code><br><code>如果在 dispose() 后调用 setState 会导致异常</code></p><h2 id="4-Widget-的渲染"><a href="#4-Widget-的渲染" class="headerlink" title="4.Widget 的渲染"></a>4.Widget 的渲染</h2><p><strong>渲染流程：</strong><br>Flutter 的渲染系统基于三棵核心树结构，通过高度优化的管线（Pipeline）实现高效的 UI 更新。</p><blockquote><p><strong>Widget 重建 → Diff 新旧 Widget 树 → 更新 Element 树 → 更新 RenderObject 树 → 触发 Layer 合成 → 屏幕刷新</strong></p></blockquote><p><strong>1.Widget 树的构建：</strong></p><blockquote><p>描述 UI 的不可变配置，由开发者创建，频繁重建，需轻量化。<br>开发者编写的 Widget 代码被转化为嵌套的 Widget 树（应用的入口是根 Widget，一般是 MaterialApp 或 CupertinoApp。根 Widget 会递归地构建其子 Widget，形成一棵树。）。<br>具有不可变性，每次重建生成全新的 Widget 树，但通过 Diff 算法可以优化实际更新范围。</p></blockquote><p><strong>2. Element 树的 Diff 与更新</strong></p><blockquote><p>根据 Widget 树生成一个 Element 树，Element 树中的节点都继承自 Element 类。<br>Element 是 Widget 的实例化对象，负责管理 状态（State） 和 子节点引用。<br>每个 Widget 都会有一个对应的 Element 对象，用于管理其生命周期。</p></blockquote><blockquote><p>Diff 算法：Flutter 对比新旧 Widget 树，仅更新变化的 Element 和 RenderObject，类似 React 的虚拟 DOM。<br>当 Widget 树重建时，Flutter 通过 Diff 算法 对比新旧 Widget 树，决定 Element 树的更新策略<br>Reuse：若新旧 Widget 的 runtimeType 和 key 相同，复用现有 Element。<br>Update：更新 Element 的配置（调用 Element.update(newWidget)）。<br>Replace：类型或 Key 不同时，销毁旧 Element，创建新 Element。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 旧 Widget 树</span><br><span class="line">Container(color: Colors.red)</span><br><span class="line"></span><br><span class="line">// 新 Widget 树</span><br><span class="line">Container(color: Colors.blue)</span><br><span class="line"></span><br><span class="line">// Diff 结果：Container 类型相同且无 Key → 复用 Element，更新 RenderObject 颜色</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// Element 更新逻辑</span><br><span class="line">Element.updateChild()</span><br><span class="line"></span><br><span class="line">Element updateChild(Element child, Widget newWidget, dynamic newSlot) &#123;</span><br><span class="line">  if (newWidget == null) &#123;</span><br><span class="line">    // 移除子节点</span><br><span class="line">    return null;</span><br><span class="line">  &#125;</span><br><span class="line">  if (child != null) &#123;</span><br><span class="line">    if (child.widget == newWidget) &#123;</span><br><span class="line">      // Widget 未变化 → 复用 Element</span><br><span class="line">      return child;</span><br><span class="line">    &#125;</span><br><span class="line">    if (Widget.canUpdate(child.widget, newWidget)) &#123;</span><br><span class="line">      // 更新 Element 配置</span><br><span class="line">      child.update(newWidget);</span><br><span class="line">      return child;</span><br><span class="line">    &#125;</span><br><span class="line">    // 销毁旧 Element，创建新 Element</span><br><span class="line">    deactivateChild(child);</span><br><span class="line">  &#125;</span><br><span class="line">  return inflateWidget(newWidget, newSlot);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>3. RenderObject 树的更新</strong></p><p>更新 RenderObject 树，计算布局和生成绘制指令。<br>运行在 UI Thread。</p><blockquote><p>根据 Element 树生成 Render 树（渲染树），渲染树中的节点都继承自 RenderObject 类。<br>每个 Element 对应一个 RenderObject（通过 Element.createRenderObject() 创建）。</p></blockquote><blockquote><p>根据父 RenderObject 传递的 约束（Constraints），计算自身尺寸和位置。<br>递归调用子节点的 layout() 方法（深度优先遍历）。</p></blockquote><p><strong>布局（Layout）核心方法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// RenderObject 布局流程</span><br><span class="line">RenderObject.layout()</span><br><span class="line"></span><br><span class="line">void layout(Constraints constraints, &#123; bool parentUsesSize = false &#125;) &#123;</span><br><span class="line">  _constraints = constraints;</span><br><span class="line">  if (_relayoutBoundary != this) &#123;</span><br><span class="line">    markNeedsLayout();</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  performLayout();  // 1. 计算自身尺寸（调用 performLayout） 由子类实现具体布局逻辑</span><br><span class="line">  _needsLayout = false;</span><br><span class="line">  markNeedsPaint(); // 标记需要重绘</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>生成绘制指令（如形状、颜色、文本），写入 Layer（合成层）。</p></blockquote><p><strong>绘制（Paint）核心方法:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void paint(PaintingContext context, Offset offset) &#123;</span><br><span class="line">  // 绘制逻辑，如画矩形</span><br><span class="line">  context.canvas.drawRect(rect, paint);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>4. 合成与光栅化（Composition &amp; Rasterization）</strong></p><p>生成 Layer 树并光栅化。<br>运行在 Raster Thread（与 UI Thread 并行）</p><blockquote><p>根据渲染树生成 Layer 树，然后上屏显示，Layer 树中的节点都继承自 Layer 类。<br>RenderObject 的绘制结果被组织为 Layer 树，每个 Layer 对应一个 GPU 纹理（Texture）。自此 Layer 树生成。<br>类型包括：PictureLayer（矢量绘制）、TextureLayer（图像纹理）、TransformLayer（变换效果）等。</p></blockquote><blockquote><p>将 Layer 树中的绘制指令转换为 GPU 可识别的位图数据。<br>通过 Skia 图形库（或 Impeller）完成，最终提交给 GPU 渲染。（完成光栅化（Raster Thread））。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void paintChild(RenderObject child, Offset offset) &#123;</span><br><span class="line">  if (child.isRepaintBoundary) &#123;</span><br><span class="line">    // 创建独立 Layer</span><br><span class="line">    stopRecordingIfNeeded();</span><br><span class="line">    child._layer = OffsetLayer();</span><br><span class="line">    appendLayer(child._layer);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    child._paintWithContext(this, offset);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>5. GPU 渲染与屏幕刷新</strong></p><blockquote><p><strong>垂直同步（VSync）：</strong><br>由系统定时触发的信号，控制帧率（如 60Hz → 16.6ms&#x2F;帧）。<br>Flutter 引擎在 VSync 信号到来时，提交光栅化后的帧数据到 GPU。</p></blockquote><blockquote><p><strong>屏幕显示：</strong><br>GPU 将帧数据写入帧缓冲区（Frame Buffer），屏幕硬件按刷新率读取并显示。</p></blockquote><h2 id="5-Widget-优化"><a href="#5-Widget-优化" class="headerlink" title="5.Widget 优化"></a>5.Widget 优化</h2><p><code>高性能渲染 = 最小化 Widget Diff + 高效布局/绘制 + GPU 线程优化</code></p><blockquote><p>Flutter 优化的本质是 减少无效计算 和 降低 GPU 负载<br>一般围绕四个方向： 1.最小化 Widget 树 Diff 范围 2.减少布局（Layout）和绘制（Paint）计算 3.优化 GPU 合成与光栅化（Rasterization） 4.高效管理状态与资源</p></blockquote><blockquote><p><strong>性能分析工具</strong><br>Flutter DevTools：<br>Performance 面板：分析 UI&#x2F;Raster 线程的帧耗时。<br>Layer 查看器：检测 Layer 合成是否合理。<br>debugProfileBuildsEnabled：追踪 Widget 构建耗时<br>调试标记：<br>debugPrintMarkNeedsLayoutStacks：打印触发布局的堆栈信息。<br>debugPaintLayerBordersEnabled：可视化 Layer 边界。</p></blockquote><p><strong>1.Widget 树 Diff 优化</strong></p><blockquote><p><strong>Diff 算法机制：</strong> 当父组件更新时，Flutter 递归对比新旧 Widget 树，判断是否需要更新 Element 和 RenderObject。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">static bool canUpdate(Widget oldWidget, Widget newWidget) &#123;</span><br><span class="line">  return oldWidget.runtimeType == newWidget.runtimeType</span><br><span class="line">      &amp;&amp; oldWidget.key == newWidget.key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>复用条件：</strong> runtimeType 和 key 相同 → 复用 Element，仅更新配置。<br><strong>替换条件：</strong> 类型或 Key 不同 → 销毁旧 Element，创建新 Element。</p></blockquote><p><strong>优化策略：</strong><br><strong>1.使用 const 构造函数：</strong> const Widget 在多次重建中引用同一内存地址，Widget.canUpdate 直接返回 true，跳过 Diff 计算。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const MyWidget(text: &#x27;Hello&#x27;); // ✅ 优化</span><br><span class="line">MyWidget(text: &#x27;Hello&#x27;);      // ❌ 非 const</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2.合理使用 Key：</strong> ValueKey：在列表项中标识唯一性，避免错误复用导致状态混乱。<br>GlobalKey：跨组件访问状态（谨慎使用，破坏局部性）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ListView.builder(</span><br><span class="line">  itemBuilder: (_, index) =&gt; ItemWidget(</span><br><span class="line">    key: ValueKey(items[index].id), // 唯一标识</span><br><span class="line">    data: items[index],</span><br><span class="line">  ),</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>3.拆分细粒度 Widget：</strong> 将频繁变化的部分拆分为独立 Widget，缩小 setState 触发的 Diff 范围。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 父组件（仅传递静态数据）</span><br><span class="line">class ParentWidget extends StatelessWidget &#123;</span><br><span class="line">  const ParentWidget(&#123;super.key&#125;);</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Column(</span><br><span class="line">      children: [</span><br><span class="line">        const StaticHeader(), // 静态部分</span><br><span class="line">        DynamicContent(data: _data), // 动态部分</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2.布局（Layout）阶段优化</strong></p><blockquote><p><strong>布局计算机制：</strong> 当某个 RenderObject 的尺寸变化不影响父节点布局时，可标记为布局边界，阻断布局计算向上传播。通过 RenderObject.isRepaintBoundary &#x3D; true 设置（布局边界（Relayout Boundary））</p></blockquote><blockquote><p>父节点传递 约束（Constraints） 给子节点<br>子节点根据约束计算自身尺寸，并递归布局子节点(布局过程)</p></blockquote><p><strong>优化策略</strong></p><blockquote><p><strong>1.避免过度嵌套：</strong> 多层 Row&#x2F;Column 会导致布局计算复杂度呈指数增长。<br>我们可以使用 Flex、Wrap 或自定义布局逻辑替代嵌套。</p></blockquote><blockquote><p><strong>2.预计算尺寸：</strong> 通过固定尺寸（SizedBox）或 LayoutBuilder 提前确定布局约束，减少计算量。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SizedBox(</span><br><span class="line">  width: 100,</span><br><span class="line">  height: 50,</span><br><span class="line">  child: Text(&#x27;Fixed Size&#x27;),</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>3.使用 IntrinsicWidth&#x2F;IntrinsicHeight 的替代方案：</strong> IntrinsicWidth 会触发多次子节点布局计算，性能低下。<br>我们可以手动计算子节点最大宽度，使用 ConstrainedBox 限制尺寸。</p></blockquote><p><strong>3.绘制（Paint）阶段优化</strong></p><blockquote><p><strong>绘制机制：</strong> 当 RenderObject 的视觉属性（如颜色、位置）变化时，调用 markNeedsPaint() 标记需要重绘。</p></blockquote><blockquote><p><strong>合成层（Layer）：</strong> 每个 RenderObject 的绘制结果被组织为 Layer 树，最终由 GPU 光栅化。（PictureLayer（矢量绘制）、TextureLayer（图像）、TransformLayer（变换））。</p></blockquote><p><strong>优化策略</strong></p><blockquote><p><strong>1.使用 RepaintBoundary：</strong> 将独立变化的 UI 部分包裹 RepaintBoundary，生成独立 Layer，减少重绘区域。<br>通过 RenderObject.isRepaintBoundary &#x3D; true 标记。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RepaintBoundary(</span><br><span class="line">  child: MyAnimatedWidget(), // 独立重绘区域</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>2.避免高开销绘制操作：</strong> 使用 AnimatedOpacity 或直接设置颜色透明度（Color.withOpacity）替代 Opacity 。<br>优先使用 ClipRect 或 ClipRRect，减少路径裁剪的计算量。</p></blockquote><blockquote><p><strong>3.自定义绘制优化：</strong> 在 CustomPainter 中精确控制重绘条件。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class MyPainter extends CustomPainter &#123;</span><br><span class="line">  @override</span><br><span class="line">  bool shouldRepaint(MyPainter old) &#123;</span><br><span class="line">    return old.color != color; // 仅颜色变化时重绘</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>4.GPU 合成与光栅化优化</strong></p><blockquote><p><strong>1.光栅化机制：</strong> 通过上面的合成与光栅化可知道：光栅化运行在独立的 Raster Thread，与 UI Thread 并行。<br>Flutter 自动复用未变化的 Layer 对应的 GPU 纹理，减少数据传输。（纹理（Texture）复用）</p></blockquote><p><strong>优化策略</strong></p><blockquote><p><strong>1.减少 Layer 数量：</strong> 过多的 Layer 会增加 GPU 合成开销，我们需要尽可能的合并相邻的 PictureLayer，避免不必要的 Opacity 或 Transform 嵌套。</p></blockquote><blockquote><p><strong>2.使用硬件加速操作：</strong> 利用 GPU 的矩阵变换硬件加速（Transform 替代手动矩阵计算）。<br>对重复使用的图片提前解码（precacheImage） （Image 预加载）。</p></blockquote><blockquote><p><strong>3.启用 Impeller 引擎：</strong> Flutter 3.0+ 引入的 Impeller 引擎针对 GPU 负载优化，减少光栅化抖动。</p></blockquote><p><strong>5.状态管理与资源优化</strong></p><blockquote><p><strong>1.状态管理：</strong><br>局部状态：使用 StatefulWidget 管理，确保 dispose() 释放资源。<br>全局状态：采用 Provider、Riverpod 或 Bloc，避免状态穿透和冗余重建。</p></blockquote><blockquote><p><strong>2.资源释放：</strong><br>必须释放动画控制器（AnimationController.dispose()）、Stream 订阅（Subscription.cancel()）等资源。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@override</span><br><span class="line">void dispose() &#123;</span><br><span class="line">  _controller.dispose();</span><br><span class="line">  _streamSubscription.cancel();</span><br><span class="line">  super.dispose();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/img_convert/58ae194fbfc28292a73f2130d949f78a.webp?x-oss-process=image/format,png" alt="2025-05-23 14.45.52.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-Widget-介绍&quot;&gt;&lt;a href=&quot;#1-Widget-介绍&quot; class=&quot;headerlink&quot; title=&quot;1.Widget 介绍&quot;&gt;&lt;/a&gt;1.Widget 介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Everything is a widge</summary>
      
    
    
    
    <category term="Flutter" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/categories/Flutter/"/>
    
    
    <category term="“Flutter”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9CFlutter%E2%80%9D/"/>
    
    <category term="“Widget”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9CWidget%E2%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>Flutter遇到的问题</title>
    <link href="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2025/05/23/flutter-error/"/>
    <id>https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2025/05/23/flutter-error/</id>
    <published>2025-05-23T07:17:44.000Z</published>
    <updated>2025-06-11T03:43:59.136Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>1.Flutter In ios 14+,debug mode Flutter apps can only be launched from Flutter tooling。<br>原因：Debug模式下，Flutter也实现了热重载，默认编译方式为JIT而iOS 14+系统对这种编译模式做了限制，导致无法启动。</strong></p></blockquote><p>解决办法如下：用 [Xcode] 打开Flutter里面Runner工程项目，在 Build Settings 的最下方找到 User-Defined，点击 + 按钮，添加一个键为 FLUTTER_BUILD_MODE ，debug设置profile模式，release设置release 模式：<img src="https://i-blog.csdnimg.cn/img_convert/7f789a7b66202aa3d5d577d4ff7a4b51.webp?x-oss-process=image/format,png" alt="截屏2024-03-14 11.27.00.png">{target&#x3D;”_blank”}</p><blockquote><p><strong>2.将 flutter 模块 嵌入iOS工程中，编译时报错：Failed to package 。。。。flutter代码路径。。。。。Command PhaseScriptExecution failed with a nonzero exit code</strong><br><img src="https://i-blog.csdnimg.cn/img_convert/ad21f4b3e2a82eb701e1e9363f00d885.webp?x-oss-process=image/format,png" alt="截屏2024-03-14 11.28.18.png">{target&#x3D;”_blank”}</p></blockquote><p>解决办法如下：<br><strong>1.确保flutter项目代码中没有错误</strong><br><strong>2.重新构建项目：</strong><br><strong>flutter clean</strong><br><strong>2.flutter pub get（获取远程库,确定当前应用所依赖的包，并将它们保存到中央系统缓存（central system cache）中）</strong><br><strong>3.flutter run</strong></p><blockquote><p><strong>3.升级flutter：flutter upgrade –force 报错</strong><br><img src="https://i-blog.csdnimg.cn/img_convert/ed59f544c4becaac4c167e3128af66ca.webp?x-oss-process=image/format,png" alt="截屏2024-09-12 15.23.05.png">{target&#x3D;”_blank”}</p></blockquote><p>Flutter Channel版本选择<br>Flutter提供了Stable、Beta、Dev和Master四种版本，每种版本都有其特定的用途和稳定性：<br>Stable：最稳定的版本，推荐用于生产环境。<br>Beta：相对较稳定，但仍可能存在一些已知问题。<br>Dev：经过Google测试后的最新版本，包含新功能和改进。<br>Master：最新的代码主分支，更新速度非常快，几乎每天都有提交，新功能多但可能不稳定。<br>开发Flutter项目时，一般推荐使用Stable版本，以确保项目的稳定性和可靠性。如需使用某些尚未在Stable版本中支持的功能，可以考虑使用Beta或Dev版本。Master版本则更适合于那些希望尝试最新功能并愿意承受潜在不稳定性的开发者。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1.Flutter In ios 14+,debug mode Flutter apps can only be launched from Flutter tooling。&lt;br&gt;原因：Debug模式下，Flutter也实现了热重</summary>
      
    
    
    
    <category term="Flutter" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/categories/Flutter/"/>
    
    
    <category term="“Flutter”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9CFlutter%E2%80%9D/"/>
    
    <category term="“Error”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9CError%E2%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>项目剖析04-swift 网络请求Moya+Alamofire(HTTPS)证书验证</title>
    <link href="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2024/03/05/%E9%A1%B9%E7%9B%AE%E5%89%96%E6%9E%9004-swift-%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82Moya-Alamofire-HTTPS-%E8%AF%81%E4%B9%A6%E9%AA%8C%E8%AF%81/"/>
    <id>https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2024/03/05/%E9%A1%B9%E7%9B%AE%E5%89%96%E6%9E%9004-swift-%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82Moya-Alamofire-HTTPS-%E8%AF%81%E4%B9%A6%E9%AA%8C%E8%AF%81/</id>
    <published>2024-03-05T08:02:13.000Z</published>
    <updated>2025-06-11T03:43:59.132Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SSL证书验证"><a href="#SSL证书验证" class="headerlink" title="SSL证书验证"></a>SSL证书验证</h2><p><strong>一种加强App 和 Server 间通讯安全的方法。主要目标是确保 App 仅与预先验证的 Server 建立安全连接，防止中间人攻击（Man-in-the-Middle，MitM）等安全风险。一般常用的有两种方式进行验证，Certificate Pinning和Public Key Pinning。</strong></p><blockquote><p>Alamofire5.0 以后将证书验证类放于ServerTrustEvaluation这个类里面。一共有6种验证策略：</p><ol><li><p><strong>DefaultTrustEvaluator</strong> - （默认验证策略）只要是合法证书就能通过验证。</p></li><li><p><strong>RevocationTrustEvaluator</strong>（验证注销策略）对注销证书做的一种额外设置，Alamofire从iOS10.1才开始支持吊销证书的策略。</p></li><li><p><strong>PinnedCertificatesTrustEvaluator</strong>（证书验证策略）app端会对服务器端返回的证书和本地保存的证书中的全部内容进行校验需要全部正确，此验证策略还可以接受自签名证书，安全性相对较高，此方法较为固定，如果 Server 更新证书，App 需要定期更新并重新上架。</p></li><li><p><strong>PublicKeysTrustEvaluator</strong>（公钥验证策略）app端只会对服务器返回的证书和本地保存的证书中的 PublicKey(公钥)进行校验，所以当证书需要更新时，只需确保公钥保持不变，不需要更新App。</p></li><li><p><strong>CompositeTrustEvaluator</strong>（自定义组合验证策略）以上多种策略组合一起，只有在所有数组中值都成功时才成功。</p></li><li><p><strong>DisabledTrustEvalutor</strong>（不验验证策略）无条件信任，所有都可以通过验证。正式环境不建议用此策略，多用于测试。</p></li></ol></blockquote><p><strong>我们用的是PublicKeysTrustEvaluator（公钥验证策略）</strong></p><hr><blockquote><p>后台提供证书，将正式放在项目目录中。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/d2b909e2935eccedbf88e97df824ecf9.png" alt="本地证书存放"></p><blockquote><p>获取本地证书，提取证书的公钥（获取公钥key数组）。证书后缀名一般有：.cer、.crt、.der等，我项目中用的cer，证书链必须包含一个固定的公钥。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">struct WTCertificates &#123;</span><br><span class="line">    static let rootCA = WTCertificates.certificate( )</span><br><span class="line">    static func certificate() -&gt; [SecKey] &#123;</span><br><span class="line">        var publicKeyArray:[SecKey] = []</span><br><span class="line">        for resource in [&quot;xxx&quot;, &quot;xxxx&quot;, &quot;xxxxx&quot;] &#123;// 本地证书名称</span><br><span class="line">            if let filePath = Bundle.main.path(forResource: resource, ofType: &quot;cer&quot;), let data = try? Data(contentsOf: URL(fileURLWithPath: filePath)) as CFData, let certificate = SecCertificateCreateWithData(nil, data),let publicKey = certificate.af.publicKey &#123;</span><br><span class="line">                publicKeyArray.append(publicKey)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return publicKeyArray</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>给Session添加策略（接受质询）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var requestManagerSession: Session = &#123;</span><br><span class="line">    if WTCertificates.rootCA.count &gt; 0, verifyCert &#123;</span><br><span class="line">        let certificates: [SecKey] = WTCertificates.rootCA</span><br><span class="line">        let trustPolicy = PublicKeysTrustEvaluator(keys: certificates, performDefaultValidation: false, validateHost: false)</span><br><span class="line">        let manager = ServerTrustManager(evaluators: [</span><br><span class="line">            &quot;xxx.xxx.com&quot;: trustPolicy,</span><br><span class="line">            &quot;xx.xx.jftplus.com&quot;: trustPolicy,</span><br><span class="line">            &quot;xxx.xx.com&quot;: trustPolicy])// base url 如何域名过多，可以子类化 ServerTrustManager，并用自己的自定义实现重写 serverTrustEvaluator(forHost:) 方法</span><br><span class="line">        let configuration = URLSessionConfiguration.af.default</span><br><span class="line">        return Session(configuration: configuration, serverTrustManager: manager)</span><br><span class="line">    &#125;</span><br><span class="line">    return MoyaProvider&lt;ApiManager&gt;.defaultAlamofireSession()</span><br><span class="line">&#125;()</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>在Moya中添加requestManagerSession</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var JKOtherApiManagerProvider = MoyaProvider&lt;JKOtherApiManager&gt;(endpointClosure: endpointMapping, requestClosure: requestTimeoutClosure, session:requestManagerSession, plugins:[RequestAlertPlugin(), networkPlugin])</span><br></pre></td></tr></table></figure><h2 id="OC-HTTPS-证书配置验证"><a href="#OC-HTTPS-证书配置验证" class="headerlink" title="OC HTTPS 证书配置验证"></a>OC HTTPS 证书配置验证</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//1 将证书拖进项目</span><br><span class="line"></span><br><span class="line">//2 获取证书路径</span><br><span class="line">NSString *certPath = [[NSBundle mainBundle] pathForResource: @&quot;cetus&quot; ofType:@&quot;cer&quot;];</span><br><span class="line">//3 获取证书data</span><br><span class="line">NSData *certData = [NSData dataWithContentsOfFile:certPath];</span><br><span class="line">//4 创建AFN 中的securityPolicy</span><br><span class="line">AFSecurityPolicy *securityPolicy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModePublicKey withPinnedCertificates:[[NSSet alloc] initWithObjects:certData,nil]];</span><br><span class="line">//5 这里就可以添加多个server证书</span><br><span class="line">NSSet *dataSet = [[NSSet alloc]initWithObjects:certData, nil];</span><br><span class="line">//6 绑定证书（不止一个证书）</span><br><span class="line">[securityPolicy setPinnedCertificates:dataSet];</span><br><span class="line">//7 是否允许无效证书</span><br><span class="line">securityPolicy.allowInvalidCertificates = YES;</span><br><span class="line">//8 是否需要验证域名</span><br><span class="line">securityPolicy.validatesDomainName = YES;</span><br><span class="line">uploadManager.securityPolicy = securityPolicy;</span><br></pre></td></tr></table></figure><blockquote><p>我们后台给的证书格式后缀是.pem，以下是用OpenSSL命令将.pem证书转换为cer格式证书方法</p></blockquote><ol><li>打开命令行工具，进入存放xxx.pem证书的目录</li><li>输入以下命令，将.pem证书转换为cer格式<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -in xxx.pem -inform PEM -out xxx.cer -outform DER</span><br></pre></td></tr></table></figure></li><li>执行完毕后，您将在当前目录下看到生成的xxx.cer文件</li></ol><blockquote><p><strong>注意：转换后的cer证书文件只包含公钥，不包含私钥信息</strong></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;SSL证书验证&quot;&gt;&lt;a href=&quot;#SSL证书验证&quot; class=&quot;headerlink&quot; title=&quot;SSL证书验证&quot;&gt;&lt;/a&gt;SSL证书验证&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;一种加强App 和 Server 间通讯安全的方法。主要目标是确保 App 仅与预先</summary>
      
    
    
    
    <category term="swift" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/categories/swift/"/>
    
    
    <category term="“swift”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9Cswift%E2%80%9D/"/>
    
    <category term="“证书验证”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9C%E8%AF%81%E4%B9%A6%E9%AA%8C%E8%AF%81%E2%80%9D/"/>
    
    <category term="“SSL”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9CSSL%E2%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>项目剖析03-swift 网络请求Moya+HandyJSON+RxSwift</title>
    <link href="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2019/12/23/%E9%A1%B9%E7%9B%AE%E5%89%96%E6%9E%9003-swift-%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82Moya-HandyJSON-RxSwift/"/>
    <id>https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2019/12/23/%E9%A1%B9%E7%9B%AE%E5%89%96%E6%9E%9003-swift-%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82Moya-HandyJSON-RxSwift/</id>
    <published>2019-12-23T08:39:52.000Z</published>
    <updated>2025-06-11T03:43:59.132Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>项目第一版网络框架用的是<a href="https://github.com/bustoutsolutions/siesta">siesta</a>,它的缓存与自动刷新确实很好用而且代码很简洁，但是在文件的上传与下载以及对返回类型需要精确匹配要求这方面就很不友好，所以在第二版的我选择了<a href="https://github.com/Moya/Moya">Moya</a>,它是一个网络抽象层，它在<a href="https://github.com/Alamofire/Alamofire">Alamofire</a>基础上提供了一系列的抽象接口方便维护。关于<code>Moya</code>的使用介绍很多，我就不再赘述了。我主要记录一下我在使用过程中学到的处理方式。我的网络框架是搭着<a href="https://github.com/alibaba/HandyJSON">HandyJSON</a>和<a href="https://github.com/Moya/Moya/blob/master/docs/RxSwift.md">RxSwift</a>一起构建的。</p></blockquote><h3 id="Moya"><a href="#Moya" class="headerlink" title="Moya"></a>Moya</h3><p><strong>代码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line">import Foundation</span><br><span class="line">import enum Result.Result</span><br><span class="line">import Alamofire</span><br><span class="line"></span><br><span class="line">//设置请求超时时间</span><br><span class="line">private let requestTimeoutClosure = &#123; (endpoint: Endpoint, done: @escaping MoyaProvider&lt;ApiManager&gt;.RequestResultClosure) in</span><br><span class="line">    do &#123;</span><br><span class="line">        var request = try endpoint.urlRequest()</span><br><span class="line">        request.timeoutInterval = 60</span><br><span class="line">        done(.success(request))</span><br><span class="line">    &#125; catch &#123;</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let ApiManagerProvider = MoyaProvider&lt;ApiManager&gt;(endpointClosure: endpointMapping, requestClosure: requestTimeoutClosure, plugins:[])</span><br><span class="line"></span><br><span class="line">// MARK: 取消所有请求</span><br><span class="line">func cancelAllRequest() &#123;</span><br><span class="line">    WTOtherProvider.manager.session.getTasksWithCompletionHandler &#123; dataTasks, uploadTasks, downloadTasks in</span><br><span class="line">        dataTasks.forEach &#123; $0.cancel() &#125;</span><br><span class="line">        uploadTasks.forEach &#123; $0.cancel() &#125;</span><br><span class="line">        downloadTasks.forEach &#123; $0.cancel() &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    WTLoginProvider.manager.session.getTasksWithCompletionHandler &#123; dataTasks, uploadTasks, downloadTasks in</span><br><span class="line">        dataTasks.forEach &#123; $0.cancel() &#125;</span><br><span class="line">        uploadTasks.forEach &#123; $0.cancel() &#125;</span><br><span class="line">        downloadTasks.forEach &#123; $0.cancel() &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ……</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">public func endpointMapping&lt;Target: TargetType&gt;(target: Target) -&gt; Endpoint &#123;</span><br><span class="line">    WTDLog(&quot;请求连接：\(target.baseURL)\(target.path) \n方法：\(target.method)\n参数：\(String(describing: target.task.self)) &quot;)</span><br><span class="line">    return MoyaProvider.defaultEndpointMapping(for: target)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">final class RequestAlertPlugin: PluginType &#123;</span><br><span class="line">    </span><br><span class="line">    func prepare(_ request: URLRequest, target: TargetType) -&gt; URLRequest &#123;</span><br><span class="line">        return request</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func willSend(_ request: RequestType, target: TargetType) &#123;</span><br><span class="line">        //实现发送请求前需要做的事情</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public func didReceive(_ result: Result&lt;Response, MoyaError&gt;, target: TargetType) &#123;</span><br><span class="line"></span><br><span class="line">        switch result &#123;</span><br><span class="line">        case .success(let response):</span><br><span class="line">            guard response.statusCode == 200 else &#123;</span><br><span class="line">                if response.statusCode == 401 &#123;</span><br><span class="line">                    if isJumpLogin == false &#123;</span><br><span class="line">                        cancelAllRequest()</span><br><span class="line">                        // 退出登录</span><br><span class="line">                        if let nvc = (WTNavigationManger.Nav as? WTMainViewController) &#123;</span><br><span class="line">                            nvc.login()</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                return</span><br><span class="line">            &#125;</span><br><span class="line">            var json = try? JSON(data: response.data)</span><br><span class="line">            WTDLog(&quot;请求状态码\(json?[&quot;status&quot;] ?? &quot;&quot;)&quot;)</span><br><span class="line">            </span><br><span class="line">            guard let codeString = json?[&quot;status&quot;] else &#123;return&#125;</span><br><span class="line">             if codeString == 401 &#123;// 退出登录</span><br><span class="line">                if isJumpLogin == false &#123;</span><br><span class="line">                    cancelAllRequest()</span><br><span class="line">                    if let nvc = (WTNavigationManger.Nav as? WTMainViewController) &#123;</span><br><span class="line">                        nvc.login()</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                break</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        case .failure(let error):</span><br><span class="line">            WTDLog(error)</span><br><span class="line">            let myAppdelegate = UIApplication.shared.delegate as! AppDelegate</span><br><span class="line">            myAppdelegate.listenNetwork()</span><br><span class="line">            break</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct AuthPlugin: PluginType &#123;</span><br><span class="line">    let token: String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">enum ApiManager &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extension ApiManager: TargetType &#123;</span><br><span class="line">    var headers: [String : String]? &#123;</span><br><span class="line">        var dict = [&quot;ColaLanguage&quot;: (&quot;common.isChinese&quot;.L() == &quot;YES&quot;) ? &quot;CN&quot; : &quot;EN&quot;]</span><br><span class="line">        if let authToken =  WTLoginInfoManger.shareDataSingle.model?.accessToken &#123;</span><br><span class="line">            dict[&quot;Authorization&quot;] = authToken</span><br><span class="line">        &#125;</span><br><span class="line">        return dict</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    var baseURL: URL &#123;</span><br><span class="line">        return URL.init(string: AppURLHOST.MyPublicBaseURL)!</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    var path: String &#123;</span><br><span class="line">        return &quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    var method: Moya.Method &#123;</span><br><span class="line">        return .get</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    var task: Task &#123;</span><br><span class="line">        return .requestPlain</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    var validate: Bool &#123;</span><br><span class="line">        return false</span><br><span class="line">    &#125;</span><br><span class="line">    var sampleData: Data &#123;</span><br><span class="line">        return &quot;&quot;.data(using: String.Encoding.utf8)!</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/// 数据 转 模型</span><br><span class="line">extension ObservableType where E == Response &#123;</span><br><span class="line">    public func mapHandyJsonModel&lt;T: HandyJSON&gt;(_ type: T.Type) -&gt; Observable&lt;T&gt; &#123;</span><br><span class="line">        return flatMap &#123; response -&gt; Observable&lt;T&gt; in</span><br><span class="line">            return Observable.just(response.mapHandyJsonModel(T.self))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/// 数据 转 模型</span><br><span class="line">extension Response &#123;</span><br><span class="line">    func mapHandyJsonModel&lt;T: HandyJSON&gt;(_ type: T.Type) -&gt; T &#123;</span><br><span class="line">        let jsonString = String.init(data: data, encoding: .utf8)</span><br><span class="line">        if let modelT = JSONDeserializer&lt;T&gt;.deserializeFrom(json: jsonString) &#123;</span><br><span class="line">            return modelT</span><br><span class="line">        &#125;</span><br><span class="line">        return JSONDeserializer&lt;T&gt;.deserializeFrom(json: &quot;&#123;\&quot;msg\&quot;:\&quot;\(&quot;common.try&quot;.L())\&quot;&#125;&quot;)!</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// 自定义插件</span><br><span class="line">public final class NetworkLoadingPlugin: PluginType &#123;</span><br><span class="line">    public func willSend(_ request: RequestType, target: TargetType) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    public func didReceive(_ result: Result&lt;Moya.Response, MoyaError&gt;, target: TargetType) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>模式Target -&gt; Endpoint -&gt; Request</strong></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/24422c24f3f5cf628f45d967e4ec09c9.png" alt="来自GitHub图片"></p><blockquote><p><code>Moya</code>虽然是基于Alamofire的但是我们在代码中却不会和Alamofire打交道，它是通过枚举来管理API的。我在项目中定义来一个API基类，然后为每一个模块定义了一个API管理类。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">enum HomeApiManager &#123;</span><br><span class="line">    case getBanner // 获取轮播</span><br><span class="line">    case getAnnouncement(per_page: String) // 获取公告</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>对于请求类型的改变和对于URL的改变也是通过枚举</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var method: Moya.Method &#123;</span><br><span class="line">        switch self &#123;</span><br><span class="line">        case .orderCreate:</span><br><span class="line">            return .post</span><br><span class="line">        case .orderCancelById, .orderCancelByPair:</span><br><span class="line">            return .delete</span><br><span class="line">        default:</span><br><span class="line">            return .get</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">var path: String &#123;</span><br><span class="line">        switch self &#123;</span><br><span class="line">        case .getKline:</span><br><span class="line">            return &quot;/api/kline&quot;</span><br><span class="line">        case .transGetByID(let orderId):</span><br><span class="line">            return &quot;/api/\(orderId)&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>请求任务</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">var task: Task &#123;</span><br><span class="line">    switch self &#123;</span><br><span class="line">    case .securityPostGoogleAuth(let tokenKey, let oldGoogleCode, let googleCode, let captcha):</span><br><span class="line">        return .requestParameters(parameters: [&quot;captcha&quot;: captcha], encoding: JSONEncoding.default) // post请求</span><br><span class="line"></span><br><span class="line">    case .getReward(let type, let cursor, let limit):</span><br><span class="line">        return .requestParameters(parameters: [&quot;type&quot;: type], encoding: URLEncoding.default) // 其它请求</span><br><span class="line"></span><br><span class="line">    case .uploadImage(let imageArry):</span><br><span class="line">        let formDataAry:NSMutableArray = NSMutableArray()</span><br><span class="line">        for (index,image) in imageArry.enumerated() &#123;</span><br><span class="line">            //图片转成Data</span><br><span class="line">            let data:Data = image.jpegData(compressionQuality: 0.7)!</span><br><span class="line">            //根据当前时间设置图片上传时候的名字</span><br><span class="line">            var dateStr: String = &quot;yyyy-MM-dd-HH:mm:ss&quot;.timeStampToString(timeStamp: Date().timeIntervalSince1970)</span><br><span class="line">            //别忘记这里给名字加上图片的后缀哦</span><br><span class="line">            dateStr = dateStr.appendingFormat(&quot;-%i.jpg&quot;, index)</span><br><span class="line">            let formData = MultipartFormData(provider: .data(data), name: &quot;file\(index)&quot;, fileName: dateStr, mimeType: &quot;image/jpeg&quot;)</span><br><span class="line">            formDataAry.add(formData)</span><br><span class="line">        &#125;</span><br><span class="line">        return .uploadCompositeMultipart(formDataAry as! [MultipartFormData], urlParameters: [</span><br><span class="line">            :])</span><br><span class="line">        </span><br><span class="line">    default:</span><br><span class="line">        return .requestPlain</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插件机制"><a href="#插件机制" class="headerlink" title="插件机制"></a>插件机制</h3><blockquote><p><code>Moya</code>的另一个强大的功能就是它的插件机制，提供了两个接口，willSendRequest 和 didReceiveResponse，它可以在请求前和请求后做一些额外的操作而和主功能是解耦的，比如可以在请求前开始加载动画请求结束后移除加载动画，还可以自定义插件。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">final class RequestAlertPlugin: PluginType &#123;</span><br><span class="line">    func prepare(_ request: URLRequest, target: TargetType) -&gt; URLRequest &#123;</span><br><span class="line">        return request</span><br><span class="line">    &#125;</span><br><span class="line">    func willSend(_ request: RequestType, target: TargetType) &#123;</span><br><span class="line">        现发送请求前需要做的事情</span><br><span class="line">        if target.headers?[&quot;isHiddentLoading&quot;] != &quot;true&quot; &#123;</span><br><span class="line">            currentView?.addSubview(activityIndicatorView)</span><br><span class="line">            activityIndicatorView.center = currentView!.center</span><br><span class="line">            activityIndicatorView.startAnimating()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public func didReceive(_ result: Result&lt;Response, MoyaError&gt;, target: TargetType) &#123;</span><br><span class="line">        if activityIndicatorView.isAnimating &#123;</span><br><span class="line">            activityIndicatorView.stopAnimating()</span><br><span class="line">            activityIndicatorView.removeFromSuperview()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// 自定义插件</span><br><span class="line">public final class NetworkLoadingPlugin: PluginType &#123;</span><br><span class="line">    public func willSend(_ request: RequestType, target: TargetType) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    public func didReceive(_ result: Result&lt;Moya.Response, MoyaError&gt;, target: TargetType) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Moya默认有4个插件</p><ol><li><p>AccessTokenPlugin    &#x2F;&#x2F; 管理AccessToken的插件</p></li><li><p>CredentialsPlugin       &#x2F;&#x2F; 管理认证的插件</p></li><li><p>NetworkActivityPlugin &#x2F;&#x2F; 管理网络状态的插件</p></li><li><p>NetworkLoggerPlugin &#x2F;&#x2F; 管理网络log的插件</p></li></ol></blockquote><h3 id="RxSwift"><a href="#RxSwift" class="headerlink" title="RxSwift"></a>RxSwift</h3><blockquote><p>这里的RxSwift不是完整的RxSwift，而是为Moya定制的一个扩展(pod ‘Moya&#x2F;RxSwift’)在数据请求回来后进行处理。</p><ol><li><p>request()  传入API</p></li><li><p>asObservable() 是Moya为RxSwift提供的扩展方法，返回可监听序列</p></li><li><p>mapHandyJsonModel() 也是Moya RxSwift的扩展方法进行自定义的，可以把返回的数据解析成model</p></li><li><p>subscribe() 是对处理过的 Observable 订阅一个 onNext 的观察者，一旦得到JSON格式的数据，就会经行相应的处理</p></li><li><p>disposed() 是RxSwift的一个自动内存处理机制，类似ARC，会自动处理不需要的对象</p></li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">/// 数据 转 模型</span><br><span class="line">extension ObservableType where E == Response &#123;</span><br><span class="line">    public func mapHandyJsonModel&lt;T: HandyJSON&gt;(_ type: T.Type) -&gt; Observable&lt;T&gt; &#123;</span><br><span class="line">        return flatMap &#123; response -&gt; Observable&lt;T&gt; in</span><br><span class="line">            return Observable.just(response.mapHandyJsonModel(T.self))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/// 数据 转 模型</span><br><span class="line">extension Response &#123;</span><br><span class="line">    func mapHandyJsonModel&lt;T: HandyJSON&gt;(_ type: T.Type) -&gt; T &#123;</span><br><span class="line">        let jsonString = String.init(data: data, encoding: .utf8)</span><br><span class="line">        if let modelT = JSONDeserializer&lt;T&gt;.deserializeFrom(json: jsonString) &#123;</span><br><span class="line">            return modelT</span><br><span class="line">        &#125;</span><br><span class="line">        return JSONDeserializer&lt;T&gt;.deserializeFrom(json: &quot;&#123;\&quot;msg\&quot;:\&quot;\(&quot;common.try&quot;.L())\&quot;&#125;&quot;)!</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">extension WTApiManager &#123;</span><br><span class="line">    class func NetExchangeRequest&lt;T: BaseModel&gt;(disposeBag: DisposeBag,type: ExchangeApiManager, model: T.Type, isBackFail: Bool = false, Success:@escaping (T)-&gt;(), Error: @escaping ()-&gt;()) &#123;</span><br><span class="line">        WTExchangeProvider.rx.request(type)</span><br><span class="line">            .asObservable()</span><br><span class="line">            .mapHandyJsonModel(model)</span><br><span class="line">            .subscribe &#123; (event) in</span><br><span class="line">                switch event &#123;</span><br><span class="line">                case let .next(data):</span><br><span class="line">                    if isBackFail &#123;</span><br><span class="line">                        Success(data)</span><br><span class="line">                        break</span><br><span class="line">                    &#125;</span><br><span class="line">                    guard data.status == 200 else &#123;</span><br><span class="line">                        WTProgressHUD.show(error: data.message ?? &quot;common.try&quot;.L(), toView: nil)</span><br><span class="line">                        Error()</span><br><span class="line">                        break</span><br><span class="line">                    &#125;</span><br><span class="line">                    Success(data)</span><br><span class="line">                    break</span><br><span class="line">                case let .error(error):</span><br><span class="line">                    WTDLog(error)</span><br><span class="line">                    Error()</span><br><span class="line">                    break</span><br><span class="line">                default:</span><br><span class="line">                    break</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;.disposed(by: disposeBag)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HandyJSON"><a href="#HandyJSON" class="headerlink" title="HandyJSON"></a>HandyJSON</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class BaseModel: HandyJSON &#123;</span><br><span class="line">    var status: Int = 0</span><br><span class="line">    var message: String? = nil // 服务端返回提示</span><br><span class="line">    required init()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class WTBaseModel&lt;T: HandyJSON&gt;: BaseModel &#123;</span><br><span class="line">    var data: T? // 具体的data的格式和业务相关，故用泛型定义</span><br><span class="line">&#125;</span><br><span class="line">struct WTCurrencyBalanceModel: HandyJSON &#123;</span><br><span class="line">    var coinCode: String = &quot;&quot;</span><br><span class="line">    let balanceAvailable: Double = 0.0</span><br><span class="line">    let balanceFrozen: Double = 0.0</span><br><span class="line">    let worth: Double = 0.0</span><br><span class="line">&#125;</span><br><span class="line">// 网络请求 传入对应model</span><br><span class="line">WTApiManager.NetOtherRequest(disposeBag: disposeBag, type: .getMarketsPrice, model: WTBaseModel&lt;WTRateModel&gt;, Success: &#123;(model) in</span><br><span class="line">&#125;) &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="以上就是我在项目中使用"><a href="#以上就是我在项目中使用" class="headerlink" title="以上就是我在项目中使用"></a>以上就是我在项目中使用</h3><p><strong><code>Moya+HandyJSON+RxSwift</code>的方法，如果有错误或者不足之处还望指正，谢谢</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;项目第一版网络框架用的是&lt;a href=&quot;https://github.com/bustoutsolutions/siesta&quot;&gt;siesta&lt;/a&gt;,它的缓存与自动刷新确实很好用而且代码很简洁，但是在文件的上传与下载以及对返回类型需要精确匹配要求</summary>
      
    
    
    
    <category term="swift" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/categories/swift/"/>
    
    
    <category term="“swift”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9Cswift%E2%80%9D/"/>
    
    <category term="“网络请求”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9C%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E2%80%9D/"/>
    
    <category term="“Moya”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9CMoya%E2%80%9D/"/>
    
    <category term="“HandyJSON”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9CHandyJSON%E2%80%9D/"/>
    
    <category term="“RxSwift”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9CRxSwift%E2%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>项目剖析02-swift 轻松实现动画效果-Lottie</title>
    <link href="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2019/12/23/%E9%A1%B9%E7%9B%AE%E5%89%96%E6%9E%9002-swift-%E8%BD%BB%E6%9D%BE%E5%AE%9E%E7%8E%B0%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C-Lottie/"/>
    <id>https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2019/12/23/%E9%A1%B9%E7%9B%AE%E5%89%96%E6%9E%9002-swift-%E8%BD%BB%E6%9D%BE%E5%AE%9E%E7%8E%B0%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C-Lottie/</id>
    <published>2019-12-23T04:34:37.000Z</published>
    <updated>2025-06-11T03:43:59.137Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/airbnb/lottie-ios">Lottie</a> 是 <a href="https://lottiefiles.com/?lang=zh_CN">Airbnb</a>开源的一套跨平台的动画效果解决方案,它能够同时支持<code>iOS</code>、<code>Android</code>、<code>Web</code> 和 <code>React Native</code>的开发，设计师只需要用 <a href="https://www.adobe.com/cn/products/aftereffects.html">AdobeAfterEffects</a>(AE) 设计出需要的的动画之后，使用 <code>Lottie</code> 提供的 <a href="https://github.com/bodymovin/bodymovin">Bodymovin</a> 插件将设计好的动画导出成JSON格式(文件很小不会象GIF那么庞大)给你即可，可以让设计师实现所见即所得的动画再也不用和设计师争论动画设计了。本文只是展示在swift中如何简单使用<code>Lottie</code> ，详细的使用方法请参考<a href="https://airbnb.io/lottie/#/">官方文档</a></p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/9435d33b4f8d95e2fbaed37fa0c418ba.gif" alt="github例图"></p><h3 id="用法举例"><a href="#用法举例" class="headerlink" title="用法举例"></a>用法举例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">lazy var lottieAnimationView: AnimationView = &#123;</span><br><span class="line">        // 加载本地资源</span><br><span class="line">        let path : String = Bundle.main.path(forResource: &quot;data&quot;, ofType: &quot;json&quot;)!</span><br><span class="line">        let lottieAnimationView = AnimationView.init(filePath: path)</span><br><span class="line">        WTNavigationManger.Nav?.view.addSubview(lottieAnimationView)</span><br><span class="line">        lottieAnimationView.constrain(toSuperviewEdges: nil)</span><br><span class="line">        lottieAnimationView.isUserInteractionEnabled = true</span><br><span class="line">        lottieAnimationView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(removeLottieAnimationViewFromParent)))</span><br><span class="line">        return lottieAnimationView</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">// 调用</span><br><span class="line">lottieAnimationView.play &#123;[weak self] (complete) in</span><br><span class="line">       guard let mySelf = self else &#123;return&#125;</span><br><span class="line">       mySelf.removeLottieAnimationViewFromParent()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">@objc func removeLottieAnimationViewFromParent() &#123;</span><br><span class="line">        lottieAnimationView.removeFromSuperview()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>将设计师给你的文件导入项目，然后通过Bundle.main.path(forResource:找到json文件，然后将AnimationView添加到视图，在需要展示动画的地方调用play() 方法，这样动画就可以加载了。</p></blockquote><h3 id="引入json的方式"><a href="#引入json的方式" class="headerlink" title="引入json的方式"></a>引入json的方式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/// json所在的文件，默认为Bundle.main</span><br><span class="line">let animation = Animation.named(&quot;StarAnimation&quot;) </span><br><span class="line">/// 默认为Bundle.main</span><br><span class="line">let animation = Animation.named(&quot;StarAnimation&quot;, bundle: myBundle)</span><br><span class="line">/// subdirectory 为动画所在的包中的子目录(可选的)</span><br><span class="line">let animation = Animation.named(&quot;StarAnimation&quot;, subdirectory: &quot;Animations&quot;)</span><br><span class="line">/// animationCache 为保存加载动画的缓存(可选的)</span><br><span class="line">let animation = Animation.named(&quot;StarAnimation&quot;, animationCache: LRUAnimationCache.sharedCache)</span><br></pre></td></tr></table></figure><h3 id="指定加载路径"><a href="#指定加载路径" class="headerlink" title="指定加载路径"></a>指定加载路径</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Animation.filepath(_ filepath: String, animationCache: AnimationCacheProvider?) -&gt; Animation?</span><br></pre></td></tr></table></figure><blockquote><p>从绝对文件路径加载动画模型。如果没有找到动画，则返回nil<br>filepath:要加载的动画的绝对文件路径<br>animationCache:用于保存加载的动画的缓存(可选的)</p></blockquote><h3 id="播放动画"><a href="#播放动画" class="headerlink" title="播放动画"></a>播放动画</h3><p><strong>基本播放(Basic Playing)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 播放动画从它的当前状态到它的时间轴结束。在动画停止时调用completion代码块</span><br><span class="line">// 如果动画完成，则completion返回true。如果动画被中断，则返回false</span><br><span class="line">AnimationView.play(completion: LottieCompletionBlock?)</span><br></pre></td></tr></table></figure><p><strong>利用进度时间(Play with Progress Time)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 指定一个时间到另一个时间的播放</span><br><span class="line">AnimationView.play(fromProgress: AnimationProgressTime?, toProgress: AnimationProgressTime, loopMode: LottieLoopMode?, completion: LottieCompletionBlock?)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>时间帧播放(Play with Marker Names)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 动画播放从一个时间帧到另一个时间帧</span><br><span class="line">AnimationView.play(fromFrame: AnimationProgressTime?, toFrame: AnimationFrameTime, loopMode: LottieLoopMode?, completion: LottieCompletionBlock?)</span><br></pre></td></tr></table></figure><p><strong>时间帧播放(Play with Marker Names)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 将动画从命名标记播放到另一个标记。标记是编码到动画数据中并指定名称的时间点</span><br><span class="line">AnimationView.play(fromMarker: String?, toMarker: String, loopMode: LottieLoopMode?, completion: LottieCompletionBlock?)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="其它操作"><a href="#其它操作" class="headerlink" title="其它操作"></a>其它操作</h3><blockquote><ol><li><p>AnimationView.pause() &#x2F;&#x2F; 暂停</p></li><li><p>AnimationView.stop()  &#x2F;&#x2F; 停止</p></li><li><p>var AnimationView.backgroundBehavior: LottieBackgroundBehavior { get set} &#x2F;&#x2F; app进入后台</p></li><li><p>var AnimationView.contentMode: UIViewContentMode { get set } &#x2F;&#x2F; 循环播放模式。默认是playOnce，还有autoReverse无限循环</p></li><li><p>var AnimationView.isAnimationPlaying: Bool { get set } &#x2F;&#x2F; 判断动画是否在播放</p></li><li><p>var AnimationView.animationSpeed: CGFloat { get set } &#x2F;&#x2F; 动画速度</p></li><li><p>func AnimationView.forceDisplayUpdate() &#x2F;&#x2F; 强制重绘动画视图</p></li></ol></blockquote><p><strong>以上就是我在项目中使用<code>Lottie</code>的方法，如果有错误或者不足之处还望指正，谢谢</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/airbnb/lottie-ios&quot;&gt;Lottie&lt;/a&gt; 是 &lt;a href=&quot;https://lottiefiles.com/?lang=zh_CN&quot;&gt;Airbnb&lt;/a&gt;开源的一套跨平台</summary>
      
    
    
    
    <category term="iOS" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/categories/iOS/"/>
    
    
    <category term="“iOS”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9CiOS%E2%80%9D/"/>
    
    <category term="“动画”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9C%E5%8A%A8%E7%94%BB%E2%80%9D/"/>
    
    <category term="“Lottie”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9CLottie%E2%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>项目剖析01-swift WebSocket</title>
    <link href="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2019/12/23/%E9%A1%B9%E7%9B%AE%E5%89%96%E6%9E%9001-swift-WebSocket/"/>
    <id>https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2019/12/23/%E9%A1%B9%E7%9B%AE%E5%89%96%E6%9E%9001-swift-WebSocket/</id>
    <published>2019-12-23T02:00:16.000Z</published>
    <updated>2025-06-11T03:43:59.134Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>已经很长一段时间没有总结项目了，正好最近完成项目第二版的改版(新项目完全是用swift写的)，就把项目中一些有意义的知识块在此记录一下， 项目中有实时的交易需要展示，所以用到了socket长链接，我用的是<a href="https://github.com/daltoniam/Starscream">Starscream</a>这个第三方库，集成方法很简单去网站看看就知道。</p></blockquote><h3 id="先上代码"><a href="#先上代码" class="headerlink" title="先上代码"></a>先上代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line">import UIKit</span><br><span class="line">import Reachability</span><br><span class="line">import Starscream</span><br><span class="line">import zlib</span><br><span class="line"></span><br><span class="line">let reachability = Reachability()! // 判断网络连接</span><br><span class="line">let webSocket = WTWebsocket.shared</span><br><span class="line">var reConnectTime = 0 // 设置重连次数</span><br><span class="line">let reConnectMaxTime = 1000 // 设置最大重连次数</span><br><span class="line">let reConnectIntervalTime: TimeInterval = 15 // 设置重连时间间隔(秒)</span><br><span class="line">var websocketTimer: Timer? = nil</span><br><span class="line">var reConnectSubscribeDict:[String : Any] = [:]</span><br><span class="line">var page = &quot;home&quot;</span><br><span class="line">var isReconnect = true</span><br><span class="line"></span><br><span class="line">final class WTWebsocket: NSObject,WebSocketDelegate &#123;</span><br><span class="line">    </span><br><span class="line">    var isPingBack = true</span><br><span class="line">    var myWebsocket: WebSocket? = nil</span><br><span class="line">    //  socket连接上函数</span><br><span class="line">    func websocketDidConnect(socket: WebSocketClient) &#123;</span><br><span class="line">        //设置重连次数，解决无限重连问题</span><br><span class="line">        reConnectTime = 0</span><br><span class="line">        if reConnectSubscribeDict.count &gt; 0 &#123;</span><br><span class="line">            self.subscribe(subscribeDict: reConnectSubscribeDict)</span><br><span class="line">        &#125;</span><br><span class="line">        self.hearJump()</span><br><span class="line">        if  websocketTimer == nil &#123;</span><br><span class="line">            websocketTimer = Timer.scheduledTimer(timeInterval: reConnectIntervalTime, target: self, selector: #selector(sendBrandStr), userInfo: nil, repeats: true)</span><br><span class="line">        &#125;</span><br><span class="line">        isReconnect = true</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //发送文字消息</span><br><span class="line">    @objc func sendBrandStr()&#123;</span><br><span class="line">        self.checkPing()</span><br><span class="line">        let json = getJSONStringFromDictionary(dictionary: [&quot;topic&quot;:&quot;PING&quot;])</span><br><span class="line">        SingletonSocket.sharedInstance.socket.write(string: json)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 发送ping</span><br><span class="line">    func hearJump() &#123;</span><br><span class="line">        let json = getJSONStringFromDictionary(dictionary: [&quot;topic&quot;:&quot;PING&quot;])</span><br><span class="line">        SingletonSocket.sharedInstance.socket.write(string: json)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //  socket断开执行函数</span><br><span class="line">    func websocketDidDisconnect(socket: WebSocketClient, error: Error?) &#123;</span><br><span class="line">        //执行重新连接方法</span><br><span class="line">        socketReconnect()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //  接收返回消息函数</span><br><span class="line">    func websocketDidReceiveMessage(socket: WebSocketClient, text: String) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func websocketDidReceiveData(socket: WebSocketClient, data: Data) &#123;</span><br><span class="line">        guard let newStr = String(data: data.gzipUncompress(), encoding: .utf8) else &#123;return&#125;</span><br><span class="line">        if newStr == &quot;PONG&quot; &#123;</span><br><span class="line">            isPingBack = true</span><br><span class="line">            return</span><br><span class="line">        &#125;</span><br><span class="line">      // 处理收到的信息</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 添加注册</span><br><span class="line">    func subscribe(subscribeDict: [String : Any]) &#123;</span><br><span class="line">        var subscribeDicts = subscribeDict</span><br><span class="line">        reConnectSubscribeDict = subscribeDicts</span><br><span class="line">        page = subscribeDicts[&quot;type&quot;] as! String</span><br><span class="line">        subscribeDicts.removeValue(forKey: &quot;type&quot;)</span><br><span class="line">        let json = getJSONStringFromDictionary(dictionary:</span><br><span class="line">            subscribeDicts as NSDictionary)</span><br><span class="line">        SingletonSocket.sharedInstance.socket.write(string: json)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //检测</span><br><span class="line">    @objc func checkPing() &#123;</span><br><span class="line">        if !isPingBack &#123;</span><br><span class="line">            // 重新连接</span><br><span class="line">            socketReconnect()</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            isPingBack = false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //构造单例数据</span><br><span class="line">    static let shared = WTWebsocket()</span><br><span class="line">    private override init() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//socket 重连逻辑</span><br><span class="line">func socketReconnect() &#123;</span><br><span class="line">    //判断网络情况，如果网络正常，可以执行重连</span><br><span class="line">    if reachability.connection != .none &#123;</span><br><span class="line">        //设置重连次数，解决无限重连问题</span><br><span class="line">        reConnectTime =  reConnectTime + 1</span><br><span class="line">        if reConnectTime &lt; reConnectMaxTime &#123;</span><br><span class="line">            //添加重连延时执行，防止某个时间段，全部执行</span><br><span class="line">            let time: TimeInterval = 2.0</span><br><span class="line">            DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + time) &#123;</span><br><span class="line">                SingletonSocket.sharedInstance.socket.connect()</span><br><span class="line">                SingletonSocket.sharedInstance.socket.disconnect()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //提示重连失败</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //提示无网络</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//socket主动断开，放在app进入后台时，数据进入缓存。app再进入前台，app出现卡死的情况</span><br><span class="line">func socketDisConnect() &#123;</span><br><span class="line">    if !SingletonSocket.sharedInstance.socket.isConnected &#123;</span><br><span class="line">        websocketTimer?.invalidate()</span><br><span class="line">        websocketTimer = nil</span><br><span class="line">        SingletonSocket.sharedInstance.socket.disconnect()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// initSocket方法</span><br><span class="line">func initWebSocketSingle () &#123;</span><br><span class="line">    SingletonSocket.sharedInstance.socket.delegate = webSocket</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//声明webSocket单例</span><br><span class="line">class SingletonSocket &#123;</span><br><span class="line">    let socket:WebSocket = WebSocket(url: URL(string: AppURLHOST.SocketURL)!)</span><br><span class="line">    class var sharedInstance : SingletonSocket&#123;</span><br><span class="line">        struct Static&#123;</span><br><span class="line">            static let instance:SingletonSocket = SingletonSocket()</span><br><span class="line">        &#125;</span><br><span class="line">        if !Static.instance.socket.isConnected&#123;</span><br><span class="line">            Static.instance.socket.connect()</span><br><span class="line">        &#125;</span><br><span class="line">        return Static.instance</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="整个代码很简单，基本都有注释，大概聊一聊里面的一些关键点"><a href="#整个代码很简单，基本都有注释，大概聊一聊里面的一些关键点" class="headerlink" title="整个代码很简单，基本都有注释，大概聊一聊里面的一些关键点"></a>整个代码很简单，基本都有注释，大概聊一聊里面的一些关键点</h3><blockquote><p>发送ping-俗称发送心跳，这个主要是判断socket是否断开，链接成功后每次间隔固定时间发送一次请求，然后在返回中修改isPingBack，在下一次发送请求前检查isPingBack判断上一次的请求是否返回，这样就可以判断socket是否断开，这个间隔时间可以自由设定，但是最好不要太短，太短有可能是socket连接了但是没有来得及返回。当然太长也不行，这可能导致发现socket断开不及时。</p></blockquote><p><strong>app在后台需要断开socket，当 app重新进入前台需要重新连接</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">func applicationWillResignActive(_ application: UIApplication) &#123;</span><br><span class="line">        //进入后台模式，主动断开socket，防止出现处理不了的情况</span><br><span class="line">        if SingletonSocket.sharedInstance.socket.isConnected &#123;</span><br><span class="line">            reConnectTime = reConnectMaxTime</span><br><span class="line">            socketDisConnect()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    func applicationDidBecomeActive(_ application: UIApplication) &#123;</span><br><span class="line">        //进入前台模式，主动连接socket</span><br><span class="line">        //解决因为网络切换或链接不稳定问题，引起socket断连问题</span><br><span class="line">        //如果app从无网络，到回复网络，需要执行重连</span><br><span class="line">        if !isFirstApplicationDidBecomeActive &#123;</span><br><span class="line">            reConnectTime = 0</span><br><span class="line">            socketReconnect()</span><br><span class="line">            WTBasicConfigManager.shareDataSingle.getHash()</span><br><span class="line">        &#125;</span><br><span class="line">        isFirstApplicationDidBecomeActive = false</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>一定要设置最大重新连接的次数，不然app会无限重新连接</strong></p><p><strong>连接成功或者重连成功都需要对需要推送的数据进行一次网络请求，确保数据的准确性。</strong></p><blockquote><p>以上就是我在项目中使用WebSocket的方法，如果有错误或者不足之处还望指正，谢谢</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;已经很长一段时间没有总结项目了，正好最近完成项目第二版的改版(新项目完全是用swift写的)，就把项目中一些有意义的知识块在此记录一下， 项目中有实时的交易需要展示，所以用到了socket长链接，我用的是&lt;a href=&quot;https://githu</summary>
      
    
    
    
    <category term="swift" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/categories/swift/"/>
    
    
    <category term="“swift”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9Cswift%E2%80%9D/"/>
    
    <category term="“WebSocket”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9CWebSocket%E2%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>iOS集成融云SDK即时通讯整理</title>
    <link href="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2018/03/29/iOS%E9%9B%86%E6%88%90%E8%9E%8D%E4%BA%91SDK%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E6%95%B4%E7%90%86/"/>
    <id>https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2018/03/29/iOS%E9%9B%86%E6%88%90%E8%9E%8D%E4%BA%91SDK%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E6%95%B4%E7%90%86/</id>
    <published>2018-03-29T06:36:05.000Z</published>
    <updated>2025-06-11T03:43:59.135Z</updated>
    
    <content type="html"><![CDATA[<h2 id="iOS集成融云SDK即时通讯整理"><a href="#iOS集成融云SDK即时通讯整理" class="headerlink" title="iOS集成融云SDK即时通讯整理"></a>iOS集成融云SDK即时通讯整理</h2><blockquote><p>最近很少写一下项目总结了，最近项目虽然做了很多，但是都是一些外包项目，做下来也没有什么值得总结的。最近一个项目用到了融云即时通讯，以前基本都是用环信，所以还遇到了一些问题，在此总结一下记录一下。</p></blockquote><h3 id="头像、昵称等用户信息-融云对这个问题有两种处理方式"><a href="#头像、昵称等用户信息-融云对这个问题有两种处理方式" class="headerlink" title="头像、昵称等用户信息(融云对这个问题有两种处理方式)"></a>头像、昵称等用户信息(融云对这个问题有两种处理方式)</h3><p><strong>用户信息提供者</strong></p><blockquote><p>实现步骤(以下代码放在单例中，可以是AppDelegate，最好单独写一个单例)  </p><p>首先遵守RCIMUserInfoDataSource这个协议 </p></blockquote><p><strong>然后是要设置代理</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[RCIM sharedRCIM] setUserInfoDataSource:self]; </span><br></pre></td></tr></table></figure><p><strong>最后实现代理方法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">- (void)getUserInfoWithUserId:(NSString *)userId completion:(void (^)(RCUserInfo *))completion &#123;</span><br><span class="line">    NSLog(@&quot;getUserInfoWithUserId ----- %@&quot;, userId);</span><br><span class="line">    RCUserInfo *user = [RCUserInfo new];</span><br><span class="line">    if (userId == nil || [userId length] == 0) &#123;</span><br><span class="line">        user.userId = userId;</span><br><span class="line">        user.portraitUri = @&quot;&quot;;</span><br><span class="line">        user.name = @&quot;&quot;;</span><br><span class="line">        completion(user);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if ([userId isEqualToString:[UserInfo shareInstance].uid]) &#123;</span><br><span class="line">        NSString *urlSelf = [BASIC_URL_image stringByAppendingString:[UserInfo shareInstance].photo];</span><br><span class="line">        return completion([[RCUserInfo alloc] initWithUserId:userId name:[UserInfo shareInstance].nickname portrait:urlSelf]);</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">    </span><br><span class="line">  //根据存储联系人信息的模型，通过 userId 来取得对应的name和头像url，进行以下设置</span><br><span class="line">    [WTBaseHttpRequst postRequstWithURL:getUserHttp params:@&#123;@&quot;uid&quot;:[UserInfo shareInstance].uid, @&quot;api_token&quot;:[UserInfo shareInstance].api_token, @&quot;k_uid&quot;:userId&#125; successBlock:^(NSDictionary *returnData) &#123;</span><br><span class="line">        if ([returnData[@&quot;status&quot;] integerValue] == 1) &#123;</span><br><span class="line">            NSString *urlStr = [BASIC_URL_image stringByAppendingString:returnData[@&quot;data&quot;][@&quot;user&quot;][@&quot;photo&quot;]];</span><br><span class="line">            return completion([[RCUserInfo alloc] initWithUserId:userId name:returnData[@&quot;data&quot;][@&quot;user&quot;][@&quot;nickname&quot;] portrait:urlStr]);</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            completion(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; failureBlock:^(NSString *error) &#123;</span><br><span class="line">        completion(user);</span><br><span class="line">    &#125; showHUD:NO];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这个方法不需要你自己手动调用，只是当你在修改用户信息时调用方法即可</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[RCIM sharedRCIM] refreshUserInfoCache:user withUserId:[UserInfo shareInstance].uid]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">WS(weakSelf);</span><br><span class="line">// 修改用户信息调用</span><br><span class="line">[WTBaseHttpRequst postRequstWithURL:modifyInfoHttp params:dict successBlock:^(NSDictionary *returnData) &#123;</span><br><span class="line">    [weakSelf MBProgressHudShowWithTextOnlyWithText:returnData[@&quot;msg&quot;]];</span><br><span class="line">    if ([returnData[@&quot;status&quot;] integerValue] == 1) &#123;</span><br><span class="line">        RCUserInfo *user = [RCUserInfo new];</span><br><span class="line">        user.userId = [UserInfo shareInstance].uid;</span><br><span class="line">        user.portraitUri = [BASIC_URL_image stringByAppendingString:[UserInfo shareInstance].photo];</span><br><span class="line">        user.name = weakSelf.nickNameTextField.text;</span><br><span class="line">        [[RCIM sharedRCIM] refreshUserInfoCache:user withUserId:[UserInfo shareInstance].uid];</span><br><span class="line">        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1.5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">            [self.navigationController popViewControllerAnimated:YES];</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; failureBlock:^(NSString *error) &#123;</span><br><span class="line">    [weakSelf MBProgressHudShowWithTextOnlyWithText:error];</span><br><span class="line">&#125; showHUD:YES];</span><br></pre></td></tr></table></figure><p><strong>在扩展消息中携带用户信息</strong></p><blockquote><p>设置发送消息时在消息体中携带用户信息(从2.4.1 之后附加用户信息之后cell默认会显示附加的用户信息的头像，即用户信息不会取用户信息提供者里提供的用户信息)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[RCIM sharedRCIM].enableMessageAttachUserInfo = YES; </span><br><span class="line">```  </span><br><span class="line">  </span><br><span class="line">**你设置了enableMessageAttachUserInfo之后，可以取到**</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&#x2F;**  </p><ul><li>发送者信息</li><li>**&#x2F;<br>@property(nonatomic, strong) RCUserInfo *senderUserInfo; <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line">**当然我觉得还可以从后台获取好友关系后，我们在每次登陆后，开一个线程把好友关系请求下来存起来然后根据环信ID查找好友的昵称和头像**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 给输入框添加提示语(这个我一直觉得环信应该给了方法修改，只是我一直没有找到这个方法，所以只有自己去写了)</span><br><span class="line">  </span><br><span class="line">**创建提示的label**</span><br><span class="line"></span><br></pre></td></tr></table></figure>_lab &#x3D; [[UILabel alloc] initWithFrame:self.chatSessionInputBarControl.inputTextView.bounds];<br>_lab.text &#x3D; @”请输入文字信息…”;<br>_lab.textColor &#x3D; [UIColor colorWithHexColor:@”dddddd”];<br>_lab.font &#x3D; [UIFont systemFontOfSize:15];<br>_lab.center &#x3D; CGPointMake(_lab.center.x + 15, _lab.center.y);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**判定是否有草稿来显示和隐藏提示的label**</span><br><span class="line"></span><br></pre></td></tr></table></figure>[self.chatSessionInputBarControl.inputTextView addSubview:_lab];<br>if (self.chatSessionInputBarControl.draft &#x3D;&#x3D; nil || self.chatSessionInputBarControl.draft.length &#x3D;&#x3D; 0) {<br> _lab.hidden &#x3D; NO;<br>}else {<br> _lab.hidden &#x3D; YES;<br>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**根据输入数据来判定显示隐藏提示label**</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li>(void)inputTextView:(UITextView *)inputTextView shouldChangeTextInRange:(NSRange)range replacementText:(NSString *)text {<br>  if (((inputTextView.text.length &#x3D;&#x3D; 1 &amp;&amp; [text isEqualToString:@””]) || (inputTextView.text.length &#x3D;&#x3D; 0 &amp;&amp; text.length &gt; 0))  &amp;&amp; range.length &#x3D;&#x3D; 1 &amp;&amp; range.location &#x3D;&#x3D; 0) {<br>  _lab.hidden &#x3D; NO;<br>  }else {<br>  _lab.hidden &#x3D; YES;<br>  }<br>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 取消输入@弹出好友列表界面，保留长按头像@方法</span><br><span class="line"></span><br><span class="line">**首先在AppDelegate中开启消息@功能（只支持群聊和讨论组, App需要实现群成员数据源groupMemberDataSource）**</span><br><span class="line"></span><br></pre></td></tr></table></figure>[RCIM sharedRCIM].enableMessageMentioned &#x3D; YES;</li></ul><p>然后在继承RCConversationViewController的控制器中调用<br>-(void)showChooseUserViewController:(void (^)(RCUserInfo *selectedUserInfo))selectedBlock<br>                         cancel:(void (^)())cancelBlock {<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### 在会话列表中添加一些固定的cell(继承RCConversationListViewController)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 对自定义cell赋值</p><ul><li>(RCConversationBaseCell *)rcConversationListTableView:(UITableView *)tableView<br>                            cellForRowAtIndexPath:(NSIndexPath *)indexPath {<br>  RCCustomCell *cell &#x3D; (RCCustomCell *)[[RCCustomCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@”RCCustomCell”];<br>  RCConversationModel *model &#x3D; self.conversationListDataSource[indexPath.row];<br>  cell.nameLabel.text &#x3D; model.conversationTitle;<br>  return cell;<br>}</li></ul><p>&#x2F;&#x2F; 添加自定义cell的数据源</p><ul><li>(NSMutableArray *)willReloadTableData:(NSMutableArray *)dataSource{<br>  NSArray *arr &#x3D; @[@”论坛回复和@我的”, @”陌生人私信”, @”幸存者部落@我的”, @”问卷调查”];<br>  for (int i &#x3D; 0; i&lt;arr.count; i++) {<br>  RCConversationModel *model &#x3D; [[RCConversationModel alloc]init];<br>  model.conversationModelType &#x3D; RC_CONVERSATION_MODEL_TYPE_CUSTOMIZATION;<br>  model.conversationTitle &#x3D; arr[i];<br>  model.isTop &#x3D; YES;<br>  [dataSource insertObject:model atIndex:i];<br>  }<br>  return dataSource;<br>}</li></ul><p>&#x2F;&#x2F; 点击cell跳转</p><ul><li>(void)onSelectedTableRow:(RCConversationModelType)conversationModelType<br>   conversationModel:(RCConversationModel *)model<br>     atIndexPath:(NSIndexPath *)indexPath{<br>  if (indexPath.row &#x3D;&#x3D; 0) {<br>  WTForumAndConnectListViewController *chatList &#x3D; (WTForumAndConnectListViewController *)[WTStoryBoardSegment instantiateViewControllerWithStoryBoardName:@”Main” identifier:@”WTForumAndConnectListViewController”];<br>  chatList.title &#x3D; @”回复和@我的”;<br>  [self.navigationController pushViewController:chatList animated:YES];<br>  }else if (indexPath.row &#x3D;&#x3D; 1) {<br>  WTChatListViewController *chatList &#x3D; [[WTChatListViewController alloc] init];<br>  chatList.title &#x3D; @”陌生人私信”;<br>  chatList.isEnteredToCollectionViewController &#x3D; YES;<br>  chatList.type &#x3D; 1;<br>  chatList.friendArray &#x3D; self.friendArray;<br>  [self.navigationController pushViewController:chatList animated:YES];<br>  }else if (indexPath.row &#x3D;&#x3D; 2) {<br>  WTChatListViewController *chatList &#x3D; [[WTChatListViewController alloc] init];<br>  chatList.title &#x3D; @”幸存者部落@我的”;<br>  chatList.isEnteredToCollectionViewController &#x3D; YES;<br>  chatList.type &#x3D; 2;<br>  [self.navigationController pushViewController:chatList animated:YES];<br>  }else if (indexPath.row &#x3D;&#x3D; 3) {<br>  WTQuestionnaireViewController *questionnaire &#x3D; (WTQuestionnaireViewController *)[WTStoryBoardSegment instantiateViewControllerWithStoryBoardName:@”Main” identifier:@”WTQuestionnaireViewController”];<br>  [self.navigationController pushViewController:questionnaire animated:YES];<br>  }else {<br>  &#x2F;&#x2F;点击cell，拿到cell对应的model，然后从model中拿到对应的RCUserInfo，然后赋值会话属性，进入会话<br>  if (model.conversationType &#x3D;&#x3D; ConversationType_PRIVATE) {&#x2F;&#x2F;单聊<br>      WTMyConversationLisViewController *_conversationVC &#x3D; [[WTMyConversationLisViewController alloc]init];<br>      _conversationVC.conversationType &#x3D; model.conversationType;<br>      _conversationVC.targetId &#x3D; model.targetId;<br>      _conversationVC.title &#x3D; model.conversationTitle;<br>      [self.navigationController pushViewController:_conversationVC animated:YES];<br>  }else if (model.conversationType &#x3D;&#x3D; ConversationType_GROUP){&#x2F;&#x2F;群聊<br>      WTMyConversationLisViewController *_conversationVC &#x3D; [[WTMyConversationLisViewController alloc]init];<br>      _conversationVC.conversationType &#x3D; model.conversationType;<br>      _conversationVC.title &#x3D; model.conversationTitle;<br>      _conversationVC.targetId &#x3D; model.targetId;<br>      [self.navigationController pushViewController:_conversationVC animated:YES];<br>  }<br>  }<br>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 在任意地方获取聊天列表数量及删除列表</span><br><span class="line"></span><br><span class="line">**获取聊天列表**   </span><br><span class="line"></span><br></pre></td></tr></table></figure>NSArray *privateArr &#x3D; [[RCIMClient sharedRCIMClient] getConversationList:@[@(ConversationType_PRIVATE)]];<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**在ConversationList添加对应类型的聊天就可以获取对应类型的聊天列表删除方法类似**</span><br><span class="line"></span><br></pre></td></tr></table></figure>[[RCIMClient sharedRCIMClient] clearConversations:@[@(ConversationType_PRIVATE)]];</li></ul><pre><code>### 背景图&gt; 融云聊天列表没有数据的默认图片下面有点击右上角加入聊天，可是不是所有的聊天都有这个功能(我的就没有)如何没有就可以在资源文件中找到 no\_message\_img 这张图片用ps去掉下面的那一行字### 其它&gt; 以上就是我在使用融云过程中遇到的一些问题及解决方法，如果有错误或者不足之处还望指正，谢谢！</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;iOS集成融云SDK即时通讯整理&quot;&gt;&lt;a href=&quot;#iOS集成融云SDK即时通讯整理&quot; class=&quot;headerlink&quot; title=&quot;iOS集成融云SDK即时通讯整理&quot;&gt;&lt;/a&gt;iOS集成融云SDK即时通讯整理&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;最</summary>
      
    
    
    
    <category term="iOS" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/categories/iOS/"/>
    
    
    <category term="“iOS”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9CiOS%E2%80%9D/"/>
    
    <category term="“融云”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9C%E8%9E%8D%E4%BA%91%E2%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>UISearchBar详解</title>
    <link href="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2017/03/11/UISearchBar%E8%AF%A6%E8%A7%A3/"/>
    <id>https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2017/03/11/UISearchBar%E8%AF%A6%E8%A7%A3/</id>
    <published>2017-03-10T16:27:34.000Z</published>
    <updated>2025-06-11T03:43:59.135Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天公司的项目测试的差不多了，基本可以上架了，又有时间来分享一下最近遇到的一些问题了，公司的项目进行了大改版（应该是全改了，基本是一个新的项目了），老大决定用swift重写。之前一直在自学swift，终于这一次可以实战了。项目中搜索用的比较多，但是搜索框的样式与默认的差别太大了，所以只能自定义了。</p></blockquote><p>The UISearchBar class implements a text field control for text-based searches. The control provides a text field for entering text, a search button, a bookmark button, and a cancel button. The UISearchBar object does not actually perform any searches. You use a delegate, an object conforming to the UISearchBarDelegate protocol, to implement the actions when text is entered and buttons are clicked.</p><p><blockquote><p>以上是苹果对UISearchBar的解释，可以看见UISearchBar提供了类似UITextField的输入（其实它的组成中就有UITextField，下面会讲到），右边有搜索按钮、标签按钮、关闭按钮可供选择，搜索都是在协议UISearchBarDelegate中进行。</p></blockquote></p><p><strong>自定义外观</strong></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/7efbcef7e9cb93c4383fe6794bdbefdf.webp?x-image-process=image/format,png" alt="默认搜索外观"></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/226c294545fe64cc3f3f91cd71df0146.webp?x-image-process=image/format,png" alt="项目搜索外观"></p><blockquote><p>UISearchBar的层级很是复杂主要由UISearchBarBackgroud、UISearchBarTextField、<br>UINavigationButton组成，其中UISearchBarTextField就是输入框，主要是由——UISearchBarSearchFieldBackgroundView、UIButton（❌）、UIImageView（?）等组成，</p></blockquote><p><strong>获取TextField方法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let searchFiled:UITextField = self.searchBar.value(forKey: &quot;_searchField&quot;) as! UITextField</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>这样就可以通过修改searchFiled来修改输入样式（圆角、字体等）。</strong></p><blockquote><p>UISearchBar的直接子控件是UIVIew，其上的子控件UISearchBarBackgroud的frame与UISearchBar的bounds相等，UISearchBarTextField的高度默认为28与UISearchBar左右有8像素的固定间距，上下间距为直接子控件UIView的高度 - UISearchBarTextField的默认高度28 再除以2。因此UISearchBar的输入框始终与设置的frame不一样，不便于布局，我们可以添加一个子类继承UISearchBar，可以更改其内边距。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">class MySearchBar: UISearchBar &#123;</span><br><span class="line">    </span><br><span class="line">    // 监听是否添加了该属性</span><br><span class="line">    var contentInset: UIEdgeInsets? &#123;</span><br><span class="line">        didSet &#123;</span><br><span class="line">            self.layoutSubviews()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    override func layoutSubviews() &#123;</span><br><span class="line">        super.layoutSubviews()</span><br><span class="line">        // 便利寻找</span><br><span class="line">        for view in self.subviews &#123;</span><br><span class="line">            for subview in view.subviews &#123;</span><br><span class="line">                // 判定是否是UISearchBarTextField</span><br><span class="line">                if subview.isKind(of: UITextField.classForCoder()) &#123;</span><br><span class="line">                    if let textFieldContentInset = contentInset &#123;</span><br><span class="line">                        // 修改UISearchBarTextField的布局</span><br><span class="line">                        subview.frame = CGRect(x: textFieldContentInset.left, y: textFieldContentInset.top, width: self.bounds.width - textFieldContentInset.left - textFieldContentInset.right, height: self.bounds.height - textFieldContentInset.top - textFieldContentInset.bottom)</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        // 设置UISearchBar中UISearchBarTextField的默认边距</span><br><span class="line">                        let top: CGFloat = (self.bounds.height - 28.0) / 2.0</span><br><span class="line">                        let bottom: CGFloat = top</span><br><span class="line">                        let left: CGFloat = 8.0</span><br><span class="line">                        let right: CGFloat = left</span><br><span class="line">                        contentInset = UIEdgeInsets(top: top, left: left, bottom: bottom, right: right)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>让实例化的UISearchBar继承MySearchBar，然后就可以很方便的直接控制内边距了</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.searchBar.contentInset = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)</span><br></pre></td></tr></table></figure><blockquote><p>接下来就是处理placeholder靠左，这个就比较麻烦了，查询了一大堆办法都挺麻烦的，最后找到了一个很投机的办法：先判定手机宽度，然后在placeholder右边加上空格做成靠左的假象。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if SCREEN.WIDTH == 320 &#123;</span><br><span class="line">           self.searchBar.placeholder = &quot;搜索位置       &quot;</span><br><span class="line">       &#125;else if SCREEN.WIDTH == 373\5 &#123;</span><br><span class="line">           self.searchBar.placeholder = &quot;搜索位置                  &quot;</span><br><span class="line">       &#125;else if SCREEN.WIDTH == 414 &#123;</span><br><span class="line">           self.searchBar.placeholder = &quot;搜索位置                                 &quot;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>然后在storyboard中设置searchBar的BarStyle为Minimal就可以很方便的控制UISearchBar的外观了。<br>到这里就剩一个问题了：UISearchBar上下的两根黑线了，</p></blockquote><p><strong>去除方法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.searchBar.setBackgroundImage(UIImage.init(), for: .any, barMetrics: .default)</span><br></pre></td></tr></table></figure><p><strong>搜索的使用</strong></p><blockquote><p>如苹果官方文档所说，与搜索相关的都是在其代理方法中完成。UISearchBar有很多的代理方法，感兴趣的可以点击进入查看</p></blockquote><p><a href="https://developer.apple.com/reference/uikit/uisearchbardelegate">UISearchBarDelegate</a>我就介绍几个常用的：</p><blockquote><p>当搜索内容变化时，执行该方法,可以实时监听输入框的变化,可以实现时实搜索。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)searchBar:(UISearchBar *)searchBar shouldChangeTextInRange:(NSRange)range replacementText:(NSString *)textNS_AVAILABLE_IOS(3_0);                 // called before text changes</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>也行你想把搜索事件放在点击搜索以后再触发，那就选用这个方法，它就是点击搜索后的代理方法</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (void)searchBarSearchButtonClicked:(UISearchBar *)searchBar;</span><br></pre></td></tr></table></figure><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><blockquote><p>当然如果你觉得这样太麻烦了，你还可以选择用UITextField来实现UISearchBar的功能，但是最终哪一个更加的麻烦还需要试一试才知道。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;今天公司的项目测试的差不多了，基本可以上架了，又有时间来分享一下最近遇到的一些问题了，公司的项目进行了大改版（应该是全改了，基本是一个新的项目了），老大决定用swift重写。之前一直在自学swift，终于这一次可以实战了。项目中搜索用的比较多，但是</summary>
      
    
    
    
    <category term="swift" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/categories/swift/"/>
    
    
    <category term="“iOS”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9CiOS%E2%80%9D/"/>
    
    <category term="“swift”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9Cswift%E2%80%9D/"/>
    
    <category term="“UISearchBar”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9CUISearchBar%E2%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序tips</title>
    <link href="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2017/02/22/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Ftips/"/>
    <id>https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2017/02/22/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Ftips/</id>
    <published>2017-02-21T17:19:52.000Z</published>
    <updated>2025-06-11T03:43:59.136Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近公司项目改版，趁产品修改与UI出图的间歇用公司商户端UI图撸了一把微信小程序。因为刚刚实习那一会接触过前端开发，所以上手还比较快，当然也遇到了很多的问题，不过好在基本按图完成。趁此总结一下我遇到的问题,奉上一些可行的解决方案，希望可以帮助与我遇到相同问题的朋友。<a href="https://github.com/GavinCarter1991/wx-onePro">demo</a> </p></blockquote><h3 id="先上图"><a href="#先上图" class="headerlink" title="先上图"></a>先上图</h3><p><img src="https://i-blog.csdnimg.cn/blog_migrate/b6d605c3b3e52fc14fcf8b758b6c4b33.webp?x-image-process=image/format,png" alt="微信小程序"></p><h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><p><strong>背景图片不能使用本地的</strong></p><blockquote><p>这个问题坑了我很久，因为在模拟器上跑时，将本地图片作为View的背景图片是可以的，但是一到真机测试就不显示背景图片了，一开始还以为是路径错了，经过测试发现路径是没有问题的，最后在网上找到了原因：微信小程序的背景图片不能是本地图片，必须是是网络图片，于是我就找了一个网站将图片传了上去，将网址作为背景图片链接，就奇迹般的显示了，很是无语。</p></blockquote><h3 id="不能加载网页"><a href="#不能加载网页" class="headerlink" title="不能加载网页"></a>不能加载网页</h3><blockquote><p>微信小程序是不能跳转到网页的，也许是因为微信小程序本身就如同网页吧，也可能是微信不想有人越过它的审核，反正他是不允许直接加载网页的。</p></blockquote><h3 id="不能隐藏导航栏"><a href="#不能隐藏导航栏" class="headerlink" title="不能隐藏导航栏"></a>不能隐藏导航栏</h3><blockquote><p>我的登陆页面本来是不应该有导航栏的，可是就是隐藏不了，也许有方法，但是我找了很久也没有发现。</p></blockquote><h3 id="只支持HTTPS的网络协议并且一个月只能修改5次"><a href="#只支持HTTPS的网络协议并且一个月只能修改5次" class="headerlink" title="只支持HTTPS的网络协议并且一个月只能修改5次"></a>只支持HTTPS的网络协议并且一个月只能修改5次</h3><blockquote><p>在微信小程序中网络请求只能是https类型的。在添加URL的时候都已经限制死了。并且一个月只能修改5次，网络请求必须先进行服务器域名配置。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/48f1eaa31d6ea1dd09c872920e359dee.webp?x-image-process=image/format,png" alt="添加URL"><br>)</p><h3 id="所有的页面都必须在app-json中配置路径"><a href="#所有的页面都必须在app-json中配置路径" class="headerlink" title="所有的页面都必须在app.json中配置路径"></a>所有的页面都必须在app.json中配置路径</h3><blockquote><p>我之前新建一个页面然后跳转过去一直报路径错误，去网上查询才知道，每一个页面路径都需要提前配置。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/2cb2cfa23e160b24cec566232710f644.webp?x-image-process=image/format,png" alt="页面路径配置"></p><h3 id="网络请求的最大并发数为5、页面层级最多5层"><a href="#网络请求的最大并发数为5、页面层级最多5层" class="headerlink" title="网络请求的最大并发数为5、页面层级最多5层"></a>网络请求的最大并发数为5、页面层级最多5层</h3><blockquote><p>就是说同时最多5个网络请求，页面的子页面最多4个。我在想要是一个页面是一个视频列表展示怎么办，每一个视频都需要网络请求啊。</p><p>以上就是这次遇到的一些比较变态的问题。</p></blockquote><h3 id="谈谈我的一些代码实现"><a href="#谈谈我的一些代码实现" class="headerlink" title="谈谈我的一些代码实现"></a>谈谈我的一些代码实现</h3><p><strong>配置tabBar(app.json)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&quot;tabBar&quot;: &#123;</span><br><span class="line">  &quot;color&quot;: &quot;#888888&quot;,</span><br><span class="line">  &quot;selectedColor&quot;: &quot;#09BB07&quot;,</span><br><span class="line">  &quot;backgroundColor&quot;: &quot;&quot;,</span><br><span class="line">  &quot;borderStyle&quot;: &quot;white&quot;,</span><br><span class="line">  &quot;list&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;pagePath&quot;: &quot;pages/orderManage/orderManage&quot;,</span><br><span class="line">      &quot;text&quot;: &quot;订单管理&quot;,</span><br><span class="line">      &quot;iconPath&quot;: &quot;pages/images/order.png&quot;,</span><br><span class="line">      &quot;selectedIconPath&quot;: &quot;pages/images/order_r.png&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;pagePath&quot;: &quot;pages/moneyManage/moneyManage&quot;,</span><br><span class="line">      &quot;text&quot;: &quot;财务管理&quot;,</span><br><span class="line">      &quot;iconPath&quot;: &quot;pages/images/money.png&quot;,</span><br><span class="line">      &quot;selectedIconPath&quot;: &quot;pages/images/money_r.png&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;pagePath&quot;: &quot;pages/myself/myself&quot;,</span><br><span class="line">      &quot;text&quot;: &quot;我的商户&quot;,</span><br><span class="line">      &quot;iconPath&quot;: &quot;pages/images/people.png&quot;,</span><br><span class="line">      &quot;selectedIconPath&quot;: &quot;pages/images/people_r.png&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="订单管理页的菜单栏"><a href="#订单管理页的菜单栏" class="headerlink" title="订单管理页的菜单栏"></a>订单管理页的菜单栏</h3><blockquote><p>点击菜单栏切换View简单，直接将将点击的菜单的值赋给View让其偏移对应的百分比就好。</p><p>手势切换：通过触摸的起点与终点计算出滑动方向，然后偏移并且切换菜单栏。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">    catchtouchstart:function(e)&#123;</span><br><span class="line">    var that = this;</span><br><span class="line">    that.setData(&#123;</span><br><span class="line">      startPoint: [e.touches[0].clientX,e.touches[0].clientY]</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  catchtouchend:function(e)&#123;</span><br><span class="line">    var that = this;</span><br><span class="line">    var currentNum = parseInt(this.data.currentNavtab);</span><br><span class="line">    var endPoint = [e.changedTouches[0].clientX,e.changedTouches[0].clientY];</span><br><span class="line">    var startPoint = that.data.startPoint</span><br><span class="line">    if(endPoint[0] &lt;= startPoint[0]) &#123;</span><br><span class="line">      if(Math.abs(endPoint[0] - startPoint[0]) &gt;= Math.abs(endPoint[1] - startPoint[1]) &amp;&amp; currentNum&lt; this.data.navTab.length -1) &#123;</span><br><span class="line">         currentNum=currentNum + 1;  </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">      if(Math.abs(endPoint[0] - startPoint[0]) &gt;= Math.abs(endPoint[1] - startPoint[1]) &amp;&amp; currentNum &gt; 0) &#123;</span><br><span class="line">          currentNum -= 1;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      currentNavtab: currentNum</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">// 点击菜单栏切换View</span><br><span class="line">  switchTab: function(e)&#123;</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      currentNavtab: e.currentTarget.dataset.idx</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><blockquote><p>整个程序还是很简单的，就是初次写还是有些不适应。尤其是把div改为了View，不能使用window对象和document对象，很不适应。再次奉上<a href="https://github.com/GavinCarter1991/wx-onePro">demo</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;最近公司项目改版，趁产品修改与UI出图的间歇用公司商户端UI图撸了一把微信小程序。因为刚刚实习那一会接触过前端开发，所以上手还比较快，当然也遇到了很多的问题，不过好在基本按图完成。趁此总结一下我遇到的问题,奉上一些可行的解决方案，希望可以帮助与我遇</summary>
      
    
    
    
    <category term="微信小程序" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="“微信小程序”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9C%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E2%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>项目总结-位置实时共享</title>
    <link href="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2016/11/17/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93-%E4%BD%8D%E7%BD%AE%E5%AE%9E%E6%97%B6%E5%85%B1%E4%BA%AB/"/>
    <id>https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2016/11/17/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93-%E4%BD%8D%E7%BD%AE%E5%AE%9E%E6%97%B6%E5%85%B1%E4%BA%AB/</id>
    <published>2016-11-16T16:13:34.000Z</published>
    <updated>2025-06-11T03:43:59.137Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>从北京回来到今天已经整整三个月了，三个月没有更新简书了。回来找了一家新的公司上班，正好今天新项目打包测试了，找了点时间来总结一下最近项目中遇到的一些问题与心得。今天主要分享<em>位置实时共享</em>，其实之前也有时间，因为在新的公司很少加班。但是自己太懒了，所以……。</p></blockquote><p><strong>谈谈新公司</strong>  </p><blockquote><p>进入公司才发现公司有个iOS大神和我是一个大学的 还是一个系的 还是同一级的，还有两个Android与我是一个专业的，这个行业真的小啊😄。公司不大，老板是个美籍华人（这应该是我们加班少的原因吧）。     </p></blockquote><p><strong>谈谈项目</strong>    </p><blockquote><p>项目内容保密（签了协议的）……，还是谈技术吧。<br>1&gt;即时通讯：我们用的是环信的，因为这不是主要的功能，使用就直接用的是环信的UI，就是官方demo里面的EaseUI，导入SDK就不用说了，我主要分享一下我们在里面添加的一个新的功能：<em>实时位置共享</em> 我们将这个功能添加在群聊里面的。主要逻辑：是通过环信群聊的透传消息实现的用的是百度地图。</p></blockquote><p><strong>通过百度地图定位 将自己的位置的经纬度放在透传消息的扩展信息中传出去</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 更新发送</span><br><span class="line">- (void)sendCmdMessageWithType:(NSString *)type &#123;</span><br><span class="line">    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</span><br><span class="line">        EMCmdMessageBody *body = [[EMCmdMessageBody alloc] initWithAction:@&quot;shareLocation&quot;];</span><br><span class="line">        _currentUserId = [[NSUserDefaults standardUserDefaults] objectForKey:@&quot;eid&quot;];</span><br><span class="line">        NSDictionary *ext = @&#123;@&quot;latitude&quot;:@(_userStartLocation.location.coordinate.latitude),@&quot;longitude&quot;:@(_userStartLocation.location.coordinate.longitude),@&quot;type&quot;:type,_currentUserId:[[NSUserDefaults standardUserDefaults] objectForKey:@&quot;user_nickname&quot;]&#125;;</span><br><span class="line">        </span><br><span class="line">        EMMessage *message = [[EMMessage alloc] initWithConversationID:self.conversationID</span><br><span class="line">                                                                  from:_currentUserId</span><br><span class="line">                                                                    to:self.conversationID</span><br><span class="line">                                                                  body:body</span><br><span class="line">                                                                   ext:ext];</span><br><span class="line">        message.chatType = EMChatTypeGroupChat;</span><br><span class="line">        [[EMClient sharedClient].chatManager sendMessage:message progress:nil completion:^(EMMessage *message, EMError *error) &#123;</span><br><span class="line">            if (error) &#123;</span><br><span class="line">                [CTHUD showText:@&quot;位置更新失败&quot;];</span><br><span class="line">                // 去请求token</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>然后在解析透彻信息的解析位置信息</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// 收到解析</span><br><span class="line">- (void)didReceiveCmdMessages:(NSArray *)aCmdMessages &#123;</span><br><span class="line">    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</span><br><span class="line">        for (EMMessage *cmdMessage in aCmdMessages) &#123;</span><br><span class="line">            EMCmdMessageBody *body = (EMCmdMessageBody *)cmdMessage.body;</span><br><span class="line">            // 判断是否是位置共享消息</span><br><span class="line">            if ([body.action isEqualToString:@&quot;shareLocation&quot;]) &#123;</span><br><span class="line">                CLLocationCoordinate2D coordinate;</span><br><span class="line">                coordinate.latitude = [[cmdMessage.ext objectForKey:@&quot;latitude&quot;] doubleValue];</span><br><span class="line">                coordinate.longitude = [[cmdMessage.ext objectForKey:@&quot;longitude&quot;] doubleValue];</span><br><span class="line">                NSString *nickName = [cmdMessage.ext objectForKey:cmdMessage.from];</span><br><span class="line">                if ([[cmdMessage.ext objectForKey:@&quot;type&quot;] isEqualToString:@&quot;update&quot;]) &#123;</span><br><span class="line">                    dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                        [self updateOtherAnnotationWithLocation:coordinate UserNickName:nickName];</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;else if ([[cmdMessage.ext objectForKey:@&quot;type&quot;] isEqualToString:@&quot;remove&quot;]) &#123;</span><br><span class="line">                    dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                        [self removeOtherAnnotationWithUserNickName:nickName];</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;else if ([[cmdMessage.ext objectForKey:@&quot;type&quot;] isEqualToString:@&quot;join&quot;]) &#123;</span><br><span class="line">                    dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                        [self addMyAnnotationWithLocation:coordinate UserNickName:nickName];</span><br><span class="line">                        [self sendCmdMessageWithType:@&quot;feedback&quot;];</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;else if ([[cmdMessage.ext objectForKey:@&quot;type&quot;] isEqualToString:@&quot;feedback&quot;]) &#123;</span><br><span class="line">                    dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                        [self addMyAnnotationWithLocation:coordinate UserNickName:nickName];</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>将所有收到的透传消的位置信息标识在地图上</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 添加新的用户标注</span><br><span class="line">- (void)addMyAnnotationWithLocation:(CLLocationCoordinate2D)coordinate UserNickName:(NSString *)nickName&#123;</span><br><span class="line">    BMKPointAnnotation *annotation = [[BMKPointAnnotation alloc]init];</span><br><span class="line">    annotation.coordinate = coordinate;</span><br><span class="line">    annotation.title = nickName;</span><br><span class="line">    [_mapView addAnnotation:annotation];</span><br><span class="line">    [_mapView selectAnnotation:annotation animated:YES];</span><br><span class="line">    [_otherUserAnnotation addObject:annotation];</span><br><span class="line">    [_otherUserNickName addObject:nickName];</span><br><span class="line">    [_mapView showAnnotations:_otherUserAnnotation animated:YES];</span><br><span class="line">    [_mapView setCenterCoordinate:coordinate animated:YES];</span><br><span class="line">    while (!_mapView.zoomOut) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>还需要通过传递者的传递的类型定该位置是新加入用户还是已经存在的用户</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">if ([[cmdMessage.ext objectForKey:@&quot;type&quot;] isEqualToString:@&quot;update&quot;]) &#123;</span><br><span class="line">                    dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                        [self updateOtherAnnotationWithLocation:coordinate UserNickName:nickName];</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;else if ([[cmdMessage.ext objectForKey:@&quot;type&quot;] isEqualToString:@&quot;remove&quot;]) &#123;</span><br><span class="line">                    dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                        [self removeOtherAnnotationWithUserNickName:nickName];</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;else if ([[cmdMessage.ext objectForKey:@&quot;type&quot;] isEqualToString:@&quot;join&quot;]) &#123;</span><br><span class="line">                    dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                        [self addMyAnnotationWithLocation:coordinate UserNickName:nickName];</span><br><span class="line">                        [self sendCmdMessageWithType:@&quot;feedback&quot;];</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;else if ([[cmdMessage.ext objectForKey:@&quot;type&quot;] isEqualToString:@&quot;feedback&quot;]) &#123;</span><br><span class="line">                    dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                        [self addMyAnnotationWithLocation:coordinate UserNickName:nickName];</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure><p><strong>新用户需要添加大头针，已经存在的用户只需要更新位置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 更新用户标注</span><br><span class="line">- (void)updateOtherAnnotationWithLocation:(CLLocationCoordinate2D)coordinate UserNickName:(NSString *)nickName&#123;</span><br><span class="line">    for (BMKPointAnnotation *annotation in _otherUserAnnotation) &#123;</span><br><span class="line">        if ([annotation.title isEqualToString:nickName]) &#123;</span><br><span class="line">            annotation.coordinate = coordinate;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>通过百度地图获得自己移动的距离</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BMKMapPoint point1 = BMKMapPointForCoordinate(CLLocationCoordinate2DMake(_userStartLocation.location.coordinate.latitude,_userStartLocation.location.coordinate.latitude));</span><br><span class="line"></span><br><span class="line">BMKMapPoint point2 = BMKMapPointForCoordinate(CLLocationCoordinate2DMake(userLocation.location.coordinate.latitude,userLocation.location.coordinate.latitude));</span><br><span class="line"></span><br><span class="line"> CLLocationDistance distance = BMKMetersBetweenMapPoints(point1,point2);</span><br><span class="line"> </span><br></pre></td></tr></table></figure><blockquote><p>自己定义一个移动的精度，我们当时定的移动距离大于20米（distance&gt;20）就发送一次位置更新。<br>最后当需要离开位置共享是也需要再发送一次信息，透传解析出，然后移除标识</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 删除用户标注</span><br><span class="line">- (void)removeOtherAnnotationWithUserNickName:(NSString *)nickName&#123;</span><br><span class="line">    for (BMKPointAnnotation *annotation in _otherUserAnnotation) &#123;</span><br><span class="line">        if ([annotation.title isEqualToString:nickName]) &#123;</span><br><span class="line">            [_otherUserAnnotation removeObject:annotation];</span><br><span class="line">            [_otherUserNickName removeObject:nickName];</span><br><span class="line">            [_mapView removeAnnotation:annotation];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结束语</strong></p><blockquote><p>实时共享 其实与群聊差不多，就是我的位置移动距离达到了精度要求，我就发送一次群消息，让每一个参加共享的人都知道，然后在自己的地图上更新一次。以上就是我们的位置实时共享的逻辑与部分代码，欢迎各位的指正，谢谢。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;从北京回来到今天已经整整三个月了，三个月没有更新简书了。回来找了一家新的公司上班，正好今天新项目打包测试了，找了点时间来总结一下最近项目中遇到的一些问题与心得。今天主要分享&lt;em&gt;位置实时共享&lt;/em&gt;，其实之前也有时间，因为在新的公司很少加班。但</summary>
      
    
    
    
    <category term="iOS" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/categories/iOS/"/>
    
    
    <category term="“iOS”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9CiOS%E2%80%9D/"/>
    
    <category term="“百度地图”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9C%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%E2%80%9D/"/>
    
    <category term="“位置实时共享”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9C%E4%BD%8D%E7%BD%AE%E5%AE%9E%E6%97%B6%E5%85%B1%E4%BA%AB%E2%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>iOS-webView上加载HTML视频不显示缩略图</title>
    <link href="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2016/08/08/iOS-webView%E4%B8%8A%E5%8A%A0%E8%BD%BDHTML%E8%A7%86%E9%A2%91%E4%B8%8D%E6%98%BE%E7%A4%BA%E7%BC%A9%E7%95%A5%E5%9B%BE/"/>
    <id>https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2016/08/08/iOS-webView%E4%B8%8A%E5%8A%A0%E8%BD%BDHTML%E8%A7%86%E9%A2%91%E4%B8%8D%E6%98%BE%E7%A4%BA%E7%BC%A9%E7%95%A5%E5%9B%BE/</id>
    <published>2016-08-07T17:06:48.000Z</published>
    <updated>2025-06-11T03:43:59.137Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在项目中遇到了一个比较棘手的问题：在原生的iOS的webView上面加载HTML视频发现没有缩略图，在网上查了资料发现在HTML里面有个poster属性（添加一个图片）可以设置缩略图，但是我们的后台告诉我视频资源本来就是来自网络的，没有缩略图只能自己解决了。于是开始是Google模式。终于功夫不负有心人，在一个<a href="https://www.sitepoint.com/html5-video-fragments-captions-dynamic-thumbnails/">国外的网站</a>上面发现了一个折中的解决办法。</p></blockquote><h3 id="办法"><a href="#办法" class="headerlink" title="办法"></a>办法</h3><blockquote><p>其实结局的办法很简单，但是对我这个不是太懂前端的人来说还是……。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/4207318919c8a9ed74e9a03b62d18e6c.webp?x-image-process=image/format,png" alt="方法2016-08-08 00.29.36.png"></p><blockquote><p>这个方法就是在资源URL的后面（视频格式后面，有的时候视频格式后面还有其他的字符串，我是直接把.mp4后面的直接删除了，但是视频还是可以播放）加上#t&#x3D;xxx,其中的xxx代表的是时间（秒）。大概的思路是这样的：就是在加载视频的时候设置视频的起始时间让视频跳转到你设置的时间上，但是时间一定要足够的小，因为大了前面的视频就看不了了。</p></blockquote><p><strong>这个方法其实还有一个用法：</strong></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/406035d5b21ac7d6e4ba0edbf0414389.webp?x-image-process=image/format,png" alt="用法 2016-08-08 00.50.52.png"></p><blockquote><p>视频会在0：06开始播放直到0：20停止播放。但是这不是自动播放，自动播放需要设置：autoplay&#x3D;”autoplay”。</p></blockquote><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><blockquote><p>NOTE：对于web端我是一个菜鸟，也不知道用这个方法解决这个问题是不是太蠢了，希望谁有其他更好的解决办法可以不吝赐教，谢谢。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;最近在项目中遇到了一个比较棘手的问题：在原生的iOS的webView上面加载HTML视频发现没有缩略图，在网上查了资料发现在HTML里面有个poster属性（添加一个图片）可以设置缩略图，但是我们的后台告诉我视频资源本来就是来自网络的，没有缩略图只</summary>
      
    
    
    
    <category term="iOS" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/categories/iOS/"/>
    
    
    <category term="“iOS”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9CiOS%E2%80%9D/"/>
    
    <category term="“webView”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9CwebView%E2%80%9D/"/>
    
    <category term="“视频不显示缩略图”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9C%E8%A7%86%E9%A2%91%E4%B8%8D%E6%98%BE%E7%A4%BA%E7%BC%A9%E7%95%A5%E5%9B%BE%E2%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>图片上传预览</title>
    <link href="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2016/08/01/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E9%A2%84%E8%A7%88/"/>
    <id>https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2016/08/01/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E9%A2%84%E8%A7%88/</id>
    <published>2016-07-31T17:06:42.000Z</published>
    <updated>2025-06-11T03:43:59.133Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本周帮一哥们写了一个页面遇到了一些问题，特此记录一下。主要遇到的问题是图片上传预览（多个上传控件）、多个颜色选择，遇到了冲突。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/236f8ed15fd552d48cf2c3287edd9c53.webp?x-image-process=image/format,png" alt="来个效果一撇 2016-08-01 00.13.22.png"></p><p><strong>这是代码上传的HTML部分代码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;home11&quot; class=&quot;tab-pane in active lowerContent &quot;&gt;</span><br><span class="line">                  &lt;div class=&quot;tool floatLeft&quot;&gt;</span><br><span class="line">                    &lt;span class=&quot;spanStylef floatLeft&quot;&gt;名称&lt;/span&gt;</span><br><span class="line">                    &lt;input type=&quot;text&quot; name=&quot;appName&quot;&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">                  &lt;div class=&quot;upImage floatLeft&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;tool floatLeft&quot;&gt;</span><br><span class="line">                      &lt;span class=&quot;spanStylef floatLeft&quot;&gt;默认图标&lt;/span&gt;</span><br><span class="line">                      &lt;a href=&quot;javascript:;&quot; class=&quot;file&quot; onchange=&quot;javascript:setImagePreview(2);&quot;&gt;上传图片</span><br><span class="line">                        &lt;input type=&quot;file&quot; name=&quot;imagereview2&quot; class =&quot;inputImages&quot;&gt;</span><br><span class="line">                      &lt;/a&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;div class=&quot;tool floatLeft&quot;&gt;</span><br><span class="line">                      &lt;span class=&quot;spanStylef floatLeft&quot;&gt;&amp;nbsp&lt;/span&gt;</span><br><span class="line">                      &lt;img class=&quot;imagereview2&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">                  &lt;div class=&quot;upImage floatLeft&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;tool floatLeft&quot;&gt;</span><br><span class="line">                      &lt;span class=&quot;spanStylef floatLeft&quot;&gt;触及图标&lt;/span&gt;</span><br><span class="line">                      &lt;a href=&quot;javascript:;&quot; class=&quot;file&quot; onchange=&quot;javascript:setImagePreview(3);&quot;&gt;上传图片</span><br><span class="line">                        &lt;input type=&quot;file&quot; name=&quot;imagereview3&quot; class =&quot;inputImages&quot;&gt;</span><br><span class="line">                      &lt;/a&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;div class=&quot;tool floatLeft&quot;&gt;</span><br><span class="line">                      &lt;span class=&quot;spanStylef floatLeft&quot;&gt;&amp;nbsp&lt;/span&gt;</span><br><span class="line">                      &lt;img class=&quot;imagereview3&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>修改上传按钮的部分css代码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">.file &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    background: #D0EEFF;</span><br><span class="line">    border: 1px solid #99D3F5;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line">    padding: 4px 12px;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    color: #1E88C7;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">    text-indent: 0;</span><br><span class="line">    line-height: 20px;</span><br><span class="line">&#125;</span><br><span class="line">.file input &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    font-size: 100px;</span><br><span class="line">    right: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">    opacity: 0;</span><br><span class="line">&#125;</span><br><span class="line">.file:hover &#123;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>这是JS部分的代码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">function setImagePreview(avalue) &#123;</span><br><span class="line">               //input</span><br><span class="line">               var docObjs = document.getElementsByClassName(&quot;inputImages&quot;);</span><br><span class="line">               var docObj = docObjs[avalue];</span><br><span class="line">               if (docObj.files &amp;&amp; docObj.files[0]) &#123;</span><br><span class="line">                   var imgObjPreviews = document.getElementsByClassName(docObj.name);</span><br><span class="line">                   var imgObjPreview = imgObjPreviews[0];</span><br><span class="line">               if (avalue == 0) &#123;</span><br><span class="line">                   imgObjPreview.style.display = &#x27;block&#x27;;</span><br><span class="line">                   imgObjPreview.style.width = &#x27;200px&#x27;;</span><br><span class="line">                   imgObjPreview.style.height = &#x27;350px&#x27;;</span><br><span class="line">               &#125;else &#123;</span><br><span class="line">                   //火狐下，直接设img属性</span><br><span class="line">                   imgObjPreview.style.display = &#x27;block&#x27;;</span><br><span class="line">                   imgObjPreview.style.width = &#x27;100px&#x27;;</span><br><span class="line">                   imgObjPreview.style.height = &#x27;100px&#x27;;</span><br><span class="line">               &#125;</span><br><span class="line">                  imgObjPreview.src = window.URL.createObjectURL(docObj.files[0]);</span><br><span class="line">               &#125; else &#123;</span><br><span class="line">                   //IE下，使用滤镜</span><br><span class="line">                   // docObj.select();</span><br><span class="line">                   // var imgSrc = document.selection.createRange().text;</span><br><span class="line">                   // var localImagId = document.getElementById(&quot;localImag&quot;);</span><br><span class="line">                   // //必须设置初始大小</span><br><span class="line">                   // localImagId.style.width = &quot;100px&quot;;</span><br><span class="line">                   // localImagId.style.height = &quot;100px&quot;;</span><br><span class="line">                   // //图片异常的捕捉，防止用户修改后缀来伪造图片</span><br><span class="line">                   // try &#123;</span><br><span class="line">                   //     localImagId.style.filter = &quot;progid:DXImageTransform.Microsoft.AlphaImageLoader(sizingMethod=scale)&quot;;</span><br><span class="line">                   //     localImagId.filters.item(&quot;DXImageTransform.Microsoft.AlphaImageLoader&quot;).src = imgSrc;</span><br><span class="line">                   // &#125; catch(e) &#123;</span><br><span class="line">                   //     alert(&quot;您上传的图片格式不正确，请重新选择!&quot;);</span><br><span class="line">                   //     return false;</span><br><span class="line">                   // &#125;</span><br><span class="line">                   // imgObjPreview.style.display = &#x27;none&#x27;;</span><br><span class="line">                   // document.selection.empty();</span><br><span class="line">               &#125;</span><br><span class="line">               return true;</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br></pre></td></tr></table></figure><h2 id="问题与解决："><a href="#问题与解决：" class="headerlink" title="问题与解决："></a>问题与解决：</h2><h3 id="问题一：是上传按钮默认的文件上传是这样的"><a href="#问题一：是上传按钮默认的文件上传是这样的" class="headerlink" title="问题一：是上传按钮默认的文件上传是这样的"></a>问题一：是上传按钮默认的文件上传是这样的</h3><p><img src="https://i-blog.csdnimg.cn/blog_migrate/247191efee00edfe40ac992ff86a4b93.webp?x-image-process=image/format,png" alt="默认 2016-08-01 00.26.51.png"></p><h3 id="但是我需要的是这样的："><a href="#但是我需要的是这样的：" class="headerlink" title="但是我需要的是这样的："></a>但是我需要的是这样的：</h3><p><img src="https://i-blog.csdnimg.cn/blog_migrate/b519bb3cae0f98c75720b46596facebb.webp?x-image-process=image/format,png" alt="目标 2016-08-01 00.28.07.png"></p><blockquote><p>解决方案：就是将fileAPI放在你需要的控件上面，然后将fileAPI设置为透明，然后点击你需要的控件其实就是点击了fileAPI。还有一个方案就是用js:将你的控件的点击事件里面的返回为fileAPI的事件。这样点击你的控件就完成了fileAPI事件了，（我想的，没有去实现喔）</p></blockquote><h3 id="问题二：点击事件冲突"><a href="#问题二：点击事件冲突" class="headerlink" title="问题二：点击事件冲突"></a>问题二：点击事件冲突</h3><blockquote><p>一开始我是通过id选择器来标记image与input的,后来发现多个上传按钮就需要多个js判定，会有很多的重复代码。于是后来我改为了用类选择器但是类名一样无法将image与input对应。于是我将input的name与与image的类名写成一样，通过input的name找到对应的image。</p></blockquote><h5 id="NOTE：我前端开发很久没有弄了，很多忘记了，如有错误。请亲们一定要指出啊！"><a href="#NOTE：我前端开发很久没有弄了，很多忘记了，如有错误。请亲们一定要指出啊！" class="headerlink" title="NOTE：我前端开发很久没有弄了，很多忘记了，如有错误。请亲们一定要指出啊！"></a>NOTE：我前端开发很久没有弄了，很多忘记了，如有错误。请亲们一定要指出啊！</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本周帮一哥们写了一个页面遇到了一些问题，特此记录一下。主要遇到的问题是图片上传预览（多个上传控件）、多个颜色选择，遇到了冲突。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://i-blog.csdnimg.cn/blo</summary>
      
    
    
    
    <category term="web" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/categories/web/"/>
    
    
    <category term="“web”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9Cweb%E2%80%9D/"/>
    
    <category term="“图片上传”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9C%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E2%80%9D/"/>
    
    <category term="“预览”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9C%E9%A2%84%E8%A7%88%E2%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>iOS 下加载本地HTML/js/css/image 等路径问题</title>
    <link href="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2016/07/25/iOS-%E4%B8%8B%E5%8A%A0%E8%BD%BD%E6%9C%AC%E5%9C%B0HTML-js-css-image-%E7%AD%89%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/"/>
    <id>https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2016/07/25/iOS-%E4%B8%8B%E5%8A%A0%E8%BD%BD%E6%9C%AC%E5%9C%B0HTML-js-css-image-%E7%AD%89%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/</id>
    <published>2016-07-25T03:29:55.000Z</published>
    <updated>2025-06-11T03:43:59.138Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天在项目中遇到一个问题：我将H5的文件拖入项目中，在webView上添加H5,运行时发现H5的样式与图片等都没有了。经过多种测试后发现：是路径的问题。</p><p>在ios项目下添加本地HTML&#x2F;js&#x2F;css&#x2F;image  当拖入项目时有两种选择：</p><p>一个是  Create groups for any added folders（创建虚拟结构-包结构）</p><p>一个是 Create folder references for any added folders 创建实体结构）</p></blockquote><blockquote><p>如果选择前者，当APP编译过后引入的文件会被放在同一个文件夹下面会忽略你原本的文件夹。因此在HTML文件中的路径就会出现问题。如果你选择了前者那么HTML文件中引入CSS，js，图片等就不需要添加前缀路径了，直接写文件名就行。</p></blockquote><p><strong>引入文件方式：</strong></p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NSString * htmlPath = [[NSBundle mainBundle] pathForResource:@&quot;index&quot; ofType:@&quot;html&quot;];</span><br><span class="line">NSString * htmlString = [NSString stringWithContentsOfFile:htmlPath encoding:NSUTF8StringEncoding error:nil];</span><br><span class="line"> NSURL *baseURL = [NSURL fileURLWithPath:[[NSBundle mainBundle] resourcePath]];</span><br><span class="line">[self.webView loadHTMLString:htmlString baseURL:baseURL];</span><br></pre></td></tr></table></figure><blockquote><p> 如果选择后者，当APP编译过后引入的文件会按照原本的目录结构存放，这个时候就需要添加相对路径。</p></blockquote><p> <strong>引入文件方式：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[self.webView loadRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:@&quot;huaiha/index.html&quot; </span><br><span class="line"></span><br><span class="line">relativeToURL:[[NSBundle mainBundle] bundleURL]]]];</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;今天在项目中遇到一个问题：我将H5的文件拖入项目中，在webView上添加H5,运行时发现H5的样式与图片等都没有了。经过多种测试后发现：是路径的问题。&lt;/p&gt;
&lt;p&gt;在ios项目下添加本地HTML&amp;#x2F;js&amp;#x2F;css&amp;#x2F;im</summary>
      
    
    
    
    <category term="iOS" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/categories/iOS/"/>
    
    
    <category term="“iOS”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9CiOS%E2%80%9D/"/>
    
    <category term="“本地”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9C%E6%9C%AC%E5%9C%B0%E2%80%9D/"/>
    
    <category term="“路径问题”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9C%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98%E2%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>iOS-widget-Today 扩展</title>
    <link href="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2016/07/25/iOS-widget-Today-%E6%89%A9%E5%B1%95/"/>
    <id>https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2016/07/25/iOS-widget-Today-%E6%89%A9%E5%B1%95/</id>
    <published>2016-07-25T03:23:58.000Z</published>
    <updated>2025-06-11T03:43:59.136Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天要分享的是通知中心扩展中的-<a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/ExtensibilityPG/">Today</a>扩展（ios8推出），ios目前可以使用的扩展有：today扩展（widget-即通知栏的今天一栏）、键盘自定义、文件管理、照片编辑扩展、通知扩展（推送）、分享扩展等。扩展与拥有这个扩展主应用的生命周期是独立的。他们是两个独立的进程。</p></blockquote><h3 id="一、目标："><a href="#一、目标：" class="headerlink" title="一、目标："></a>一、目标：</h3><blockquote><p>我项目是希望在widget中添加一个H5的页面方便以后的自定义。点击对应按钮去到相应界面，我也不知道这样算不算滥用widget，因为之前看见过有人的应用被苹果拒绝就是因为滥用widget导致的。</p></blockquote><h3 id="二、实现："><a href="#二、实现：" class="headerlink" title="二、实现："></a>二、实现：</h3><blockquote><p>1.因为widget是一个单独的进程所以需要创建一个target：</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/0b583421a35083363bf56d91148192dd.webp?x-image-process=image/format,png" alt="首先 2016-07-24 23.01.34.png"></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/217a9594befa8d064b3f479abf1d92db.webp?x-image-process=image/format,png" alt="然后 2016-07-24 23.01.13.png"></p><blockquote><p>2.代码</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    // 调整Widget的高度</span><br><span class="line">    self.preferredContentSize = CGSizeMake(0, 200);</span><br><span class="line">    </span><br><span class="line">    // 1、创建UIWebView：</span><br><span class="line">    UIWebView *mWebView = [[UIWebView alloc]initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, 200)];</span><br><span class="line">    </span><br><span class="line">    // 2、设置属性：</span><br><span class="line">    mWebView.scalesPageToFit = YES;// 自动对页面进行缩放以适应屏幕</span><br><span class="line">    // 检测所有数据类型  设定电话号码、网址、电子邮件和日期等文字变为链接文字</span><br><span class="line">    </span><br><span class="line">    [mWebView setDataDetectorTypes:UIDataDetectorTypeAll];</span><br><span class="line">    mWebView.delegate = self;</span><br><span class="line">    </span><br><span class="line">    // 打开URL</span><br><span class="line">    NSURLRequest *request =[NSURLRequest requestWithURL:[NSURL URLWithString:@&quot;http://www.baidu.com&quot;]];</span><br><span class="line">    [mWebView loadRequest:request];</span><br><span class="line">    [self.view addSubview:mWebView];</span><br><span class="line">    </span><br><span class="line">    [self makeButtonWithTitle:@&quot;返回&quot; frame:CGRectMake(0, 0, 80, 64) button:_backBtn];</span><br><span class="line">    [self makeButtonWithTitle:@&quot;前进&quot; frame:CGRectMake(self.view.frame.size.width - 80, 0, 80, 64) button:_forWardBtn];</span><br><span class="line">    [self makeButtonWithTitle:@&quot;刷新&quot; frame:CGRectMake(100, 0, 80, 64) button:_refreshBtn];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 取消widget默认的inset，让应用靠左</span><br><span class="line">- (UIEdgeInsets)widgetMarginInsetsForProposedMarginInsets:(UIEdgeInsets)defaultMarginInsets &#123;</span><br><span class="line">    return UIEdgeInsetsZero;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)makeButtonWithTitle:(NSString *)title frame:(CGRect)frame button:(UIButton *)btn &#123;</span><br><span class="line">    btn = [UIButton buttonWithType:UIButtonTypeCustom];</span><br><span class="line">    [btn setTitle:title forState:UIControlStateNormal];</span><br><span class="line">    [btn setTitleColor:[UIColor redColor] forState:UIControlStateNormal];</span><br><span class="line">    [btn addTarget:self action:@selector(skip:) forControlEvents:UIControlEventTouchUpInside];</span><br><span class="line">    [btn setFrame:frame];</span><br><span class="line">    </span><br><span class="line">    if ([title isEqualToString:@&quot;返回&quot;]) &#123;</span><br><span class="line">        btn.tag = 101;</span><br><span class="line">    &#125; else if([title isEqualToString:@&quot;前进&quot;]) &#123;</span><br><span class="line">        btn.tag = 102;</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        btn.tag = 103;</span><br><span class="line">    &#125;</span><br><span class="line">    [self.view addSubview:btn];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)skip:(UIButton *)button</span><br><span class="line">&#123;</span><br><span class="line">    if (button.tag == 101) &#123;</span><br><span class="line">        [self.extensionContext openURL:[NSURL URLWithString:@&quot;iOSWidgetApp://action=GotoHomePage&quot;] completionHandler:^(BOOL success) &#123;</span><br><span class="line">            NSLog(@&quot;101   open url result:%d&quot;,success);</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">    else if(button.tag == 102) &#123;</span><br><span class="line">        [self.extensionContext openURL:[NSURL URLWithString:@&quot;iOSWidgetApp://action=GotoOtherPage&quot;] completionHandler:^(BOOL success) &#123;</span><br><span class="line">            NSLog(@&quot;102    open url result:%d&quot;,success);</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        [self.extensionContext openURL:[NSURL URLWithString:@&quot;iOSWidgetApp://action=GotoOtherPages&quot;] completionHandler:^(BOOL success) &#123;</span><br><span class="line">            NSLog(@&quot;102    open url result:%d&quot;,success);</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>运行与结果展示：</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/d2078c3e20a8126af877649cb755bce1.webp?x-image-process=image/format,png" alt="运行 2016-07-24 23.02.28.png"></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/d8e9254bab90d77597bda99215fded4b.webp?x-image-process=image/format,png" alt="效果图 2016-07-25 09.55.44.png"></p><h3 id="扩展与主程序的交互-数据共享"><a href="#扩展与主程序的交互-数据共享" class="headerlink" title="扩展与主程序的交互-数据共享"></a>扩展与主程序的交互-数据共享</h3><p><strong>这就要涉及扩展与应用之间的数据共享了-App Groups.</strong></p><blockquote><p>首先在主应用的target &gt; Capabilities下 打开App Groups 点击+ 在group.后面输入标识符，</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/62f1aa6e7f4adbc919d563ca0a21bda6.webp?x-image-process=image/format,png" alt="Snip20160725_1.png"></p><p><strong>再去扩展的target下进行相同的操作，记得group.后的标识符要一致。</strong></p><p>#####代码：</p><blockquote><p>在上面的扩展代码里面已经定义了点击事件，这里主要是主应用接收到信息后进行判断和处理。</p><p>在这之前还需要先配置URL schems,在主程序的plist里面：</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/b36fb85f5f7ece4451b9e5c8b160d604.webp?x-image-process=image/format,png" alt="plist 2016-07-25 10.40.15.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation &#123;</span><br><span class="line">    </span><br><span class="line">    NSString* prefix = @&quot;iOSWidgetApp://action=&quot;;</span><br><span class="line">    </span><br><span class="line">    UIWebView *webView = [[UIWebView alloc]initWithFrame:[UIScreen mainScreen].bounds];</span><br><span class="line">    webView.backgroundColor = [UIColor clearColor];</span><br><span class="line">    webView.delegate = self;</span><br><span class="line">    [webView setUserInteractionEnabled:YES];//是否支持交互</span><br><span class="line">    [webView setOpaque:NO];//opaque是不透明的意思</span><br><span class="line">    [webView setScalesPageToFit:YES];//自动缩放以适应屏幕</span><br><span class="line">    webView .scrollView.bounces = NO;// 禁止UIWebView下拉拖动效果</span><br><span class="line">    NSString *path;</span><br><span class="line">    if ([[url absoluteString] rangeOfString:prefix].location != NSNotFound) &#123;</span><br><span class="line">        NSString* action = [[url absoluteString] substringFromIndex:prefix.length];</span><br><span class="line">        if ([action isEqualToString:@&quot;GotoHomePage&quot;]) &#123;</span><br><span class="line">            path = [[NSBundle mainBundle] pathForResource:@&quot;help&quot; ofType:@&quot;html&quot;];</span><br><span class="line">        &#125;</span><br><span class="line">        else if([action isEqualToString:@&quot;GotoOtherPage&quot;]) &#123;</span><br><span class="line">            path = [[NSBundle mainBundle] pathForResource:@&quot;setting&quot; ofType:@&quot;html&quot;];</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            path = [[NSBundle mainBundle] pathForResource:@&quot;healthyArticle&quot; ofType:@&quot;html&quot;];</span><br><span class="line">        &#125;</span><br><span class="line">        NSURL *urll = [NSURL fileURLWithPath:path];</span><br><span class="line">        NSURLRequest* request = [NSURLRequest requestWithURL:urll] ;</span><br><span class="line">        [webView loadRequest:request];</span><br><span class="line">        [self.rootView.view addSubview:webView];</span><br><span class="line">        self.rootView.view.backgroundColor = [UIColor whiteColor];</span><br><span class="line">    &#125;</span><br><span class="line">    return  YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>因为我是需要到对应的H5页面所以是添加的H5页面。</strong></p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><blockquote><p>1.当程序内存不足时，苹果优先会杀死扩展，因此需要注意内存的管理。</p><p>2.在配置team是账号需要一致（我测试的时候免费账号好像还不行，需要付费的账号）</p><p>3.在iOS10上面还可以从左滑主页面和锁屏进入widget。</p><p>4.today只有在下拉的时候才会更新，通知栏两边的更新机制是不一样的。</p><p>5.一般更新路径：viewDidLoad-&gt;viewWillAppear，但是如果你下拉过于频繁就只会执行viewWillAppear里面的，因此更新代码最好放在viewWillAppear里面。</p></blockquote><h6 id="如有错误地方，万望指出，谢谢！"><a href="#如有错误地方，万望指出，谢谢！" class="headerlink" title="如有错误地方，万望指出，谢谢！"></a>如有错误地方，万望指出，谢谢！</h6>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;今天要分享的是通知中心扩展中的-&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/General/Conceptual/ExtensibilityPG/&quot;&gt;Today&lt;/a</summary>
      
    
    
    
    <category term="iOS" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/categories/iOS/"/>
    
    
    <category term="“iOS”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9CiOS%E2%80%9D/"/>
    
    <category term="“widget”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9Cwidget%E2%80%9D/"/>
    
    <category term="“扩展”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9C%E6%89%A9%E5%B1%95%E2%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>gitHub hexo 个人博客</title>
    <link href="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2016/07/16/gitHub-hexo-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2016/07/16/gitHub-hexo-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2016-07-15T20:11:37.000Z</published>
    <updated>2025-06-11T03:43:59.134Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一直以来就想搭建一个自己的博客，不想其它网站那么杂乱，需要一个纯粹的记录成长之路的地方。查了很多资料，最后决定用hexo 搭建一个静态网页，托管在gitHub上。下面我就介绍一下我的搭建之路，<a href="https://gavincarter1991.github.io/">我的搭建网页</a>。</p></blockquote><h3 id="1-gitHub"><a href="#1-gitHub" class="headerlink" title="1. gitHub"></a>1. gitHub</h3><p>gitHub 的注册及配置我就不介绍了，这个哪里都可以查到，我介绍一下注册过后远程仓库的创建。<br>首先创建远程仓库：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/ea1e5de3d83fcb9ca8c0eb0e11086ab3.webp?x-image-process=image/format,png" alt="屏幕快照 2016-07-16 02.49.16.png"><br>在后面的Respository name 里面输入：gavincarter1991.github.io 这个格式是定的（gavincarter1991 需要填写你的用户名）我没有测试过如果不填写自己用户名的后果，不过查了很多资料都推荐这样填写，有的还是不以这样的方式会报错，没有实践，我没有发言权。<br><img src="https://i-blog.csdnimg.cn/blog_migrate/c44f6c8a7f4544c550f966f205dd7848.webp?x-image-process=image/format,png" alt="屏幕快照 2016-07-16 02.49.37.png"></p><h3 id="2-homebrew安装"><a href="#2-homebrew安装" class="headerlink" title="2. homebrew安装"></a>2. homebrew安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><p>查看安装是否成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>安装成功会显示版本号：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/257560df666479d7a2171dd37c11a68b.webp?x-image-process=image/format,png" alt="屏幕快照 2016-07-16 03.09.16.png"></p><h3 id="3-开始安装hexo"><a href="#3-开始安装hexo" class="headerlink" title="3. 开始安装hexo"></a>3. 开始安装hexo</h3><p>首先进入你需要存放博客的文件夹，然后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g</span><br></pre></td></tr></table></figure><p>查看版本号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure><p>初始化项目：(类似于git)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><h3 id="4-开始使用"><a href="#4-开始使用" class="headerlink" title="4. 开始使用"></a>4. 开始使用</h3><p>创建页面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post &quot;My First Blog&quot;</span><br></pre></td></tr></table></figure><p>生成静态文件(会在当前目录下生成一个新的叫做public的文件夹)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g # 或者hexo generate</span><br></pre></td></tr></table></figure><p>开启本地服务 用于在本地浏览 Ctrl+C退出查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s # 或者hexo server，可以在输入http://localhost:4000/ 查看 或者 按住Command 双击命令行下的网址（http://localhost:4000/）</span><br></pre></td></tr></table></figure><p>这时网页已经成型了。</p><p>接下来就是要部署到gitHub上 只需要在配置文件_config.xml中作如下修改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:gavincarter1991/gavincarter1991.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>当然gavincarter1991位置还是填你的信息</p><p>然后安装一个自动工具，方便以后页面的部署：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>部署去gitHub：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>以后每一次部署的一般步骤：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h3 id="5-写文章"><a href="#5-写文章" class="headerlink" title="5.写文章"></a>5.写文章</h3><p>首先；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post &quot;My First Blog&quot;</span><br></pre></td></tr></table></figure><p>然后去目录：source_posts下找到My First Blog.md（markdown文件）开始编辑文章了。我Mac用的是Mou编辑器，你可以自由选择适合自己的markdown编辑器。<a href="https://wizardforcel.gitbooks.io/markdown-simple-world/content/0.html">这里有markdown使用技巧</a><br>写好以后就可以按照前面的部署常用步骤进行部署了。</p><h3 id="6-其他"><a href="#6-其他" class="headerlink" title="6. 其他"></a>6. 其他</h3><p>1.主题：hexo有很多<a href="https://github.com/hexojs/hexo/wiki/Themes">第三方主题</a>可以选择，通过git clone<br>2.配置修改参数<a href="http://div.io/topic/1691">详见</a> 我写几个常用的：<br>头像：把图片放在主题内 source&#x2F;images&#x2F;，图片链接地址可以填 &#x2F;images&#x2F;avatar.png  然后在当前主题的_config.yml 不是根目录的_config.yml（如果你换了主题，需要根据自己选择的主题进入里面去设置）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line"># in theme directory(source/images): /images/avatar.jpg</span><br><span class="line"># in site  directory(source/uploads): /uploads/avatar.jpg</span><br><span class="line">avatar: /images/avatar.jpg</span><br></pre></td></tr></table></figure><p>个人中心配置：（根目录的_config.yml）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Gavin</span><br><span class="line">subtitle: 记录成长过程中的点点滴滴</span><br><span class="line">description: 我爱敏敏</span><br><span class="line">author: kindyourself@163.com</span><br><span class="line">language: zh-Hans</span><br><span class="line">timezone:</span><br></pre></td></tr></table></figure><p>显示标签与分类：取消对应注释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash (/archives -&gt; archives)</span><br><span class="line">menu:</span><br><span class="line">  home: /</span><br><span class="line">  categories: /categories</span><br><span class="line">  #about: /about</span><br><span class="line">  archives: /archives</span><br><span class="line">  tags: /tags</span><br><span class="line">  #commonweal: /404.html</span><br></pre></td></tr></table></figure><p>然后创建分类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;categories&quot;</span><br></pre></td></tr></table></figure><p>在&#x2F;source&#x2F;categories下有个index.md 按照如下填写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2016-07-16 02:21:37</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>以后在写文章的时候加上分类就会自动创建分类了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">layout: &#x27;[layout]&#x27;</span><br><span class="line">title: iOS-自定义带抽屉效果的tabBar</span><br><span class="line">date: 2016-07-12 23:19:35</span><br><span class="line">tags: [自定义，抽屉，tabBar]</span><br><span class="line">categories: &quot;iOS&quot; // 分类</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>创建标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;tags&quot;</span><br></pre></td></tr></table></figure><p>在&#x2F;source&#x2F;tags下有个index.md 按照如下填写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: All tags</span><br><span class="line">date: 2016-07-16 02:11:12</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>以后在写文章的时候加上标签就会自动计入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">layout: &#x27;[layout]&#x27;</span><br><span class="line">title: iOS-自定义带抽屉效果的tabBar</span><br><span class="line">date: 2016-07-12 23:19:35</span><br><span class="line">tags: [自定义，抽屉，tabBar] // 标签</span><br><span class="line">categories: &quot;iOS&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>下载主题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><h3 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h3><blockquote><p>这个在网上还有很多很详细的教程，这是我的大致操作流程。感觉这个可以很简单，就是少去动原生的。如果你想要去捣鼓会发现还是有很多可以捣鼓的，因为他有很多的参数可以配置。我只是配置了一下我觉得在我看来重要的。有兴趣的朋友可以去捣鼓捣鼓。-太晚了，都4点了，睡觉去</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;一直以来就想搭建一个自己的博客，不想其它网站那么杂乱，需要一个纯粹的记录成长之路的地方。查了很多资料，最后决定用hexo 搭建一个静态网页，托管在gitHub上。下面我就介绍一下我的搭建之路，&lt;a href=&quot;https://gavincarter</summary>
      
    
    
    
    <category term="其他" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="“hexo”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9Chexo%E2%80%9D/"/>
    
    <category term="“个人博客”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9C%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E2%80%9D/"/>
    
    <category term="“gitHub”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9CgitHub%E2%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>与web前端朋友闲聊的发现-代码相通性</title>
    <link href="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2016/07/15/%E4%B8%8Eweb%E5%89%8D%E7%AB%AF%E6%9C%8B%E5%8F%8B%E9%97%B2%E8%81%8A%E7%9A%84%E5%8F%91%E7%8E%B0-%E4%BB%A3%E7%A0%81%E7%9B%B8%E9%80%9A%E6%80%A7/"/>
    <id>https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2016/07/15/%E4%B8%8Eweb%E5%89%8D%E7%AB%AF%E6%9C%8B%E5%8F%8B%E9%97%B2%E8%81%8A%E7%9A%84%E5%8F%91%E7%8E%B0-%E4%BB%A3%E7%A0%81%E7%9B%B8%E9%80%9A%E6%80%A7/</id>
    <published>2016-07-15T15:50:50.000Z</published>
    <updated>2025-06-11T03:43:59.134Z</updated>
    
    <content type="html"><![CDATA[<h3 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h3><blockquote><p>  今天与一个做web前端的哥们闲聊了一会，他今天遇到了一个问题：就是在做一个混合开发的APP时候，他们H5端有一个页面需要做搜索，就是在搜索框内输入能够实时的展示搜索结果。</p></blockquote><h3 id="想法与问题"><a href="#想法与问题" class="headerlink" title="想法与问题"></a>想法与问题</h3><blockquote><p>他想监听了搜索框并且实时的进行数据的请求。后来发现输入的过程一直在进行远程数据的请求，他觉得这样消耗太大了。于是想做一个延时的操作，就是等用户稍微停止输入的时候才去远程请求数据。可是没有理清这个逻辑，于是他的方法相当的复杂，好像是要将每一实时输入的数据存入数组，然后进行对比，当延时完成进行对比决定请求的数据。</p></blockquote><h3 id="插曲"><a href="#插曲" class="headerlink" title="插曲"></a>插曲</h3><blockquote><p>但是他在这个过程中发现了一个问题，就是延时操作并没有减少网络请求的次数。这个问题在前段时间的项目中我也遇到了，就是延时操作并不是重复了，就不执行了，延时操作只是延缓操作时间，每一次的延时都会被执行。所以想要减少执行次就必须在延时操作未执行 前取消延时操作。取消的延时操作如果还没有执行，就不会执行了而不是取消后就立即执行。</p></blockquote><h3 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h3><blockquote><p>这时候我想起几天前在简书上看见一个哥们写了一篇<a href="http://www.jianshu.com/p/7bca987976bd">关于如何防止button被重复点击</a>的文章，他一共介绍了三种方法，他的第二种方法：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[button addTarget:self action:@selector(click:) forControlEvents:UIControlEventTouchUpInside]</span><br><span class="line">- (void)click:(UIButton *)sender</span><br><span class="line"> &#123; </span><br><span class="line">      [NSObject cancelPreviousPerformRequestsWithTarget:self selector:@selector(btnClicke) object:nil]; </span><br><span class="line">      [self performSelector:@selector(btnClicke) withObject:nil afterDelay:1];</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><blockquote><p>就是用的延时操作他的是在button的方法里面先取消延时方法，再添加延时方法，这个对于防止button重复点击来说并不是好的方法，因为这样会影响用户的体验，每次点击button不能及时的进行响应。但是对于我朋友的这个问题却是一个很好的选择。他原本就想减缓请求次数。</p></blockquote><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><blockquote><p>我发现编程语言是相通的，虽然各有各的语法，但是实现思路是一样的，特此记录。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;  今天与一个做web前端的哥们闲聊了一会，他今天遇到了一个问题：就是在做一个混合开发的APP时候，他们H5端有一</summary>
      
    
    
    
    <category term="其他" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="“iOS”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9CiOS%E2%80%9D/"/>
    
    <category term="“web”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9Cweb%E2%80%9D/"/>
    
    <category term="“代码相通性”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9C%E4%BB%A3%E7%A0%81%E7%9B%B8%E9%80%9A%E6%80%A7%E2%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>iOS-自定义带抽屉效果的tabBar</title>
    <link href="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2016/07/15/iOS-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B8%A6%E6%8A%BD%E5%B1%89%E6%95%88%E6%9E%9C%E7%9A%84tabBar/"/>
    <id>https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2016/07/15/iOS-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B8%A6%E6%8A%BD%E5%B1%89%E6%95%88%E6%9E%9C%E7%9A%84tabBar/</id>
    <published>2016-07-15T15:50:50.000Z</published>
    <updated>2025-06-11T03:43:59.138Z</updated>
    
    <content type="html"><![CDATA[<p>demo地址：<a href="https://github.com/GavinCarter1991/-tarBar">gitHub</a></p><h3 id="一、先来个效果"><a href="#一、先来个效果" class="headerlink" title="一、先来个效果"></a>一、先来个效果</h3><p><img src="https://i-blog.csdnimg.cn/blog_migrate/05244727e176525fc66016280b6309d6.webp?x-image-process=image/format,png" alt="tabBar.gif"></p><h3 id="二、代码示例"><a href="#二、代码示例" class="headerlink" title="二、代码示例"></a>二、代码示例</h3><p><strong>1.抽屉页作为根视图：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line">@interface DrawerViewController ()</span><br><span class="line">&#123;</span><br><span class="line">    UITapGestureRecognizer *tapGesture;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建左边的抽屉</span><br><span class="line">@property (nonatomic, strong) LeftViewController *leftViewController;</span><br><span class="line"></span><br><span class="line">//创建右边的标签控制器</span><br><span class="line">@property (nonatomic, strong) MTabBarViewController *mainViewController;</span><br><span class="line">//抽屉是否显示的标示</span><br><span class="line"></span><br><span class="line">@property (nonatomic, assign) BOOL isOpen;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation DrawerViewController</span><br><span class="line"></span><br><span class="line">- (void)dealloc</span><br><span class="line">&#123;</span><br><span class="line">    //移除通知</span><br><span class="line">    [[NSNotificationCenter defaultCenter]removeObserver:self name:@&quot;buttonTap&quot; object:nil];</span><br><span class="line">&#125;</span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    [self createTabBarController];</span><br><span class="line">    [self createLeftVc];</span><br><span class="line">    </span><br><span class="line">    self.view.backgroundColor = [UIColor grayColor];</span><br><span class="line">    </span><br><span class="line">    //添加通知，监听TabBar的点击事件 隐藏左边抽屉</span><br><span class="line">    [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(buttonTap) name:@&quot;buttonTap&quot; object:nil];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">- (void)buttonTap</span><br><span class="line">&#123;</span><br><span class="line">    //抽屉展开时则隐藏</span><br><span class="line">    if (self.isOpen == YES) &#123;</span><br><span class="line">        [self openOrHidden];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建左边抽屉</span><br><span class="line">- (void)createLeftVc</span><br><span class="line">&#123;</span><br><span class="line">    self.leftViewController = [[LeftViewController alloc]init];</span><br><span class="line">    </span><br><span class="line">    //抽屉控制器添加到父控制器中</span><br><span class="line">    [self addChildViewController:self.leftViewController];</span><br><span class="line">    self.leftViewController.view.frame = LeftViewStartFrame();</span><br><span class="line">    [self.view addSubview:self.leftViewController.view];</span><br><span class="line">    [self.leftViewController didMoveToParentViewController:self];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建右边的标签控制器</span><br><span class="line">- (void)createTabBarController&#123;</span><br><span class="line">    //</span><br><span class="line">    NSArray *classNames = @[@&quot;ProductViewController&quot;,@&quot;MessageViewController&quot;,@&quot;OrderViewController&quot;];</span><br><span class="line">    </span><br><span class="line">    //保存viewControllers</span><br><span class="line">    NSMutableArray *viewControllers = [NSMutableArray array];</span><br><span class="line">    [classNames enumerateObjectsUsingBlock:^(NSString *  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) &#123;</span><br><span class="line">        //先把字符串转化为类名</span><br><span class="line">        Class class = NSClassFromString(obj);</span><br><span class="line">        </span><br><span class="line">        //创建ViewController</span><br><span class="line">        UIViewController *vc = [[class alloc]init];</span><br><span class="line">        UINavigationController *aNav = [[UINavigationController alloc]initWithRootViewController:vc];</span><br><span class="line">        </span><br><span class="line">        [viewControllers addObject:aNav];</span><br><span class="line">        </span><br><span class="line">    &#125;];</span><br><span class="line">    //TabBarController 创建</span><br><span class="line">    _mainViewController = [[MTabBarViewController alloc]initWithViewControllers:viewControllers];</span><br><span class="line">    _mainViewController.view.backgroundColor = [UIColor brownColor];</span><br><span class="line">    </span><br><span class="line">    //添加标签控制器到父控制器</span><br><span class="line">    [self addChildViewController:self.mainViewController];</span><br><span class="line">    self.mainViewController.view.frame = BOUNDS;</span><br><span class="line">    [self.view addSubview:self.mainViewController.view];</span><br><span class="line">    [self.mainViewController didMoveToParentViewController:self];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//标签控制器显示的vc的根控制器的view往右边移动</span><br><span class="line">//tabBar -&gt; Nav (ViewControllers[selectedIndex]) -&gt; Nav.rootViewController.view</span><br><span class="line">- (void)tabBar_Nav_RootViewController_viewMoveRight</span><br><span class="line">&#123;</span><br><span class="line">    //标签控制器当中 当前显示的控制器</span><br><span class="line">    UINavigationController *nav = self.mainViewController.viewControllers[self.mainViewController.selectedIndex];</span><br><span class="line">    //取出导航控制器的根控制器</span><br><span class="line">    UIViewController *rootVc = nav.childViewControllers[0];</span><br><span class="line">    rootVc.view.frame = RightContentEndFrame();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)tabBar_Nav_RootViewController_viewMoveLeft</span><br><span class="line">&#123;</span><br><span class="line">    //标签控制器当中 当前显示的控制器</span><br><span class="line">    UINavigationController *nav = self.mainViewController.viewControllers[self.mainViewController.selectedIndex];</span><br><span class="line">    //取出导航控制器的根控制器</span><br><span class="line">    UIViewController *rootVc = nav.childViewControllers[0];</span><br><span class="line">    rootVc.view.frame = RigntContentStartFrame();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//显示左边抽屉</span><br><span class="line">- (void)open</span><br><span class="line">&#123;</span><br><span class="line">    [UIView animateWithDuration:0.48 animations:^&#123;</span><br><span class="line">        self.leftViewController.view.frame = LeftViewEndFrame();</span><br><span class="line">        [self tabBar_Nav_RootViewController_viewMoveRight];</span><br><span class="line">    &#125; completion:nil];</span><br><span class="line">    </span><br><span class="line">    //添加点击手势，点击某些区域的隐藏抽屉</span><br><span class="line">    tapGesture = [[UITapGestureRecognizer alloc]initWithTarget:self action:@selector(tap:)];</span><br><span class="line">    tapGesture.numberOfTapsRequired = 1;</span><br><span class="line">    tapGesture.numberOfTouchesRequired = 1;</span><br><span class="line">    [self.view addGestureRecognizer:tapGesture];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)tap:(UITapGestureRecognizer *)gesturer</span><br><span class="line">&#123;</span><br><span class="line">    //获取点击的位置</span><br><span class="line">    CGPoint point = [gesturer locationInView:self.view];</span><br><span class="line">    if (CGRectContainsPoint(self.leftViewController.view.frame, point) == YES) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [self hidden];</span><br><span class="line">    self.isOpen = NO;</span><br><span class="line">    //移除手势</span><br><span class="line">    [self.view removeGestureRecognizer:tapGesture];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//隐藏左边抽屉</span><br><span class="line">- (void)hidden</span><br><span class="line">&#123;</span><br><span class="line">    [UIView animateWithDuration:0.48 animations:^&#123;</span><br><span class="line">        self.leftViewController.view.frame = LeftViewStartFrame();</span><br><span class="line">        [self tabBar_Nav_RootViewController_viewMoveLeft];</span><br><span class="line">    &#125; completion:nil];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)openOrHidden</span><br><span class="line">&#123;</span><br><span class="line">    //当前如果是隐藏，则显示</span><br><span class="line">    if (self.isOpen == NO) &#123;</span><br><span class="line">        [self open];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //当前如果是显示的，则隐藏</span><br><span class="line">    if (self.isOpen == YES) &#123;</span><br><span class="line">        [self hidden];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //改变隐藏标记</span><br><span class="line">    self.isOpen = !self.isOpen;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2.标签视图 修改方法 <code>- (void)selectBtn:(UIButton *)sender</code>中的切换效果可以实现不同的切换动画与效果。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">@implementation MTabBar</span><br><span class="line">- (instancetype)initWithTitles:(NSArray *)titles imageNames:(NSArray *)imageNames</span><br><span class="line">&#123;</span><br><span class="line">    self = [super initWithFrame:TabBarFrame()];</span><br><span class="line">    if (self) &#123;</span><br><span class="line">        </span><br><span class="line">        //标题数组不为空，图片名字个数 ＝ 标题个数</span><br><span class="line">        self.buttonBack = [[UIView alloc]initWithFrame:CGRM(0, 0, BUTTON_W, 64)];</span><br><span class="line">        self.buttonBack.backgroundColor = BUTTON_BACK_COLOR;</span><br><span class="line">        [self addSubview:self.buttonBack];</span><br><span class="line">        </span><br><span class="line">        self.backgroundColor = TABBAR_BACK_COLOR;</span><br><span class="line">        </span><br><span class="line">        if ([titles count] &amp;&amp; [titles count] == [imageNames count]) &#123;</span><br><span class="line">            [titles enumerateObjectsUsingBlock:^(NSString *  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) &#123;</span><br><span class="line">                UIButton *button = [[UIButton alloc]initWithFrame:CGRM(BUTTON_W*idx, 0, BUTTON_W, 64)];</span><br><span class="line">                button.tag = 1000 + idx;</span><br><span class="line">                [self addSubview:button];</span><br><span class="line">                //默认选中第一个</span><br><span class="line">                if (idx == 0) &#123;</span><br><span class="line">                    button.selected = YES;</span><br><span class="line">                    self.selectedButton = button;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                [button addSubview:MakeLabel(CGRM(0, 30, BUTTON_W, 34), obj)];</span><br><span class="line">//                // 图片宽 高分别为 44 24</span><br><span class="line">                CGFloat x = (BUTTON_W - 44)/2;</span><br><span class="line">                [button addSubview:MakeImageView(CGRM(x, 5, 44, 24),[imageNames objectAtIndex:idx])];</span><br><span class="line">                //添加点击方法</span><br><span class="line">                [button addTarget:self action:@selector(selectBtn:) forControlEvents:UIControlEventTouchUpInside];</span><br><span class="line">            &#125;];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//button 点击方法</span><br><span class="line">- (void)selectBtn:(UIButton *)sender</span><br><span class="line">&#123;</span><br><span class="line">    //让抽屉隐藏，发出通知</span><br><span class="line">    [[NSNotificationCenter defaultCenter]postNotificationName:@&quot;buttonTap&quot; object:nil];</span><br><span class="line">    </span><br><span class="line">    //选中的button 已经是选中状态 不用处理</span><br><span class="line">    if (self.selectedButton == sender) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //改变之前选中button的状态  为非选中状态</span><br><span class="line">    self.selectedButton.selected = NO;</span><br><span class="line">    </span><br><span class="line">    //改变当前选中button的状态</span><br><span class="line">    sender.selected = YES;</span><br><span class="line">    self.selectedButton = sender;</span><br><span class="line">    //通知标签控制器显示当前button对应的viewController</span><br><span class="line">    if (self.callBack) &#123;</span><br><span class="line">        self.callBack(sender.tag - 1000);</span><br><span class="line">    &#125;</span><br><span class="line">    [UIView animateWithDuration:0.5 animations:^&#123;</span><br><span class="line">        self.buttonBack.center = CGPointMake(BUTTON_W/2+(sender.tag - 1000) * BUTTON_W, 32);</span><br><span class="line">    &#125; completion:nil];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">UILabel *MakeLabel(CGRect frame, NSString *title)</span><br><span class="line">&#123;</span><br><span class="line">    UILabel *label = [[UILabel alloc]initWithFrame:frame];</span><br><span class="line">//    label.userInteractionEnabled = YES;</span><br><span class="line">    label.backgroundColor = [UIColor clearColor];</span><br><span class="line">    label.textColor = [UIColor whiteColor];</span><br><span class="line">    label.textAlignment = NSTextAlignmentCenter;</span><br><span class="line">    label.text = title;</span><br><span class="line">    return label;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//根据 frame和 imageName 创建UIImageView</span><br><span class="line">UIImageView *MakeImageView(CGRect frame, NSString *imageName)</span><br><span class="line">&#123;</span><br><span class="line">    UIImageView *imageV = [[UIImageView alloc]initWithFrame:frame];</span><br><span class="line">//    imageV.userInteractionEnabled = YES;</span><br><span class="line">    imageV.backgroundColor = [UIColor clearColor];</span><br><span class="line">    imageV.image = [UIImage imageNamed:imageName];</span><br><span class="line">    return imageV;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p><strong>3.标签控制器</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">@interface MTabBarViewController ()</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation MTabBarViewController</span><br><span class="line"></span><br><span class="line">- (instancetype)initWithViewControllers:(NSArray *)viewControllers</span><br><span class="line">&#123;</span><br><span class="line">    self = [super init];</span><br><span class="line">    if (self) &#123;</span><br><span class="line">        </span><br><span class="line">        _viewControllers = viewControllers;</span><br><span class="line">        //遍历数组，添加子控制器</span><br><span class="line">        [_viewControllers enumerateObjectsUsingBlock:^(UIViewController *  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) &#123;</span><br><span class="line">            [self addChild:obj];</span><br><span class="line">        &#125;];</span><br><span class="line">        /*</span><br><span class="line">         @[@&quot;商品.png&quot;,@&quot;消息.png&quot;,@&quot;订单.png&quot;]</span><br><span class="line">         @[@&quot;商品浏览&quot;,@&quot;我的消息&quot;,@&quot;我的订单&quot;]</span><br><span class="line">         */</span><br><span class="line">        _tabBar = [[MTabBar alloc]initWithTitles:@[@&quot;商品浏览&quot;,@&quot;我的消息&quot;,@&quot;我的订单&quot;] imageNames:@[@&quot;商品.png&quot;,@&quot;消息.png&quot;,@&quot;订单.png&quot;]];</span><br><span class="line">        [self.view addSubview:self.tabBar];</span><br><span class="line">        __weak typeof(self) weakSelf = self;</span><br><span class="line">        self.tabBar.callBack = ^(NSInteger index)&#123;</span><br><span class="line">            weakSelf.selectedIndex = index;</span><br><span class="line">        &#125;;</span><br><span class="line">        //默认选中第0个</span><br><span class="line">        self.selectedIndex = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)setSelectedIndex:(NSInteger)selectedIndex</span><br><span class="line">&#123;</span><br><span class="line">    //取出当前控制器 oldVc</span><br><span class="line">    UIViewController *oldVc = self.viewControllers[self.selectedIndex];</span><br><span class="line">    //取出将要显示的 控制器 newVc</span><br><span class="line">    UIViewController *newVc = self.viewControllers[selectedIndex];</span><br><span class="line">    //动画 向左边移动</span><br><span class="line">    newVc.view.frame = CGRectMake(S_W, 0, S_W, S_H);</span><br><span class="line">    //改变 newVc 的视图层次</span><br><span class="line">    </span><br><span class="line">    //把newVc.view 的视图放在 self.tabBar 的下面</span><br><span class="line">    [self.view insertSubview:newVc.view belowSubview:self.tabBar];</span><br><span class="line">    [UIView animateWithDuration:0.5 animations:^&#123;</span><br><span class="line">        oldVc.view.frame = CGRectMake(-S_W, 0, S_W, S_H);</span><br><span class="line">        newVc.view.frame = BOUNDS;</span><br><span class="line">    &#125;];</span><br><span class="line">    _selectedIndex = selectedIndex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//添加子控制器具体步骤</span><br><span class="line">- (void)addChild:(UIViewController *)viewController</span><br><span class="line">&#123;</span><br><span class="line">    [self addChildViewController:viewController];</span><br><span class="line">    viewController.view.frame = BOUNDS;</span><br><span class="line">    //将viewContoller.view 放在最底层</span><br><span class="line">    [self.view insertSubview:viewController.view atIndex:0];</span><br><span class="line">    [viewController didMoveToParentViewController:self];</span><br><span class="line">    </span><br><span class="line">//    self.view.subviews 数组 下标越小，视图层次越在下面，下标越大，视图层次越在上面</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p><strong>4.视图位置控制 修改对应的视图的frame可以实现不同的视图效果</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">CGRect TabBarFrame()</span><br><span class="line">&#123;</span><br><span class="line">    return CGRectMake(0, S_H-64, S_W, 64);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//左边抽屉隐藏（开始）的位置</span><br><span class="line">CGRect LeftViewStartFrame()</span><br><span class="line">&#123;</span><br><span class="line">    return CGRectMake(-S_W*0.75, 67,S_W*0.75 , S_H-64-64-6);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//左边抽屉显示（结束）的位置</span><br><span class="line">CGRect LeftViewEndFrame()</span><br><span class="line">&#123;</span><br><span class="line">    return CGRectMake(0, 67, S_W*0.75, S_H-64-64-6);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//右边内容开始（抽屉隐藏时）的位置</span><br><span class="line">CGRect RigntContentStartFrame()</span><br><span class="line">&#123;</span><br><span class="line">    return CGRectMake(0, 0, S_W, S_H);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//右边内容结束（抽屉显示时）的位置</span><br><span class="line">CGRect RightContentEndFrame()</span><br><span class="line">&#123;</span><br><span class="line">    return CGRectMake(S_W*0.75, 0, S_W, S_H);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CGRect CGRM(CGFloat x, CGFloat y,CGFloat w,CGFloat h)</span><br><span class="line">&#123;</span><br><span class="line">    return CGRectMake(x, y, w, h);</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>欢迎下载</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;demo地址：&lt;a href=&quot;https://github.com/GavinCarter1991/-tarBar&quot;&gt;gitHub&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;一、先来个效果&quot;&gt;&lt;a href=&quot;#一、先来个效果&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    <category term="iOS" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/categories/iOS/"/>
    
    
    <category term="“iOS”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9CiOS%E2%80%9D/"/>
    
    <category term="“抽屉”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9C%E6%8A%BD%E5%B1%89%E2%80%9D/"/>
    
    <category term="“tabBar”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9CtabBar%E2%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>Base64-不重要数据的简单加密</title>
    <link href="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2016/07/09/Base64-%E4%B8%8D%E9%87%8D%E8%A6%81%E6%95%B0%E6%8D%AE%E7%9A%84%E7%AE%80%E5%8D%95%E5%8A%A0%E5%AF%86/"/>
    <id>https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2016/07/09/Base64-%E4%B8%8D%E9%87%8D%E8%A6%81%E6%95%B0%E6%8D%AE%E7%9A%84%E7%AE%80%E5%8D%95%E5%8A%A0%E5%AF%86/</id>
    <published>2016-07-09T12:31:41.000Z</published>
    <updated>2025-06-11T03:43:59.136Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><blockquote><p> 最近公司要求对服务器的token等参数进行一个简单的加密，防止恶意请求。要求加密过程自定义，于是就想到了用base64，其实这不是一个加密解密的算法，其实它就是使用64个字符来对任意数据进行编码解码的，具体底层实现原理就不讨论了，它是随着iOS7推出的。</p></blockquote><p>##我的实现过程（可以根据公司需求自定义）：</p><ol><li>先编码一次</li><li>对编码结果的数据交换首位字符在编码一次</li><li>对编码结果逆序在编码一次</li></ol><p>##示例代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">+(NSString *)base64EncodedString:(NSString *)string &#123;</span><br><span class="line">Base64Encoding *base64 = [[Base64Encoding alloc] init];</span><br><span class="line">   </span><br><span class="line">    // 1次</span><br><span class="line">    NSString *encrypt1 = [base64 base64EncodedString:string];</span><br><span class="line">    // 交换字符串首位次序</span><br><span class="line">    NSString *string1 = [base64 changeStringFirsrAndLast:encrypt1];</span><br><span class="line">    </span><br><span class="line">    // 2次</span><br><span class="line">    NSString *encrypt2 = [base64 base64EncodedString:string1];</span><br><span class="line">    // 交换字符串首位次序</span><br><span class="line">    NSString *string2 = [base64 changeStringOrder:encrypt2];</span><br><span class="line">    </span><br><span class="line">    // 3次</span><br><span class="line">    NSString *encrypt3 = [base64 base64EncodedString:string2];</span><br><span class="line">    </span><br><span class="line">    return encrypt3;</span><br><span class="line">&#125;</span><br><span class="line">// 添加逗号</span><br><span class="line">- (NSString *)addSeparaedSingle:(NSString *)string &#123;</span><br><span class="line">    NSMutableString *mutableString = [string mutableCopy];</span><br><span class="line">    NSInteger cont = mutableString.length;</span><br><span class="line">    for (int i = 0; i &lt; cont - 1; i ++) &#123;</span><br><span class="line">        [mutableString insertString:@&quot;,&quot; atIndex:2 * i + 1];</span><br><span class="line">    &#125;</span><br><span class="line">    return mutableString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 去掉逗号</span><br><span class="line">- (NSString *)removeSeparaedSingle:(NSString *)string &#123;</span><br><span class="line">   return [string stringByReplacingOccurrencesOfString:@&quot;,&quot; withString:@&quot;&quot;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 字符串转数组</span><br><span class="line">- (NSMutableArray *)stringChangeArray:(NSString *)string &#123;</span><br><span class="line">    NSMutableArray *mutableArray = [NSMutableArray arrayWithArray:[string componentsSeparatedByString:@&quot;,&quot;]];</span><br><span class="line">    return mutableArray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 数组转字符串</span><br><span class="line">- (NSString *)arrayChangeString:(NSArray *)array &#123;</span><br><span class="line">    return [array componentsJoinedByString:@&quot;,&quot;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 字符串交换首尾</span><br><span class="line">- (NSString *)changeStringFirsrAndLast:(NSString *)string &#123;</span><br><span class="line">    NSString *str = [self addSeparaedSingle:string];</span><br><span class="line">    NSMutableArray *mutableArray = [self stringChangeArray:str];</span><br><span class="line">    NSString *temp = mutableArray[0];</span><br><span class="line">    mutableArray[0] = mutableArray[mutableArray.count - 1];</span><br><span class="line">    mutableArray[mutableArray.count - 1] = temp;</span><br><span class="line">    NSString *arrayString = [self arrayChangeString:mutableArray];</span><br><span class="line">    return [self removeSeparaedSingle:arrayString];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 字符串逆序</span><br><span class="line">- (NSString *)changeStringOrder:(NSString *)string &#123;</span><br><span class="line">    NSString *str = [self addSeparaedSingle:string];</span><br><span class="line">    NSMutableArray *mutableArray = [self stringChangeArray:str];</span><br><span class="line">    NSArray *reversedArray = [[mutableArray reverseObjectEnumerator] allObjects];</span><br><span class="line">    NSString *arrayString = [self arrayChangeString:reversedArray];</span><br><span class="line">    return [self removeSeparaedSingle:arrayString];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 编码</span><br><span class="line">- (NSString *)base64EncodedString:(NSString *)string &#123;</span><br><span class="line">    NSData *data = [string dataUsingEncoding:NSUTF8StringEncoding];</span><br><span class="line">    return [data base64EncodedStringWithOptions:0];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>###结束语：</p><blockquote><p>  这个可以根据公司的要求跟后台写的好加密的规则，解密就交给后台了，<code>方法：initWithBase64EncodedData</code> 采用逆向规则解密即可，当然这个是极其容易被破解的，涉及敏感数据是不可使用这个方法的。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt; 最近公司要求对服务器的token等参数进行一个简单的加密，防止恶意请求。要求加密过程自定义，于是就想到了用bas</summary>
      
    
    
    
    <category term="iOS" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/categories/iOS/"/>
    
    
    <category term="“Base64”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9CBase64%E2%80%9D/"/>
    
    <category term="“加密”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9C%E5%8A%A0%E5%AF%86%E2%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>iOS-解压zip</title>
    <link href="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2016/07/09/iOS-%E8%A7%A3%E5%8E%8Bzip/"/>
    <id>https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/2016/07/09/iOS-%E8%A7%A3%E5%8E%8Bzip/</id>
    <published>2016-07-09T12:31:07.000Z</published>
    <updated>2025-06-11T03:43:59.135Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近的项目中涉及到了将zip文件从服务上下载下来，然后解压使用。搜索了一下发现有一个压缩与解压zip文件的第三方“SSZipArchive”：<a href="https://github.com/ZipArchive/ZipArchive">https://github.com/ZipArchive/ZipArchive</a> 是用C语言实现的，包装用于OC与swift.</p></blockquote><h5 id="一、在使用过程中遇到过几个坑："><a href="#一、在使用过程中遇到过几个坑：" class="headerlink" title="一、在使用过程中遇到过几个坑："></a>一、在使用过程中遇到过几个坑：</h5><ol><li><p>导入头文件冲突，我在pch文件里面导入了一些OC的头文件，而SSZipArchive是由C语言实现的，所以报了很多的系统错误。解决办法：将pch里面的导入头文件代码放在<br>“#ifdef <strong>OBJC</strong><br>&#x2F;&#x2F;导入头文件<br>“#endif 里面”<br>  或者删除里面导入头文件的代码，去具体需要的文件里面导入，有一点暴力哈。</p></li><li><p>我每一次下载的文件样式都是一样的，所以希望覆盖式的解压，一开始没有注意以为它只有解压方法：+ (BOOL)unzipFileAtPath:(NSString *)path toDestination:(NSString *)destination;<br>就自己去判定是否存在然后删除，后来去仔细的看源码才发现它是有带是否覆盖式解压的方法：+ (BOOL)unzipFileAtPath:(NSString *)path toDestination:(NSString *)destination overwrite:(BOOL)overwrite password:(NSString *)password error:(NSError * *)error;<br>当然它还有很多方法，包括带有代理方法，带有密码，带有完成后的block回调方法，<br><a href="http://blog.csdn.net/zhengang007/article/details/51019479">http://blog.csdn.net/zhengang007/article/details/51019479</a><br>这里有每一个方法的详细说明。</p></li></ol><h5 id="二、我的实现："><a href="#二、我的实现：" class="headerlink" title="二、我的实现："></a>二、我的实现：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">- (void)downFileFromServer&#123;</span><br><span class="line">//远程地址</span><br><span class="line">NSURL *URL = [NSURL URLWithString:DOWN_URL];</span><br><span class="line">//默认配置</span><br><span class="line">NSURLSessionConfiguration *configuration = [NSURLSessionConfiguration defaultSessionConfiguration];</span><br><span class="line">//AFN3.0+基于封住URLSession的句柄</span><br><span class="line">AFURLSessionManager *manager = [[AFURLSessionManager alloc] initWithSessionConfiguration:configuration];</span><br><span class="line"></span><br><span class="line">//请求</span><br><span class="line">NSURLRequest *request = [NSURLRequest requestWithURL:URL];</span><br><span class="line"></span><br><span class="line">//下载Task操作</span><br><span class="line">_downloadTask = [manager downloadTaskWithRequest:request progress:^(NSProgress * _Nonnull downloadProgress) &#123;</span><br><span class="line">// 下载进度</span><br><span class="line"></span><br><span class="line">&#125; destination:^NSURL * _Nonnull(NSURL * _Nonnull targetPath, NSURLResponse * _Nonnull response) &#123;</span><br><span class="line"></span><br><span class="line">//- block的返回值, 要求返回一个URL, 返回的这个URL就是文件的位置的路径</span><br><span class="line">NSString *cachesPath = [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) lastObject];</span><br><span class="line"></span><br><span class="line">NSString *path = [cachesPath stringByAppendingPathComponent:response.suggestedFilename];</span><br><span class="line">return [NSURL fileURLWithPath:path];</span><br><span class="line">&#125; completionHandler:^(NSURLResponse * _Nonnull response, NSURL * _Nullable filePath, NSError * _Nullable error) &#123;</span><br><span class="line"></span><br><span class="line">//设置下载完成操作</span><br><span class="line">// filePath就是你下载文件的位置，你可以解压，也可以直接拿来使用</span><br><span class="line">NSString *imgFilePath = [filePath path];// 将NSURL转成NSString</span><br><span class="line">MyLog(@&quot;imgFilePath = %@&quot;,imgFilePath);</span><br><span class="line">NSArray *documentArray =  NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, NSUserDomainMask, YES);</span><br><span class="line">NSString *path = [[documentArray lastObject] stringByAppendingPathComponent:@&quot;Preferences&quot;];</span><br><span class="line">[self releaseZipFilesWithUnzipFileAtPath:imgFilePath Destination:path];</span><br><span class="line">&#125;];</span><br><span class="line">[_downloadTask resume];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 解压</span><br><span class="line">- (void)releaseZipFilesWithUnzipFileAtPath:(NSString *)zipPath Destination:(NSString *)unzipPath&#123;</span><br><span class="line">NSError *error;</span><br><span class="line">if ([SSZipArchive unzipFileAtPath:zipPath toDestination:unzipPath overwrite:YES password:nil error:&amp;error delegate:self]) &#123;</span><br><span class="line">MyLog(@&quot;success&quot;);</span><br><span class="line">MyLog(@&quot;unzipPath = %@&quot;,unzipPath);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">MyLog(@&quot;%@&quot;,error);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - SSZipArchiveDelegate</span><br><span class="line">- (void)zipArchiveWillUnzipArchiveAtPath:(NSString *)path zipInfo:(unz_global_info)zipInfo &#123;</span><br><span class="line">MyLog(@&quot;将要解压。&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)zipArchiveDidUnzipArchiveAtPath:(NSString *)path zipInfo:(unz_global_info)zipInfo unzippedPath:(NSString *)unzippedPat uniqueId:(NSString *)uniqueId &#123;</span><br><span class="line">MyLog(@&quot;解压完成！&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当然还得遵守协议：SSZipArchiveDelegate<br>以上就是我使用SSZipArchive的体会，欢迎各位指正。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;最近的项目中涉及到了将zip文件从服务上下载下来，然后解压使用。搜索了一下发现有一个压缩与解压zip文件的第三方“SSZipArchive”：&lt;a href=&quot;https://github.com/ZipArchive/ZipArchive&quot;&gt;ht</summary>
      
    
    
    
    <category term="iOS" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/categories/iOS/"/>
    
    
    <category term="“iOS”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9CiOS%E2%80%9D/"/>
    
    <category term="“解压zip”" scheme="https://gavincarter1991.github.io/#%20%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4URL/tags/%E2%80%9C%E8%A7%A3%E5%8E%8Bzip%E2%80%9D/"/>
    
  </entry>
  
</feed>
