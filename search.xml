<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Base64-不重要数据的简单加密</title>
    <url>/2016/07/09/Base64-%E4%B8%8D%E9%87%8D%E8%A6%81%E6%95%B0%E6%8D%AE%E7%9A%84%E7%AE%80%E5%8D%95%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><blockquote>
<p> 最近公司要求对服务器的token等参数进行一个简单的加密，防止恶意请求。要求加密过程自定义，于是就想到了用base64，其实这不是一个加密解密的算法，其实它就是使用64个字符来对任意数据进行编码解码的，具体底层实现原理就不讨论了，它是随着iOS7推出的。</p>
</blockquote>
<p>##我的实现过程（可以根据公司需求自定义）：</p>
<ol>
<li>先编码一次</li>
<li>对编码结果的数据交换首位字符在编码一次</li>
<li>对编码结果逆序在编码一次</li>
</ol>
<p>##示例代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+(NSString *)base64EncodedString:(NSString *)string &#123;</span><br><span class="line">Base64Encoding *base64 = [[Base64Encoding alloc] init];</span><br><span class="line">   </span><br><span class="line">    // 1次</span><br><span class="line">    NSString *encrypt1 = [base64 base64EncodedString:string];</span><br><span class="line">    // 交换字符串首位次序</span><br><span class="line">    NSString *string1 = [base64 changeStringFirsrAndLast:encrypt1];</span><br><span class="line">    </span><br><span class="line">    // 2次</span><br><span class="line">    NSString *encrypt2 = [base64 base64EncodedString:string1];</span><br><span class="line">    // 交换字符串首位次序</span><br><span class="line">    NSString *string2 = [base64 changeStringOrder:encrypt2];</span><br><span class="line">    </span><br><span class="line">    // 3次</span><br><span class="line">    NSString *encrypt3 = [base64 base64EncodedString:string2];</span><br><span class="line">    </span><br><span class="line">    return encrypt3;</span><br><span class="line">&#125;</span><br><span class="line">// 添加逗号</span><br><span class="line">- (NSString *)addSeparaedSingle:(NSString *)string &#123;</span><br><span class="line">    NSMutableString *mutableString = [string mutableCopy];</span><br><span class="line">    NSInteger cont = mutableString.length;</span><br><span class="line">    for (int i = 0; i &lt; cont - 1; i ++) &#123;</span><br><span class="line">        [mutableString insertString:@&quot;,&quot; atIndex:2 * i + 1];</span><br><span class="line">    &#125;</span><br><span class="line">    return mutableString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 去掉逗号</span><br><span class="line">- (NSString *)removeSeparaedSingle:(NSString *)string &#123;</span><br><span class="line">   return [string stringByReplacingOccurrencesOfString:@&quot;,&quot; withString:@&quot;&quot;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 字符串转数组</span><br><span class="line">- (NSMutableArray *)stringChangeArray:(NSString *)string &#123;</span><br><span class="line">    NSMutableArray *mutableArray = [NSMutableArray arrayWithArray:[string componentsSeparatedByString:@&quot;,&quot;]];</span><br><span class="line">    return mutableArray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 数组转字符串</span><br><span class="line">- (NSString *)arrayChangeString:(NSArray *)array &#123;</span><br><span class="line">    return [array componentsJoinedByString:@&quot;,&quot;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 字符串交换首尾</span><br><span class="line">- (NSString *)changeStringFirsrAndLast:(NSString *)string &#123;</span><br><span class="line">    NSString *str = [self addSeparaedSingle:string];</span><br><span class="line">    NSMutableArray *mutableArray = [self stringChangeArray:str];</span><br><span class="line">    NSString *temp = mutableArray[0];</span><br><span class="line">    mutableArray[0] = mutableArray[mutableArray.count - 1];</span><br><span class="line">    mutableArray[mutableArray.count - 1] = temp;</span><br><span class="line">    NSString *arrayString = [self arrayChangeString:mutableArray];</span><br><span class="line">    return [self removeSeparaedSingle:arrayString];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 字符串逆序</span><br><span class="line">- (NSString *)changeStringOrder:(NSString *)string &#123;</span><br><span class="line">    NSString *str = [self addSeparaedSingle:string];</span><br><span class="line">    NSMutableArray *mutableArray = [self stringChangeArray:str];</span><br><span class="line">    NSArray *reversedArray = [[mutableArray reverseObjectEnumerator] allObjects];</span><br><span class="line">    NSString *arrayString = [self arrayChangeString:reversedArray];</span><br><span class="line">    return [self removeSeparaedSingle:arrayString];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 编码</span><br><span class="line">- (NSString *)base64EncodedString:(NSString *)string &#123;</span><br><span class="line">    NSData *data = [string dataUsingEncoding:NSUTF8StringEncoding];</span><br><span class="line">    return [data base64EncodedStringWithOptions:0];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>###结束语：</p>
<blockquote>
<p>  这个可以根据公司的要求跟后台写的好加密的规则，解密就交给后台了，<code>方法：initWithBase64EncodedData</code> 采用逆向规则解密即可，当然这个是极其容易被破解的，涉及敏感数据是不可使用这个方法的。</p>
</blockquote>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>“Base64”</tag>
        <tag>“加密”</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 基础入门</title>
    <url>/2025/07/24/C-%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<blockquote>
<p>C++ 是一种广泛使用的、面向对象的、通用的编程语言，它在系统&#x2F;应用软件开发、游戏开发、嵌入式系统等领域有着广泛的应用。对于初学者来说，掌握 C++ 的基础知识和核心概念是学习编程的重要一步</p>
</blockquote>
<h1 id="1-C-的历史与特点"><a href="#1-C-的历史与特点" class="headerlink" title="1. C++ 的历史与特点"></a>1. C++ 的历史与特点</h1><blockquote>
<p>C++ 由 <code>Bjarne Stroustrup</code> 在 1985 年开发，最初是作为 C 语言的扩展，后来发展成为一种支持面向对象编程（<code>OOP</code>）的语言。C++ 保留了 C 语言的大部分特性，同时增加了类、继承、多态等 <code>OOP</code> 的核心概念，使得它在处理大型程序时更加高效和灵活</p>
</blockquote>
<h3 id="主要特点包括："><a href="#主要特点包括：" class="headerlink" title="主要特点包括："></a>主要特点包括：</h3><blockquote>
<p><strong>灵活性：</strong> C++ 支持多种编程范式，包括过程化编程、面向对象编程和泛型编程。开发者可以根据需要选择合适的编程风格，使程序设计更加灵活和多样化</p>
<p><strong>面向对象编程（OOP）：</strong> C++ 支持类和对象的概念，通过封装、继承和多态等机制实现面向对象编程。这种编程方式提高了代码的复用性和可维护性，使程序结构更加清晰和模块化</p>
<p><strong>泛型编程：</strong> C++ 引入了模板机制，允许开发者编写通用的代码，从而提高代码的复用性和灵活性。标准模板库（<code>STL</code>）提供了丰富的容器、算法和迭代器，简化了常见的数据结构和操作</p>
<p><strong>高性能：</strong> C++ 是一种编译型语言，可以直接生成高效的机器码，适合开发对性能要求极高的应用。它继承了 C 语言的高效特性，程序运行速度快，执行效率高</p>
<p><strong>内存管理：</strong> C++ 提供了对内存的直接控制，开发者可以手动管理内存，但也需要谨慎处理以避免内存泄漏等问题。C++ 还支持智能指针和 RAII 技术，提高了内存管理的安全性</p>
<p><strong>可移植性：</strong> C++ 源代码可以在不同平台上编译、链接和运行，无需为每个平台单独编写代码，节省时间和精力。C++ 的可移植性使其成为跨平台开发的理想选择</p>
<p><strong>强类型检查：</strong> C++ 是一种静态类型语言，在编译时进行类型检查，提高代码的安全性和效率。这种类型检查机制有助于在编译阶段发现潜在的错误，提高程序的健壮性</p>
<p><strong>标准库支持：</strong> C++ 标准库（ <code>Standard Template Library</code> ， <code>STL</code> ）提供了大量的容器、算法和迭代器，方便开发者进行高效的编程。这些库函数涵盖了从数据结构到算法实现的各个方面，极大地提高了开发效率</p>
<p><strong>多线程支持：</strong> 自 C++11 起，C++ 引入了线程库，便于多线程编程，实现并发执行和任务分配。多线程支持使得 C++ 能够更好地利用现代多核处理器的性能</p>
<p><strong>兼容性：</strong> C++ 保持了与 C 语言的兼容性，绝大多数 C 语言程序可以不经修改直接在 C++ 环境中运行。这种兼容性使得 C++ 成为一种灵活的编程语言，能够无缝集成现有的 C 语言代码</p>
<p><strong>指针：</strong> C++ 支持指针功能，可以直接与内存交互，用于内存、结构和数组等。指针提供了对内存的直接访问能力，增强了程序的灵活性和效率</p>
<p><strong>模块化：</strong> C++ 允许使用函数将程序分解为部分，便于理解和修改。模块化设计使得程序结构更加清晰，便于维护和扩展</p>
</blockquote>
<h1 id="2-C-的基本结构"><a href="#2-C-的基本结构" class="headerlink" title="2. C++ 的基本结构"></a>2. C++ 的基本结构</h1><blockquote>
<p>C++ 的基本结构是构成程序的基础，它决定了程序的组织方式和执行流程</p>
</blockquote>
<h3 id="C-程序通常包含以下几个部分"><a href="#C-程序通常包含以下几个部分" class="headerlink" title="C++ 程序通常包含以下几个部分"></a>C++ 程序通常包含以下几个部分</h3><blockquote>
<p><strong>预处理指令：</strong> 如 <code>#include &lt;iostream&gt;</code> ，用于引入头文件</p>
</blockquote>
<blockquote>
<p><strong>命名空间：</strong> 不同库或模块中相同标识符（如变量、函数名）可通过命名空间隔离，命名空间类似于操作系统中的目录和文件的关系，用于避免命名冲突，命名空间通过 <code>namespace</code> 关键字定义，在命名空间外部，可以通过使用每个标识符的完整名称或 <code>using</code> 声明来访问其成员</p>
</blockquote>
<p><strong>1. using 声明（引入特定成员）</strong></p>
<p><strong>2.	using namespace 指令（引入整个空间，慎用）</strong></p>
<p><strong>3. 头文件中禁止使用 using namespace，防止包含时扩散冲突</strong></p>
<p><strong>4. 避免全局污染：优先使用显式限定（Namespace::member）或 using 声明（非 using namespace）</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">namespace First &#123;</span><br><span class="line">    void sayHello() &#123;</span><br><span class="line">        cout &lt;&lt; &quot;Hello First Namespace&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace Second &#123;</span><br><span class="line">    void sayHello() &#123;</span><br><span class="line">        cout &lt;&lt; &quot;Hello Second Namespace&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    First::sayHello();</span><br><span class="line">    Second::sayHello();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>嵌套命名空间</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">namespace Outer &#123;</span><br><span class="line">    int x = 10;</span><br><span class="line">    namespace Inner &#123;</span><br><span class="line">        int y = 20;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    cout &lt;&lt; Outer::x &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; Outer::Inner::y &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>主函数：</strong> <code>int main()</code> 是程序的入口点</p>
</blockquote>
<blockquote>
<p><strong>输出语句：</strong> 如 <code>std::cout &lt;&lt; &quot;Hello, World!&quot;; </code>，用于输出信息</p>
</blockquote>
<blockquote>
<p><strong>返回值：</strong> <code>return 0; </code> 表示程序正常结束</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    std::cout &lt;&lt; &quot;Hello, World!&quot; &lt;&lt; std::endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>输出：Hello, World!</code></p>
<h1 id="3-C-的基本语法"><a href="#3-C-的基本语法" class="headerlink" title="3. C++ 的基本语法"></a>3. C++ 的基本语法</h1><blockquote>
<p>C++ 的语法与 C 语言非常相似，但有一些扩展和改进</p>
</blockquote>
<h2 id="C-的一些基本语法元素"><a href="#C-的一些基本语法元素" class="headerlink" title="C++ 的一些基本语法元素"></a>C++ 的一些基本语法元素</h2><h3 id="1-变量声明"><a href="#1-变量声明" class="headerlink" title="1. 变量声明"></a>1. 变量声明</h3><blockquote>
<p>想要使用变量，必须先做 <code>声明</code>，同时还要指明保存数据所需要的空间大小，使用 <code>int</code> , <code>float</code> , <code>bool</code> , <code>char</code> 等关键字声明变量</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int a; // 声明</span><br><span class="line">a = 1; // 赋值操作</span><br><span class="line">int a = 1; // 声明且赋值操作</span><br><span class="line">a = 2; // 修改变量值</span><br></pre></td></tr></table></figure>

<h3 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2. 数据类型"></a>2. 数据类型</h3><blockquote>
<p>C++ 提供了多种基本数据类型，如 <code>int</code> , <code>float</code> , <code>double</code> , <code>bool</code> , <code>char</code> 等，使用 <code>sizeof()</code> 运算符可获取类型或变量占用的字节数</p>
</blockquote>
<h4 id="一、基本数据类型"><a href="#一、基本数据类型" class="headerlink" title="一、基本数据类型"></a>一、基本数据类型</h4><blockquote>
<p><strong>整数类型：</strong> 用于表示整数值，包括 <code>int</code> 、<code>short</code> 、<code>long</code> 、<code>long long</code> 以及它们的无符号版本 <code>unsigned int</code> 、<code>unsigned short</code> 、<code>unsigned long</code> 、<code>unsigned long long</code> 。这些类型用于存储整数数据，其范围和精度取决于具体类型。例如，<code>int</code> 通常占用 4 个字节，而 <code>short</code> 通常占用 2 个字节 </p>
<p><strong>浮点类型：</strong> 用于表示实数，包括 <code>float</code> 、<code>double</code> 和 <code>long double</code> 。<code>float</code> 通常占用 4 个字节，可以存储 7 位小数；<code>double</code> 通常占用 8 个字节，可以存储 15 位小数；<code>long double</code> 通常占用 16 个字节，精度更高 </p>
<p><strong>字符类型：</strong> 用于表示单个字符，包括 <code>char</code> 和 <code>wchar_t</code> 。<code>char</code> 通常占用 1 个字节，而 <code>wchar_t</code> 用于表示宽字符，但其大小由实现定义，不可靠 </p>
<p><strong>布尔类型：</strong> 用于表示布尔值，即 <code>true</code> 或 <code>false</code>，通常占用 1 个字节 </p>
<p><strong>空类型：</strong> 表示没有值或没有返回值，常用于函数返回值或指针，如 <code>void*</code></p>
</blockquote>
<h4 id="二、用户自定义数据类型"><a href="#二、用户自定义数据类型" class="headerlink" title="二、用户自定义数据类型"></a>二、用户自定义数据类型</h4><p><strong>结构体（struct）</strong></p>
<blockquote>
<p>结构体用于封装多个不同类型的成员变量，从而形成一个逻辑上相关的数据集合，C++中 <code>struct</code> 可包含构造函数、析构函数、继承和多态，功能与 <code>class</code> 几乎相同，仅默认权限不同，结构体成员默认为公有（<code>public</code>），结构体的成员可以通过点运算符（.）</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct 结构体名称 &#123;</span><br><span class="line">    数据类型 成员1;</span><br><span class="line">    数据类型 成员2;</span><br><span class="line">    // ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct Student &#123;</span><br><span class="line">    // 数据成员</span><br><span class="line">    int id;</span><br><span class="line">    std::string name;</span><br><span class="line">    double score;</span><br><span class="line">    </span><br><span class="line">    Student(int a, std::string b, double c) : id(a), name(b), score(c), &#123;&#125;  // 自定义构造函数 </span><br><span class="line">    </span><br><span class="line">    // 成员函数（C++支持）</span><br><span class="line">    void printInfo() &#123;</span><br><span class="line">        std::cout &lt;&lt; &quot;ID: &quot; &lt;&lt; id &lt;&lt; &quot;, Name: &quot; &lt;&lt; name &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Student p1(10, &quot;Alice&quot;, 1.5);</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; &quot;ID: &quot; &lt;&lt; p1.id &lt;&lt; &quot;, Name: &quot; &lt;&lt; p1.name &lt;&lt; &quot;, Score: &quot; &lt;&lt; p1.score &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">// 2. 创建一个学生对象</span><br><span class="line">// 注意：这里使用了一个简单的构造函数来初始化学生对象</span><br><span class="line">Student s1 = &#123;101, &quot;Alice&quot;, 95.5&#125;; // C++11起支持</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; &quot;ID: &quot; &lt;&lt; s1.id &lt;&lt; &quot;, Name: &quot; &lt;&lt; s1.name &lt;&lt; &quot;, Score: &quot; &lt;&lt; s1.score &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输出：</span><br><span class="line">ID: 10, Name: Alice, Score: 1.5</span><br><span class="line">ID: 101, Name: Alice, Score: 95.5</span><br></pre></td></tr></table></figure>

<p><strong>联合（union）</strong></p>
<blockquote>
<p> 联合用于存储多个数据元素，但这些元素共享同一内存位置，因此只能同时存储一个元素</p>
</blockquote>
<ol>
<li><p>联合的大小等于其成员中最大的成员的大小</p>
</li>
<li><p>联合不能作为基类使用，因为它不能继承自其他类</p>
</li>
<li><p>联合不能包含引用类型的成员，因为引用需要额外的存储空间</p>
</li>
<li><p>匿名联合不使用点运算符，其成员必须是数据类型，不允许有成员函数或私有&#x2F;受保护的成员，为了防止访问错误</p>
</li>
<li><p>建议在联合中定义一个额外的对象（判别式）来跟踪当前存储的值的类型</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class Token &#123;</span><br><span class="line">public:</span><br><span class="line">    enum TokenKind &#123; INT, CHAR, DBL &#125;;</span><br><span class="line">    TokenKind tok;</span><br><span class="line">    union &#123;</span><br><span class="line">        char cval;</span><br><span class="line">        int ival;</span><br><span class="line">        double dval;</span><br><span class="line">    &#125; val;</span><br><span class="line">    </span><br><span class="line">    void print() &#123;</span><br><span class="line">        switch (tok) &#123;</span><br><span class="line">            case INT:</span><br><span class="line">                cout &lt;&lt; &quot;Integer: &quot; &lt;&lt; val.ival &lt;&lt; endl;</span><br><span class="line">                break;</span><br><span class="line">            case CHAR:</span><br><span class="line">                cout &lt;&lt; &quot;Character: &quot; &lt;&lt; val.cval &lt;&lt; endl;</span><br><span class="line">                break;</span><br><span class="line">            case DBL:</span><br><span class="line">                cout &lt;&lt; &quot;Double: &quot; &lt;&lt; val.dval &lt;&lt; endl;</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    Token token;</span><br><span class="line">    </span><br><span class="line">    token.tok = Token::INT;</span><br><span class="line">    token.val.ival = 42;</span><br><span class="line">    token.print();</span><br><span class="line">    </span><br><span class="line">    token.tok = Token::CHAR;</span><br><span class="line">    token.val.cval = &#x27;a&#x27;;</span><br><span class="line">    token.print();</span><br><span class="line">    </span><br><span class="line">    token.tok = Token::DBL;</span><br><span class="line">    token.val.dval = 3.1416;</span><br><span class="line">    token.print();</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>枚举（enum）</strong></p>
<blockquote>
<p>枚举用于定义一组命名的常量，枚举成员默认从 0 开始递增，也可以显式指定值</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enum class WeekDay &#123;</span><br><span class="line">    Sunday,</span><br><span class="line">    Monday,</span><br><span class="line">    Tuesday,</span><br><span class="line">    Wednesday,</span><br><span class="line">    Thursday,</span><br><span class="line">    Friday,</span><br><span class="line">    Saturday</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">WeekDay today = WeekDay::Wednesday; // 成员需通过枚举名::访问，避免命名冲突</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enum RGB &#123;</span><br><span class="line">    R = 2,</span><br><span class="line">    G,</span><br><span class="line">    B = 5</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">G的值为R+1，结果为3</span><br></pre></td></tr></table></figure>

<p><strong>类（class）</strong></p>
<blockquote>
<p> 类用于创建类实例，包含成员函数和数据成员，是 C++ 面向对象编程的核心</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class ClassName &#123;</span><br><span class="line">public:    // 公共成员（外部可访问）</span><br><span class="line">// 构造函数 </span><br><span class="line">ClassName(参数列表) &#123; ... &#125;  </span><br><span class="line"></span><br><span class="line">// 成员函数 </span><br><span class="line">void memberFunc() &#123; ... &#125;  </span><br><span class="line"></span><br><span class="line">protected: // 受保护成员（仅子类及自身可访问）</span><br><span class="line">    int protectedVar;</span><br><span class="line">    </span><br><span class="line">private:   // 私有成员（仅自身可访问）</span><br><span class="line">    int privateVar;</span><br><span class="line">    </span><br><span class="line">&#125;; // 注意分号不可省略</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 类定义</span><br><span class="line">class Person &#123;</span><br><span class="line">public:</span><br><span class="line">    void setName(const std::string&amp; name);</span><br><span class="line">    std::string getName() const;</span><br><span class="line">    </span><br><span class="line">private:</span><br><span class="line">    std::string name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 成员函数的实现</span><br><span class="line">void Person::setName(const std::string&amp; name) &#123;</span><br><span class="line">    this-&gt;name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::string Person::getName() const &#123;</span><br><span class="line">    return name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="三、派生数据类型"><a href="#三、派生数据类型" class="headerlink" title="三、派生数据类型"></a>三、派生数据类型</h4><p><code>派生数据类型是从基本数据类型或用户定义数据类型衍生出来的数据类型</code></p>
<p><strong>数组</strong> </p>
<blockquote>
<p>数组用于存储固定大小、相同类型元素的连续内存集合，编译时确定大小，不可动态扩展，数组索引从 0 开始，支持多维数组，内存连续性：元素物理地址相邻，支持高效随机访问</p>
</blockquote>
<p><strong><code>声明方式</code></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 一维数组 </span><br><span class="line">int arr1[5]();          // 未初始化，值为随机数 </span><br><span class="line">int arr2[5]() = &#123;1, 2&#125;; // 部分初始化，剩余元素自动补0 → &#123;1,2,0,0,0&#125;</span><br><span class="line">int arr3[] = &#123;1,2,3&#125;; // 自动推断大小为3</span><br><span class="line"></span><br><span class="line">// 二维数组（数组的数组）</span><br><span class="line">int matrix[2][3] = &#123;&#123;1,2,3&#125;, &#123;4,5,6&#125;&#125;; // 标准初始化</span><br><span class="line">int matrix2[][2] = &#123;1,2,3,4&#125;;           // 省略行数，自动推断为2行 </span><br></pre></td></tr></table></figure>

<p><strong><code>遍历方式</code></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int arr[5]()  = &#123;10,20,30,40,50&#125;;</span><br><span class="line">// 1. for循环（推荐控制索引范围）</span><br><span class="line">for(int i=0; i&lt;5; i++) cout &lt;&lt; arr[i] &lt;&lt; &quot; &quot;;</span><br><span class="line"> </span><br><span class="line">// 2. 范围for循环（C++11）</span><br><span class="line">for(int num : arr) cout &lt;&lt; num &lt;&lt; &quot; &quot;;</span><br><span class="line"> </span><br><span class="line">// 3. 指针遍历 </span><br><span class="line">int *p = arr;</span><br><span class="line">while(p &lt; arr + 5) cout &lt;&lt; *p++ &lt;&lt; &quot; &quot;;</span><br></pre></td></tr></table></figure>

<p><strong><code>多维数组操作</code></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int matrix[2]()[3]() = &#123;&#123;1,2,3&#125;, &#123;4,5,6&#125;&#125;;</span><br><span class="line">// 嵌套循环遍历 </span><br><span class="line">for(int i=0; i&lt;2; i++) &#123;</span><br><span class="line">    for(int j=0; j&lt;3; j++) &#123;</span><br><span class="line">        cout &lt;&lt; matrix[i][j] &lt;&lt; &quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 内存按行连续存储：matrix[0][3] 等价于 matrix[1]()[0]()</span><br></pre></td></tr></table></figure>

<p><strong>指针</strong> </p>
<blockquote>
<p>指针用于存储变量的地址，它允许程序员直接访问和操作内存地址，通过指针，可以实现对内存的灵活管理、动态分配、数组操作、函数调用等高级功能</p>
</blockquote>
<p><strong><code>获取地址与解引用</code></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int num = 10;</span><br><span class="line">int *ptr = &amp;num; // ptr 指向 num 的地址</span><br><span class="line">cout &lt;&lt; *ptr; // 输出 10</span><br></pre></td></tr></table></figure>

<p><strong><code>空指针与野指针</code></strong></p>
<blockquote>
<p><code>空指针（null pointer）</code> 通常用 nullptr（C++11 引入）或 NULL 表示，表示没有指向任何有效内存地址。<code>野指针（dangling pointer）</code> 是指指向已释放内存的指针，访问野指针会导致未定义行为，预防：指针释放后置为NULL（delete p; p &#x3D; NULL;），避免再次使用</p>
</blockquote>
<p><strong><code>动态内存分配</code></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int *pn = new int; // 分配一个整数的内存</span><br><span class="line">int *psome = new int[20]; // 分配 20 个整数的内存</span><br><span class="line"></span><br><span class="line">delete pn; // 使用 delete 释放内存</span><br><span class="line">delete[] psome;</span><br></pre></td></tr></table></figure>

<p><strong><code>指针运算</code></strong> </p>
<blockquote>
<p>指针可以进行算术运算，如加减操作，但需注意基于指针指向的数据类型大小</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int arr[5] = &#123;1, 2, 3, 4, 5&#125;;</span><br><span class="line">int *p = arr;</span><br><span class="line">p++; // 指向下一个元素</span><br></pre></td></tr></table></figure>

<p><strong><code>指针与数组</code></strong></p>
<blockquote>
<p>数组名在大多数情况下被视为指向数组首元素的指针，但数组和指针本质不同。数组名没有自己的存储空间，而指针有自己的存储空间</p>
</blockquote>
<p><strong><code>指针作为函数参数</code></strong></p>
<blockquote>
<p>将指针作为函数参数传递时，函数内对指针所指向变量的修改将影响原始变量</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void increment(int *p) &#123;</span><br><span class="line">    (*p)++;</span><br><span class="line">&#125;</span><br><span class="line">int num = 10;</span><br><span class="line">increment(&amp;num); // num 变为 11</span><br></pre></td></tr></table></figure>

<p><strong><code>智能指针</code></strong></p>
<blockquote>
<p>智能指针是C++标准库（ <code>&lt;memory&gt;</code> 头文件）提供的自动内存管理工具，通过 <code>RAII</code>（资源获取即初始化）机制，将动态分配的内存（堆内存）封装为对象，在智能指针生命周期结束时自动释放所管理的内存，C++智能指针是现代C++内存管理的核心工具，正确使用它们可以大幅提升代码的安全性和可维护性，解决了手动管理内存的两大痛点：</p>
</blockquote>
<p><code>内存泄漏（忘记delete）</code></p>
<p><code>悬空指针（对象已释放但指针仍被使用）</code></p>
<blockquote>
<p><strong>unique_ptr：</strong> 用于独占所有权的场景（如管理局部动态对象、避免拷贝）</p>
<p><strong>shared_ptr：</strong> 用于共享所有权的场景（如多个对象共享同一资源）</p>
<p><strong>weak_ptr：</strong> 用于解决 <code>shared_ptr</code> 循环引用的问题（如观察者模式、缓存）</p>
</blockquote>
<p><strong><code>创建</code></strong></p>
<blockquote>
<p><strong>unique_ptr：</strong> 独占所有权的智能指针，同一时间只能有一个 <code>unique_ptr</code> 指向同一个对象，禁止拷贝（<code>copy constructor</code> 和 <code>operator</code> 被删除），但允许移动（<code>move constructor</code> 和 <code>move operator</code> 有效，优先使用 <code>std::make_unique</code> （C++14引入），它更简洁、异常安全（避免 <code>new</code> 后构造函数抛出异常导致内存泄漏），当 <code>unique_ptr</code> 超出作用域或被 <code>reset()</code> 时，自动调用 <code>delete</code> 释放所管理的内存（若管理数组，则调用 <code>delete[]</code> ）</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;memory&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line"> </span><br><span class="line">class Test &#123; </span><br><span class="line">public:</span><br><span class="line">    Test(int id) : id_(id) &#123; std::cout &lt;&lt; &quot;Test &quot; &lt;&lt; id_ &lt;&lt; &quot; constructed.\n&quot;; &#125; </span><br><span class="line">    ~Test() &#123; std::cout &lt;&lt; &quot;Test &quot; &lt;&lt; id_ &lt;&lt; &quot; destructed.\n&quot;; &#125; </span><br><span class="line">    void show() &#123; std::cout &lt;&lt; &quot;Test &quot; &lt;&lt; id_ &lt;&lt; &quot; is alive.\n&quot;; &#125; </span><br><span class="line">private:</span><br><span class="line">    int id_; </span><br><span class="line">&#125;; </span><br><span class="line"> </span><br><span class="line">int main() &#123; </span><br><span class="line">    // 方式1：用make_unique创建（推荐）</span><br><span class="line">    std::unique_ptr&lt;Test&gt; up1 = std::make_unique&lt;Test&gt;(1); </span><br><span class="line">    up1-&gt;show(); // 访问对象成员 </span><br><span class="line"> </span><br><span class="line">    // 方式2：用new直接构造（不推荐，除非需要自定义删除器） </span><br><span class="line">    std::unique_ptr&lt;Test&gt; up2(new Test(2)); </span><br><span class="line">    up2-&gt;show(); </span><br><span class="line"> </span><br><span class="line">    return; // up1、up2超出作用域，自动析构Test对象 </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输出：</span><br><span class="line"></span><br><span class="line">Test 1 constructed</span><br><span class="line"></span><br><span class="line">Test 1 is alive</span><br><span class="line"></span><br><span class="line">Test 2 constructed</span><br><span class="line"></span><br><span class="line">Test 2 is alive</span><br><span class="line"></span><br><span class="line">Test 2 destructed</span><br><span class="line"></span><br><span class="line">Test 1 destructed</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>shared_ptr：</strong> 共享所有权的智能指针，多个 <code>shared_ptr </code>可以指向同一个对象，通过引用计数（ <code>reference count</code> ）跟踪对象的被引用次数，当最后一个 <code>shared_ptr</code> 析构或 <code>reset()</code> 时，引用计数变为0，自动释放对象内存，引用计数的修改是原子操作（线程安全），但对象本身的访问需要手动同步（如用 <code>mutex</code> ）</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;memory&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line"> </span><br><span class="line">class Test &#123; </span><br><span class="line">public:</span><br><span class="line">    Test(int id) : id_(id) &#123; std::cout &lt;&lt; &quot;Test &quot; &lt;&lt; id_ &lt;&lt; &quot; constructed.\n&quot;; &#125; </span><br><span class="line">    ~Test() &#123; std::cout &lt;&lt; &quot;Test &quot; &lt;&lt; id_ &lt;&lt; &quot; destructed.\n&quot;; &#125; </span><br><span class="line">    void show() &#123; std::cout &lt;&lt; &quot;Test &quot; &lt;&lt; id_ &lt;&lt; &quot; is alive.\n&quot;; &#125; </span><br><span class="line">private:</span><br><span class="line">    int id_; </span><br><span class="line">&#125;; </span><br><span class="line"> </span><br><span class="line">int main() &#123; </span><br><span class="line">    // 方式1：用make_shared创建（推荐）</span><br><span class="line">    std::shared_ptr&lt;Test&gt; sp1 = std::make_shared&lt;Test&gt;(1); </span><br><span class="line">    std::cout &lt;&lt; &quot;sp1 use count: &quot; &lt;&lt; sp1.use_count()  &lt;&lt; &quot;\n&quot;; // 引用计数：1 </span><br><span class="line"> </span><br><span class="line">    // 方式2：用new直接构造（不推荐）</span><br><span class="line">    std::shared_ptr&lt;Test&gt; sp2(new Test(2)); </span><br><span class="line">    std::cout &lt;&lt; &quot;sp2 use count: &quot; &lt;&lt; sp2.use_count()  &lt;&lt; &quot;\n&quot;; // 引用计数：1 </span><br><span class="line"> </span><br><span class="line">    // 拷贝shared_ptr，引用计数增加 </span><br><span class="line">    std::shared_ptr&lt;Test&gt; sp3 = sp1; </span><br><span class="line">    std::cout &lt;&lt; &quot;sp1 use count after copy: &quot; &lt;&lt; sp1.use_count()  &lt;&lt; &quot;\n&quot;; // 引用计数：2 </span><br><span class="line"> </span><br><span class="line">    return; // sp1、sp2、sp3析构，引用计数变为0，自动释放对象 </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输出：</span><br><span class="line">Test 1 constructed</span><br><span class="line"></span><br><span class="line">sp1 use count: 1</span><br><span class="line"></span><br><span class="line">Test 2 constructed</span><br><span class="line"></span><br><span class="line">sp2 use count: 1</span><br><span class="line"></span><br><span class="line">sp1 use count after copy: 2</span><br><span class="line"></span><br><span class="line">Test 2 destructed</span><br><span class="line"></span><br><span class="line">Test 1 destructed</span><br></pre></td></tr></table></figure>

<p><strong><code>移动所有权</code></strong></p>
<blockquote>
<p> <strong>unique_ptr：</strong> 不能拷贝，但可以通过 <code>std::move</code> 转移所有权（原 <code>unique_ptr</code> 变为 <code>nullptr </code>）</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">std::unique_ptr&lt;Test&gt; up1 = std::make_unique&lt;Test&gt;(1); </span><br><span class="line">std::unique_ptr&lt;Test&gt; up2 = std::move(up1); // 转移所有权，up1变为nullptr </span><br><span class="line"> </span><br><span class="line">if (up1 == nullptr) &#123; </span><br><span class="line">    std::cout &lt;&lt; &quot;up1 is null.\n&quot;; </span><br><span class="line">&#125; </span><br><span class="line">up2-&gt;show(); // up2拥有对象所有权 </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输出：</span><br><span class="line"></span><br><span class="line">Test 1 constructed</span><br><span class="line"></span><br><span class="line">up1 is null</span><br><span class="line"></span><br><span class="line">Test 1 is alive</span><br><span class="line"></span><br><span class="line">Test 1 destructed</span><br></pre></td></tr></table></figure>

<p><strong><code>管理动态数组</code></strong></p>
<blockquote>
<p><strong>unique_ptr：</strong> 支持管理动态数组，需指定数组类型（<code>T[]</code>），此时会自动调用 <code>delete[] </code>释放内存</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">std::unique_ptr&lt;int[]&gt; up_arr = std::make_unique&lt;int[]&gt;(5); // 创建5个int的数组 </span><br><span class="line">for (int i = 0; i &lt; 5; ++i) &#123; </span><br><span class="line">    up_arr[i] = i + 1; // 像普通数组一样访问 </span><br><span class="line">    std::cout &lt;&lt; up_arr[i] &lt;&lt; &quot; &quot;; </span><br><span class="line">&#125; </span><br><span class="line">std::cout &lt;&lt; &quot;\n&quot;; </span><br><span class="line">// 超出作用域时，自动释放数组（delete[]） </span><br></pre></td></tr></table></figure>

<p><strong><code>引用计数操作</code></strong></p>
<blockquote>
<p><strong>shared_ptr：</strong><br><code>use_count()</code>：返回当前引用计数（仅用于调试，不要依赖其值做逻辑判断）<br><code>reset()</code>：重置 <code>shared_ptr</code>，引用计数减少（若指定新对象，则指向新对象）<br><code>get()</code>：返回裸指针（需谨慎使用，避免悬空指针）</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">std::shared_ptr&lt;Test&gt; sp1 = std::make_shared&lt;Test&gt;(1); </span><br><span class="line">std::shared_ptr&lt;Test&gt; sp2 = sp1; </span><br><span class="line">std::cout &lt;&lt; &quot;sp1 use count: &quot; &lt;&lt; sp1.use_count()  &lt;&lt; &quot;\n&quot;; // 2 </span><br><span class="line"> </span><br><span class="line">sp2.reset();  // sp2重置，引用计数减少到1 </span><br><span class="line">std::cout &lt;&lt; &quot;sp1 use count after reset sp2: &quot; &lt;&lt; sp1.use_count()  &lt;&lt; &quot;\n&quot;; // 1 </span><br><span class="line"> </span><br><span class="line">sp1.reset(new  Test(2)); // sp1指向新对象，原对象引用计数变为0，自动释放 </span><br><span class="line">std::cout &lt;&lt; &quot;sp1 use count after reset to new object: &quot; &lt;&lt; sp1.use_count()  &lt;&lt; &quot;\n&quot;; // 1 </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输出：</span><br><span class="line"></span><br><span class="line">Test 1 constructed</span><br><span class="line"></span><br><span class="line">sp1 use count: 2</span><br><span class="line"></span><br><span class="line">sp1 use count after reset sp2: 1 </span><br><span class="line"></span><br><span class="line">Test 1 destructed</span><br><span class="line"></span><br><span class="line">Test 2 constructed</span><br><span class="line"></span><br><span class="line">sp1 use count after reset to new object: 1</span><br><span class="line"></span><br><span class="line">Test 2 destructed</span><br></pre></td></tr></table></figure>

<p><strong><code>循环引用问题</code></strong></p>
<blockquote>
<p><strong>shared_ptr：</strong> 当两个 <code>shared_ptr</code> 互相引用时，会导致引用计数永远不为0，内存无法释放（内存泄漏）</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;memory&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line"> </span><br><span class="line">struct A &#123; </span><br><span class="line">    std::shared_ptr&lt;B&gt; b_ptr;</span><br><span class="line">    ~A() &#123; std::cout &lt;&lt; &quot;A destructed.\n&quot;; &#125; </span><br><span class="line">&#125;; </span><br><span class="line"> </span><br><span class="line">struct B &#123; </span><br><span class="line">    std::shared_ptr&lt;A&gt; a_ptr;</span><br><span class="line">    ~B() &#123; std::cout &lt;&lt; &quot;B destructed.\n&quot;; &#125; </span><br><span class="line">&#125;; </span><br><span class="line"> </span><br><span class="line">int main() &#123; </span><br><span class="line">    std::shared_ptr&lt;A&gt; a = std::make_shared&lt;A&gt;(); </span><br><span class="line">    std::shared_ptr&lt;B&gt; b = std::make_shared&lt;B&gt;(); </span><br><span class="line">    a-&gt;b_ptr = b; // A引用B</span><br><span class="line">    b-&gt;a_ptr = a; // B引用A（循环引用）</span><br><span class="line"> </span><br><span class="line">    // a和b析构时，引用计数各为1（互相引用），无法释放 </span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输出：</span><br><span class="line">（无析构输出，内存泄漏）</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>避免循环引用：</strong> 用 <code>weak_ptr</code> 代替 <code>shared_ptr</code> 来打破循环</p>
<p><strong>不要用裸指针初始化多个shared_ptr：</strong></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int* p = new int; </span><br><span class="line"></span><br><span class="line">std::shared_ptr&lt;int&gt; sp1(p); </span><br><span class="line"></span><br><span class="line">std::shared_ptr&lt;int&gt; sp2(p);</span><br><span class="line"></span><br><span class="line">会导致p被释放两次（程序崩溃）</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>优先使用make_shared：</strong> <code>make_shared</code> 比 <code>new</code> 更高效，且避免内存泄漏（例如 <code>new</code> 后构造函数抛出异常， <code>make_shared</code> 会自动回收内存</p>
</blockquote>
<p><strong><code>弱引用的智能指针</code></strong></p>
<blockquote>
<p><strong>弱引用：</strong> 指向 <code>shared_ptr</code> 管理的对象，但不增加引用计数（不影响对象的生命周期）</p>
<p><strong>解决循环引用：</strong> 当两个对象互相引用时，用 <code>weak_ptr</code> 代替其中一个 <code>shared_ptr</code> ，打破循环</p>
<p><strong>需锁定访问：</strong> 不能直接访问对象，必须通过 <code>lock()</code> 方法获取 <code>shared_ptr</code> （若对象已释放， <code>lock() </code>返回 <code>nullptr</code> ）</p>
</blockquote>
<p><code>修改上面的循环引用例子，将j结构体 B 中的 shared_ptr&lt;A&gt; 改为 weak_ptr&lt;A&gt; </code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;memory&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line"> </span><br><span class="line">struct A &#123; </span><br><span class="line">    std::shared_ptr&lt;B&gt; b_ptr;</span><br><span class="line">    ~A() &#123; std::cout &lt;&lt; &quot;A destructed.\n&quot;; &#125; </span><br><span class="line">&#125;; </span><br><span class="line"> </span><br><span class="line">struct B &#123; </span><br><span class="line">    std::weak_ptr&lt;A&gt; a_ptr; // 用weak_ptr代替shared_ptr </span><br><span class="line">    ~B() &#123; std::cout &lt;&lt; &quot;B destructed.\n&quot;; &#125; </span><br><span class="line">&#125;; </span><br><span class="line"> </span><br><span class="line">int main() &#123; </span><br><span class="line">    std::shared_ptr&lt;A&gt; a = std::make_shared&lt;A&gt;(); </span><br><span class="line">    std::shared_ptr&lt;B&gt; b = std::make_shared&lt;B&gt;(); </span><br><span class="line">    a-&gt;b_ptr = b; // A引用B（shared_ptr）</span><br><span class="line">    b-&gt;a_ptr = a; // B引用A（weak_ptr，不增加引用计数）</span><br><span class="line"> </span><br><span class="line">    // a析构时，引用计数变为0（b的a_ptr是weak_ptr，不影响），释放A； </span><br><span class="line">    // A释放后，b的引用计数变为0（a的b_ptr是shared_ptr），释放B。 </span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输出：</span><br><span class="line"></span><br><span class="line">A destructed</span><br><span class="line"></span><br><span class="line">B destructed</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>访问 weak_ptr 指向的对象：</strong> 需通过<code>lock()</code>方法获取 <code>shared_ptr</code> ，若对象已释放， <code>lock()</code> 返回 <code>nullptr</code></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">std::shared_ptr&lt;Test&gt; sp = std::make_shared&lt;Test&gt;(1); </span><br><span class="line">std::weak_ptr&lt;Test&gt; wp = sp; // 从shared_ptr构造weak_ptr </span><br><span class="line"> </span><br><span class="line">// 方式1：用lock()获取shared_ptr </span><br><span class="line">if (auto locked_sp = wp.lock())  &#123; </span><br><span class="line">    locked_sp-&gt;show(); // 访问对象 </span><br><span class="line">&#125; else &#123; </span><br><span class="line">    std::cout &lt;&lt; &quot;Object has been destructed.\n&quot;; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">// 方式2：用expired()判断对象是否已释放 </span><br><span class="line">if (!wp.expired())  &#123; </span><br><span class="line">    auto locked_sp = wp.lock();  </span><br><span class="line">    locked_sp-&gt;show(); </span><br><span class="line">&#125; else &#123; </span><br><span class="line">    std::cout &lt;&lt; &quot;Object has been destructed.\n&quot;; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">sp.reset();  // 释放对象 </span><br><span class="line">if (wp.expired())  &#123; </span><br><span class="line">    std::cout &lt;&lt; &quot;Object has been destructed.\n&quot;; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输出：</span><br><span class="line">Test 1 constructed</span><br><span class="line"></span><br><span class="line">Test 1 is alive</span><br><span class="line"></span><br><span class="line">Test 1 is alive</span><br><span class="line"></span><br><span class="line">Test 1 destructed</span><br><span class="line"></span><br><span class="line">Object has been destructed</span><br></pre></td></tr></table></figure>

<p><strong>函数</strong> </p>
<blockquote>
<p>函数包含逻辑代码，可被程序多次调用，一个完整的函数定义主要包括：返回类型、函数名、参数列表和函数体</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">返回类型 函数名(参数列表) &#123;</span><br><span class="line">    // 函数体 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>返回类型：</strong> 指定返回值的数据类型（如 <code>void</code> 表示无返回值）</p>
<p><strong>函数名称：</strong> 这是函数的实际名称。函数名和参数列表一起构成了函数签名（告知编译器）</p>
<p><strong>参数列表：</strong> 参数就像是占位符，可为空或包含多个参数，参数按值传递（拷贝副本）或引用传递（修改原始数据）</p>
<p><strong>函数体：</strong> 函数要执行的语句块，函数的主体</p>
</blockquote>
<p><strong>高级特性</strong></p>
<blockquote>
<p><strong>函数重载：</strong> 是 C++ 中编译时多态的核心机制之一，重载函数的声明和定义与普通函数类似，但需保证参数列表不同，通过不同参数列表实现同名函数，需满足参数类型、个数或顺序差异</p>
</blockquote>
<p><strong><code>1. 参数个数不同</code></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void fun() </span><br><span class="line">void fun(int a)</span><br></pre></td></tr></table></figure>

<p><strong><code>2. 参数类型不同</code></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void fun(int a) </span><br><span class="line">void fun(double a)</span><br></pre></td></tr></table></figure>

<p><strong><code>3. 参数顺序不同：</code></strong> 不同顺序中需要有不同的类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void fun(int a, double b) </span><br><span class="line">void fun(double a, int b)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void fun(int a, int b) </span><br><span class="line">void fun(int b int a)</span><br><span class="line"></span><br><span class="line">// 这种是不行的, 形参名的调换不构成重载</span><br></pre></td></tr></table></figure>

<p><code>注意：返回值类型不同不能作为函数重载的依据</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 无法重载，编译器会报错“重定义”</span><br><span class="line"></span><br><span class="line">int fun()</span><br><span class="line">void fun()</span><br></pre></td></tr></table></figure>

<p><strong><code>引用参数的特殊处理</code></strong></p>
<blockquote>
<p>当重载函数包含引用参数（ <code>int&amp;</code> 、<code>const int&amp;</code> 、<code>int&amp;&amp;</code> ）时，编译器会根据实参的左值&#x2F;右值属性匹配</p>
</blockquote>
<p><strong>1. int&amp;：</strong> 匹配可修改的左值（如变量）</p>
<p><strong>2. const int&amp;：</strong> 匹配不可修改的左值（如 <code>const</code> 变量）或右值（如表达式结果）</p>
<p><strong>3. int&amp;&amp;：</strong> 匹配右值（如临时对象、表达式结果）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void fun(int&amp; a) &#123; cout &lt;&lt; &quot;左值引用: &quot; &lt;&lt; a &lt;&lt; endl; &#125; </span><br><span class="line">void fun(const int&amp; a) &#123; cout &lt;&lt; &quot;const左值引用: &quot; &lt;&lt; a &lt;&lt; endl; &#125; </span><br><span class="line">void fun(int&amp;&amp; a) &#123; cout &lt;&lt; &quot;右值引用: &quot; &lt;&lt; a &lt;&lt; endl; &#125; </span><br><span class="line"> </span><br><span class="line">int main() &#123; </span><br><span class="line">    int a = 10;          // 左值</span><br><span class="line">    const int b = 20;    // const左值 </span><br><span class="line">    fun(a);              // 调用 fun(int&amp;) </span><br><span class="line">    fun(b);              // 调用 fun(const int&amp;) </span><br><span class="line">    fun(a + b);          // 调用 fun(int&amp;&amp;)（a+b是右值） </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输出：</span><br><span class="line"></span><br><span class="line">左值引用: 10 </span><br><span class="line"></span><br><span class="line">const左值引用: 20 </span><br><span class="line"></span><br><span class="line">右值引用: 30 </span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>函数重载仅在同一作用域内有效：</strong> </p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void fun() &#123; cout &lt;&lt; &quot;全局函数&quot; &lt;&lt; endl; &#125;  // 全局作用域</span><br><span class="line"> </span><br><span class="line">class MyClass &#123; </span><br><span class="line">public:</span><br><span class="line">    void fun() &#123; cout &lt;&lt; &quot;类成员函数&quot; &lt;&lt; endl; &#125;  // 类作用域</span><br><span class="line">&#125;; </span><br><span class="line"> </span><br><span class="line">int main() &#123; </span><br><span class="line">    fun();                // 调用全局函数 </span><br><span class="line">    MyClass obj;</span><br><span class="line">    obj.fun();             // 调用类成员函数 </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>上述代码不会报错，因为两个fun函数属于不同作用域</code></p>
<p><strong><code>默认参数</code></strong></p>
<blockquote>
<p>在声明或定义中为参数指定默认值，调用时可省略</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void display(int a = 10, int b = 20) &#123; /* ... */ &#125;</span><br><span class="line"></span><br><span class="line">display();</span><br></pre></td></tr></table></figure>

<p><strong><code>内联函数</code></strong></p>
<blockquote>
<p>使用 <code>inline</code> 关键字建议编译器展开函数体，也就是代码直接嵌入调用处，减少调用开销</p>
</blockquote>
<p><strong><code>适用于：</code></strong> （通常 ≤ 10行代码）且频繁调用（如循环内部）、类成员访问器（ <code>getter/setter</code> ）</p>
<p><strong><code>不适用于：</code></strong> 函数体含循环&#x2F;递归、代码较长（导致代码膨胀）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 正确方式：定义时加 inline 关键字（声明中加无效）</span><br><span class="line">inline int add(int a, int b) &#123;</span><br><span class="line">    return a + b;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// 类内定义自动内联（无需显式写 inline）</span><br><span class="line">class Circle &#123;</span><br><span class="line">private:</span><br><span class="line">    double radius;</span><br><span class="line">public:</span><br><span class="line">    double getArea() &#123; // 自动视为内联 </span><br><span class="line">        return 3.14 * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">// 类外定义需显式 inline </span><br><span class="line">class Circle &#123;</span><br><span class="line">public:</span><br><span class="line">    double getArea();</span><br><span class="line">&#125;;</span><br><span class="line">inline double Circle::getArea() &#123; </span><br><span class="line">    return 3.14 * radius * radius; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong><code>递归函数</code></strong></p>
<blockquote>
<p>函数直接或间接调用自身，需设置基准条件避免无限递归</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int factorial(int n) &#123; </span><br><span class="line">  return n == 1 ? 1 : n * factorial(n-1); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong><code>Lambda 函数与表达式</code></strong></p>
<blockquote>
<p>C++11 提供了对匿名函数的支持,称为 Lambda 函数(也叫 Lambda 表达式)，它们通常用于需要一个小型、临时的函数，以便在某个上下文中使用</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[capture_list](parameter_list) mutable -&gt; return_type &#123; function_body; &#125;</span><br></pre></td></tr></table></figure>

<p><strong>捕获列表 (capture_list)：</strong> 指定哪些外部变量可以被 Lambda 函数访问，以及是以值还是引用的方式访问</p>
<blockquote>
<p><strong>mutable：</strong>允许修改值捕获的副本（默认不可修改）</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int x = 10;</span><br><span class="line"></span><br><span class="line">    // 使用 mutable 关键字允许修改按值捕获的变量</span><br><span class="line">    auto lambda = [x]() mutable &#123;</span><br><span class="line">        x += 5;</span><br><span class="line">        std::cout &lt;&lt; &quot;x inside lambda: &quot; &lt;&lt; x &lt;&lt; std::endl; // 输出: x inside lambda: 15</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    lambda();</span><br><span class="line">    std::cout &lt;&lt; &quot;x outside lambda: &quot; &lt;&lt; x &lt;&lt; std::endl; // 输出: x outside lambda: 10</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong><code>常见的捕获方式包括</code></strong></p>
<blockquote>
<p><strong><code>[]</code>：</strong> 不捕获任何变量，使用未定义变量会引发错误</p>
<p><strong><code>[&amp;]</code>：</strong> 捕获所有外部变量的引用，任何被使用到的外部变量都隐式地以引用方式加以引用</p>
<p><strong><code>[=]</code>：</strong> 捕获所有外部变量的值（副本），任何被使用到的外部变量都隐式地以传值方式加以引用</p>
<p><strong><code>[a, &amp;b]</code>：</strong> 变量 a 按值捕获，变量 b 按引用捕获</p>
<p><strong><code>[=, &amp;a, &amp;b]</code>：</strong> 除 a 和 b 按引用捕获外，其他变量按值捕获</p>
<p><strong><code>[&amp;, a, b]</code>：</strong> 除 a 和 b 按值捕获外，其他变量按引用捕获</p>
<p><strong><code>[this]</code>：</strong> 捕获指向当前对象的 this 指针（访问成员变量）</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int x = 10;</span><br><span class="line">    int y = 5;</span><br><span class="line"></span><br><span class="line">    // 按值捕获 x，按引用捕获 y</span><br><span class="line">    auto lambda = [=, &amp;y]() -&gt; int &#123;</span><br><span class="line">        x += 2;</span><br><span class="line">        y += 3;</span><br><span class="line">        return x + y;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    int result = lambda();</span><br><span class="line">    std::cout &lt;&lt; &quot;Result: &quot; &lt;&lt; result &lt;&lt; std::endl; // 输出: Result: 20</span><br><span class="line">    std::cout &lt;&lt; &quot;x: &quot; &lt;&lt; x &lt;&lt; &quot;, y: &quot; &lt;&lt; y &lt;&lt; std::endl; // 输出: x: 10, y: 8</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>参数列表 (parameter_list)：</strong> Lambda 函数的参数列表，类似于普通函数</p>
<p><strong>返回类型 (return_type)：</strong> Lambda 函数的返回类型，可以省略，编译器会自动推断</p>
<p><strong>函数体 (function_body)：</strong> Lambda 函数的具体实现代码</p>
<p><strong><code>虚函数和纯虚函数</code></strong></p>
<blockquote>
<p>虚函数允许子类重写父类的方法。纯虚函数是一种没有实现的方法，要求子类必须实现</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Base &#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void display() = 0; // 纯虚函数</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Derived : public Base &#123;</span><br><span class="line">public:</span><br><span class="line">    void display() override &#123;</span><br><span class="line">        std::cout &lt;&lt; &quot;Derived class&quot; &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong><code>友元函数</code></strong></p>
<blockquote>
<p>友元函数是一种非成员函数，但可以访问其私有和受保护的成员。友元函数通过在类内部使用 <code>friend</code> 关键字声明，从而获得访问类私有成员的权限。友元函数不是类的成员函数，因此不能使用 <code>this</code> 指针</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Box &#123;</span><br><span class="line">private:</span><br><span class="line">    int width;</span><br><span class="line">public:</span><br><span class="line">    Box(int w) : width(w) &#123;&#125;</span><br><span class="line">    friend int friendGetArea(Box box);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int friendGetArea(Box box) &#123;</span><br><span class="line">    return box.width * box.width;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    Box box(5);</span><br><span class="line">    std::cout &lt;&lt; friendGetArea(box) &lt;&lt; std::endl; // 输出: Area: 25</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong><code>构造函数和拷贝构造函数</code></strong></p>
<blockquote>
<p>构造函数在创建对象时自动调用，用于初始化资源和状态。拷贝构造函数用于从现有对象复制数据到新对象</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">public:</span><br><span class="line">    A() &#123;&#125; // 构造函数</span><br><span class="line">    A(const A&amp; other) &#123;&#125; // 拷贝构造函数</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>引用</strong> </p>
<blockquote>
<p>引用是C++中的一种特殊的数据类型描述，用于在程序的不同部分使用两个以上的变量名指向同一块地址，使得对其中任何一个变量的操作实际上都是对同一地址单元进行的操作。引用的声明方式为：类型名称 <code>&amp;</code> 引用名 <code>=</code> 原名</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int a = 10;</span><br><span class="line">int&amp; b = a; // b是a的引用 </span><br><span class="line">b = 20;     // 修改b会同步修改a</span><br><span class="line">cout &lt;&lt; a; // 输出20 [3]()</span><br></pre></td></tr></table></figure>

<p><strong><code>引用的核心特点</code></strong></p>
<p><strong>1. 必须初始化：</strong> 声明时必须绑定目标变量，如 <code>int&amp; b = a</code></p>
<p><strong>2. 无独立内存空间：</strong> 引用与目标变量共享内存地址，<code>&amp;b == &amp;a</code></p>
<p><strong>3. 不可重新绑定：</strong> 一旦绑定目标变量，无法再指向其他变量</p>
<p><strong>4. 安全性优势：</strong> 不能为 <code>NULL</code>，避免空指针风险</p>
<p><strong>5. 引用作为函数参数：</strong> 使用引用传递参数能避免数据副本，提高效率，且更清晰</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void exchange(int&amp; x, int&amp; y) &#123;</span><br><span class="line">    int temp = x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int a, b;</span><br><span class="line">    cout &lt;&lt; &quot;请输入两个数字: &quot; &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    exchange(a, b);</span><br><span class="line">    cout &lt;&lt; &quot;交换后: &quot; &lt;&lt; a &lt;&lt; &quot; &quot; &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>常量</strong> </p>
<blockquote>
<p>常量是固定且不可变的值，一旦初始化，其值在程序中不可改变。常量通常使用 <code>const</code> 关键字修饰，常量的作用域与其他变量相同，可以是块作用域、函数作用域、文件作用域或命名空间作用域</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void example() &#123;</span><br><span class="line">    const int BLOCK_CONSTANT = 5; // 块作用域</span><br><span class="line">    // BLOCK_CONSTANT 只能在 example 函数内部使用</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const int GLOBAL_CONSTANT = 10; // 文件作用域</span><br><span class="line">// GLOBAL_CONSTANT 可以在整个文件中使用</span><br></pre></td></tr></table></figure>

<blockquote>
<p>常量可以是任何基本数据类型或复合数据类型，包括指针（但指针指向的内容可以被修改，除非指针本身也是指向常量的指针）</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const int* ptr; // 指针指向的值是常量</span><br><span class="line">int* const ptr2; // 指针本身是常量</span><br><span class="line">const int* const ptr3; // 指针本身和指向的值都是常量</span><br></pre></td></tr></table></figure>

<blockquote>
<p>常量引用可以初始化为左值或右值，但初始化为右值时，只能使用 <code>const T&amp;</code> 类型</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int a = 10;</span><br><span class="line">const int&amp; ref = a; // 正确</span><br><span class="line">const int&amp; ref2 = 20; // 正确</span><br><span class="line">int&amp; ref3 = 30; // 错误</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>常量函数：</strong> 通过在函数名后添加 <code>const</code> 关键字声明为常量函数，这些函数不能改变对象的值，且只能由非常量对象调用</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Example &#123;</span><br><span class="line">public:</span><br><span class="line">    int getValue() const &#123;</span><br><span class="line">        return value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">private:</span><br><span class="line">    int value;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>四、 运算符</strong></p>
<blockquote>
<p>包括算术运算符（+, -, *, &#x2F;, %）、关系运算符（&#x3D;&#x3D;, !&#x3D;, &gt;, &lt;, &gt;&#x3D;, &lt;&#x3D;）、逻辑运算符（&amp;&amp;, ||, !）等</p>
</blockquote>
<p><strong><code>算术运算符</code></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int a = 10, b = 20;</span><br><span class="line">    cout &lt;&lt; &quot;加法: &quot; &lt;&lt; a + b &lt;&lt; endl; // 输出: 30</span><br><span class="line">    cout &lt;&lt; &quot;减法: &quot; &lt;&lt; a - b &lt;&lt; endl; // 输出: -10</span><br><span class="line">    cout &lt;&lt; &quot;乘法: &quot; &lt;&lt; a * b &lt;&lt; endl; // 输出: 200</span><br><span class="line">    cout &lt;&lt; &quot;除法: &quot; &lt;&lt; b / a &lt;&lt; endl; // 输出: 2</span><br><span class="line">    cout &lt;&lt; &quot;取模: &quot; &lt;&lt; b % a &lt;&lt; endl; // 输出: 0</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong><code>关系运算符</code></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int a = 10, b = 20;</span><br><span class="line">    cout &lt;&lt; &quot;等于: &quot; &lt;&lt; (a == b) &lt;&lt; endl; // 输出: 0 (false)</span><br><span class="line">    cout &lt;&lt; &quot;不等于: &quot; &lt;&lt; (a != b) &lt;&lt; endl; // 输出: 1 (true)</span><br><span class="line">    cout &lt;&lt; &quot;大于: &quot; &lt;&lt; (a &gt; b) &lt;&lt; endl; // 输出: 0 (false)</span><br><span class="line">    cout &lt;&lt; &quot;小于: &quot; &lt;&lt; (a &lt; b) &lt;&lt; endl; // 输出: 1 (true)</span><br><span class="line">    cout &lt;&lt; &quot;大于等于: &quot; &lt;&lt; (a &gt;= b) &lt;&lt; endl; // 输出: 0 (false)</span><br><span class="line">    cout &lt;&lt; &quot;小于等于: &quot; &lt;&lt; (a &lt;= b) &lt;&lt; endl; // 输出: 1 (true)</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong><code>逻辑运算符</code></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    bool x = true, y = false;</span><br><span class="line">    cout &lt;&lt; &quot;逻辑与: &quot; &lt;&lt; (x &amp;&amp; y) &lt;&lt; endl; // 输出: 0 (false)</span><br><span class="line">    cout &lt;&lt; &quot;逻辑或: &quot; &lt;&lt; (x || y) &lt;&lt; endl; // 输出: 1 (true)</span><br><span class="line">    cout &lt;&lt; &quot;逻辑非: &quot; &lt;&lt; (!x) &lt;&lt; endl; // 输出: 0 (false)</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong><code>赋值运算符</code></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int a = 10;</span><br><span class="line">    int b = a; // 基本赋值</span><br><span class="line">    int c = 20;</span><br><span class="line">    c += a; // 加法赋值，等价于 c = c + a</span><br><span class="line">    c -= a; // 减法赋值，等价于 c = c - a</span><br><span class="line">    c *= a; // 乘法赋值，等价于 c = c * a</span><br><span class="line">    c /= a; // 除法赋值，等价于 c = c / a</span><br><span class="line">    c %= a; // 取模赋值，等价于 c = c % a</span><br><span class="line">    cout &lt;&lt; &quot;基本赋值: &quot; &lt;&lt; b &lt;&lt; endl; // 输出: 10</span><br><span class="line">    cout &lt;&lt; &quot;加法赋值: &quot; &lt;&lt; c &lt;&lt; endl; // 输出: 30</span><br><span class="line">    cout &lt;&lt; &quot;减法赋值: &quot; &lt;&lt; c &lt;&lt; endl; // 输出: 20</span><br><span class="line">    cout &lt;&lt; &quot;乘法赋值: &quot; &lt;&lt; c &lt;&lt; endl; // 输出: 200</span><br><span class="line">    cout &lt;&lt; &quot;除法赋值: &quot; &lt;&lt; c &lt;&lt; endl; // 输出: 20</span><br><span class="line">    cout &lt;&lt; &quot;取模赋值: &quot; &lt;&lt; c &lt;&lt; endl; // 输出: 0</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong><code>指针运算符</code></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int var = 20;</span><br><span class="line">    int *ptr = &amp;var; // 取地址</span><br><span class="line">    cout &lt;&lt; &quot;变量的地址: &quot; &lt;&lt; ptr &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;通过指针访问变量的值: &quot; &lt;&lt; *ptr &lt;&lt; endl; // 解引用</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong><code>位运算符</code></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int a = 60; // 二进制表示为 0011 1100</span><br><span class="line">    int b = 13; // 二进制表示为 0000 1101</span><br><span class="line">    cout &lt;&lt; &quot;按位与: &quot; &lt;&lt; (a &amp; b) &lt;&lt; endl; // 输出: 12 (二进制 0000 1100)</span><br><span class="line">    cout &lt;&lt; &quot;按位或: &quot; &lt;&lt; (a | b) &lt;&lt; endl; // 输出: 61 (二进制 0011 1101)</span><br><span class="line">    cout &lt;&lt; &quot;按位异或: &quot; &lt;&lt; (a ^ b) &lt;&lt; endl; // 输出: 49 (二进制 0011 0001)</span><br><span class="line">    cout &lt;&lt; &quot;左移: &quot; &lt;&lt; (a &lt;&lt; 2) &lt;&lt; endl; // 输出: 240 (二进制 1111 0000)</span><br><span class="line">    cout &lt;&lt; &quot;右移: &quot; &lt;&lt; (a &gt;&gt; 2) &lt;&lt; endl; // 输出: 15 (二进制 0000 1111)</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong>五、控制结构</strong></p>
<blockquote>
<p>包括 <code>if-else</code> 、<code>switch</code> 、<code>for</code> 、<code>while</code> 等循环和条件语句</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (x &gt; 0) &#123;</span><br><span class="line">    cout &lt;&lt; &quot;Positive number&quot;;</span><br><span class="line">&#125; else if (x == 0) &#123;</span><br><span class="line">    cout &lt;&lt; &quot;Zero&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    cout &lt;&lt; &quot;Negative number&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    char op;</span><br><span class="line">    float num1, num2;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; &quot;Enter operator either + or - or * or /: &quot;;</span><br><span class="line">    cin &gt;&gt; op;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; &quot;Enter two operands: &quot;;</span><br><span class="line">    cin &gt;&gt; num1 &gt;&gt; num2;</span><br><span class="line"></span><br><span class="line">    switch(op) &#123;</span><br><span class="line">        case &#x27;+&#x27;:</span><br><span class="line">            cout &lt;&lt; num1 + num2;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case &#x27;-&#x27;:</span><br><span class="line">            cout &lt;&lt; num1 - num2;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case &#x27;*&#x27;:</span><br><span class="line">            cout &lt;&lt; num1 * num2;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case &#x27;/&#x27;:</span><br><span class="line">            if(num2 != 0.0)</span><br><span class="line">                cout &lt;&lt; num1 / num2;</span><br><span class="line">            else</span><br><span class="line">                cout &lt;&lt; &quot;Divide by zero situation&quot;;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        default:</span><br><span class="line">            cout &lt;&lt; &quot;Error! operator is not correct&quot;;</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">    if (i == 5) break;</span><br><span class="line">    cout &lt;&lt; i &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int i = 0;</span><br><span class="line">while (i &lt; 10) &#123;</span><br><span class="line">    cout &lt;&lt; i &lt;&lt; &quot; &quot;;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int i = 0;</span><br><span class="line">do &#123;</span><br><span class="line">    cout &lt;&lt; i &lt;&lt; &quot; &quot;;</span><br><span class="line">    i++;</span><br><span class="line">&#125; while (i &lt; 10);</span><br></pre></td></tr></table></figure>

<h1 id="4-面向对象编程（OOP）"><a href="#4-面向对象编程（OOP）" class="headerlink" title="4. 面向对象编程（OOP）"></a>4. 面向对象编程（OOP）</h1><blockquote>
<p>C++ 是一种面向对象的编程语言，支持 <code>OOP</code> 的核心概念</p>
</blockquote>
<h3 id="1-类（Class）"><a href="#1-类（Class）" class="headerlink" title="1. 类（Class）"></a>1. 类（Class）</h3><blockquote>
<p>定义对象的蓝图，包含数据成员和成员函数</p>
</blockquote>
<h3 id="2-对象（Object）"><a href="#2-对象（Object）" class="headerlink" title="2. 对象（Object）"></a>2. 对象（Object）</h3><blockquote>
<p> 类的实例，具有类定义的属性和行为</p>
</blockquote>
<h3 id="3-封装（Encapsulation）"><a href="#3-封装（Encapsulation）" class="headerlink" title="3. 封装（Encapsulation）"></a>3. 封装（Encapsulation）</h3><blockquote>
<p> 通过访问修饰符（ <code>public</code> ,  <code>private</code> ,  <code>protected</code> ）控制类的内部成员的访问</p>
</blockquote>
<h3 id="4-继承（Inheritance）"><a href="#4-继承（Inheritance）" class="headerlink" title="4. 继承（Inheritance）"></a>4. 继承（Inheritance）</h3><blockquote>
<p> 子类可以继承父类的属性和方法，实现代码复用 </p>
</blockquote>
<h3 id="5-多态（Polymorphism）"><a href="#5-多态（Polymorphism）" class="headerlink" title="5. 多态（Polymorphism）"></a>5. 多态（Polymorphism）</h3><blockquote>
<p> 通过虚函数实现不同类对象的统一接口，提高代码的灵活性 </p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">class Rectangle &#123;</span><br><span class="line">public:</span><br><span class="line">    int width, height;</span><br><span class="line">    Rectangle(int w, int h) : width(w), height(h) &#123;&#125;</span><br><span class="line">    int area() const &#123;</span><br><span class="line">        return width * height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    Rectangle rect(5, 10);</span><br><span class="line">    std::cout &lt;&lt; &quot;Area: &quot; &lt;&lt; rect.area() &lt;&lt; std::endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>输出：Area: 50</code></p>
<h1 id="5-标准模板库（STL）"><a href="#5-标准模板库（STL）" class="headerlink" title="5. 标准模板库（STL）"></a>5. 标准模板库（STL）</h1><blockquote>
<p>C++ 的 <code>STL</code> 提供了丰富的容器、算法和迭代器，简化了开发过程 </p>
</blockquote>
<h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><blockquote>
<p>管理数据的集合，封装存储结构</p>
</blockquote>
<h3 id="常用的容器包括"><a href="#常用的容器包括" class="headerlink" title="常用的容器包括"></a>常用的容器包括</h3><blockquote>
<p><strong>向量（vector）：</strong> 动态数组，支持随机访问</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">push_back(value)：在向量末尾添加一个元素</span><br><span class="line"></span><br><span class="line">pop_back()：移除向量的最后一个元素</span><br><span class="line"></span><br><span class="line">at(index)：返回指定索引位置的元素，如果索引越界会抛出异常</span><br><span class="line"></span><br><span class="line">operator[]：返回指定索引位置的元素，不进行越界检查</span><br><span class="line"></span><br><span class="line">front()：返回向量的第一个元素</span><br><span class="line"></span><br><span class="line">back()：返回向量的最后一个元素</span><br><span class="line"></span><br><span class="line">begin()：返回指向向量第一个元素的迭代器</span><br><span class="line"></span><br><span class="line">end()：返回指向向量末尾元素后一个位置的迭代器</span><br><span class="line"></span><br><span class="line">size()：返回向量中元素的数量</span><br><span class="line"></span><br><span class="line">capacity()：返回当前向量分配的内存大小</span><br><span class="line"></span><br><span class="line">resize(new_size, value)：调整向量大小，如果新大小大于当前大小，则用指定值填充新元素；如果新大小小于当前大小，则删除多余元素</span><br><span class="line"></span><br><span class="line">reserve(new_capacity)：预先分配足够的内存空间，避免频繁的内存重新分配</span><br><span class="line"></span><br><span class="line">clear()：清空向量中的所有元素</span><br><span class="line"></span><br><span class="line">empty()：判断向量是否为空</span><br><span class="line"></span><br><span class="line">swap(other_vector)：交换两个向量的内容</span><br><span class="line"></span><br><span class="line">insert(position, value)：在指定位置插入一个元素</span><br><span class="line"></span><br><span class="line">erase(position)：删除指定位置的元素</span><br><span class="line"></span><br><span class="line">sort()：对向量中的元素进行排序</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;algorithm&gt; // for sort function</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    // 声明一个整数向量</span><br><span class="line">    vector&lt;int&gt; vec;</span><br><span class="line"></span><br><span class="line">    // 使用 push_back 添加元素</span><br><span class="line">    vec.push_back(10);</span><br><span class="line">    vec.push_back(20);</span><br><span class="line">    vec.push_back(30);</span><br><span class="line"></span><br><span class="line">    // 使用 at 访问元素</span><br><span class="line">    cout &lt;&lt; &quot;Element at index 1: &quot; &lt;&lt; vec.at(1) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    // 使用 operator[] 访问元素</span><br><span class="line">    cout &lt;&lt; &quot;Element at index 2: &quot; &lt;&lt; vec[2] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    // 使用 front 和 back 访问首尾元素</span><br><span class="line">    cout &lt;&lt; &quot;First element: &quot; &lt;&lt; vec.front() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;Last element: &quot; &lt;&lt; vec.back() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    // 使用 begin 和 end 遍历向量</span><br><span class="line">    cout &lt;&lt; &quot;Vector elements: &quot;;</span><br><span class="line">    for (auto it = vec.begin(); it != vec.end(); ++it) &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    // 使用 size 获取向量大小</span><br><span class="line">    cout &lt;&lt; &quot;Size of vector: &quot; &lt;&lt; vec.size() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    // 使用 capacity 获取向量容量</span><br><span class="line">    cout &lt;&lt; &quot;Capacity of vector: &quot; &lt;&lt; vec.capacity() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    // 使用 resize 调整向量大小</span><br><span class="line">    vec.resize(5, 0); // 调整为5个元素，新元素初始化为0</span><br><span class="line">    cout &lt;&lt; &quot;After resizing, size: &quot; &lt;&lt; vec.size() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;After resizing, elements: &quot;;</span><br><span class="line">    for (int num : vec) &#123;</span><br><span class="line">        cout &lt;&lt; num &lt;&lt; &quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    // 使用 reserve 预先分配内存</span><br><span class="line">    vec.reserve(10);</span><br><span class="line">    cout &lt;&lt; &quot;After reserving, capacity: &quot; &lt;&lt; vec.capacity() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    // 使用 clear 清空向量</span><br><span class="line">    vec.clear();</span><br><span class="line">    cout &lt;&lt; &quot;After clearing, size: &quot; &lt;&lt; vec.size() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    // 使用 empty 判断向量是否为空</span><br><span class="line">    if (vec.empty()) &#123;</span><br><span class="line">        cout &lt;&lt; &quot;Vector is empty.&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 使用 insert 插入元素</span><br><span class="line">    vec.insert(vec.begin(), 5);</span><br><span class="line">    vec.insert(vec.begin() + 1, 15);</span><br><span class="line">    cout &lt;&lt; &quot;After inserting elements, vector: &quot;;</span><br><span class="line">    for (int num : vec) &#123;</span><br><span class="line">        cout &lt;&lt; num &lt;&lt; &quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    // 使用 erase 删除元素</span><br><span class="line">    vec.erase(vec.begin() + 1);</span><br><span class="line">    cout &lt;&lt; &quot;After erasing element at index 1, vector: &quot;;</span><br><span class="line">    for (int num : vec) &#123;</span><br><span class="line">        cout &lt;&lt; num &lt;&lt; &quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    // 使用 sort 对向量进行排序</span><br><span class="line">    vector&lt;int&gt; numbers = &#123;3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5&#125;;</span><br><span class="line">    sort(numbers.begin(), numbers.end());</span><br><span class="line">    cout &lt;&lt; &quot;Sorted vector: &quot;;</span><br><span class="line">    for (int num : numbers) &#123;</span><br><span class="line">        cout &lt;&lt; num &lt;&lt; &quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>列表（list）：</strong> 双向链表，支持插入和删除操作</p>
</blockquote>
<p><strong><code>构造函数</code></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">list&lt;int&gt; a&#123;1, 2, 3&#125;;：初始化一个包含元素1, 2, 3的列表</span><br><span class="line">list&lt;int&gt; a(n);：声明一个包含n个元素的列表，每个元素都是0</span><br><span class="line">list&lt;int&gt; a(n, m);：声明一个包含n个元素的列表，每个元素都是m</span><br><span class="line">list&lt;int&gt; a(first, last);：声明一个列表，其元素的初始值来源于由区间所指定的序列中的元素，first和last是迭代器</span><br></pre></td></tr></table></figure>

<p><strong><code>插入元素</code></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">push_front(value)：将元素从前面推入列表</span><br><span class="line">push_back(value)：在列表末尾插入一个新元素</span><br><span class="line">insert(pos_iter, ele_num, ele)：在指定位置插入指定数量的元素</span><br><span class="line">emplace_front(args...)：在列表开头构造元素</span><br><span class="line">emplace_back(args...)：在列表末尾构造元素</span><br></pre></td></tr></table></figure>

<p><strong><code>删除元素</code></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pop_front()：从正面弹出或删除列表中的元素</span><br><span class="line">pop_back()：从末尾弹出或删除列表中的元素</span><br><span class="line">remove(value)：删除所有与给定值相等的元素</span><br><span class="line">remove_if(predicate)：删除所有对谓词返回true的元素</span><br><span class="line">clear()：删除列表容器的所有元素，使其大小为0</span><br></pre></td></tr></table></figure>

<p><strong><code>检查状态</code></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">empty()：检查列表容器是否为空。</span><br><span class="line">size()：返回列表中元素的数量。</span><br></pre></td></tr></table></figure>

<p><strong><code>其他操作</code></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assign(first, last)：将新内容分配给列表容器，并用新内容替换旧内容</span><br><span class="line">sort()：对列表进行排序</span><br><span class="line">reverse()：反转列表中元素的顺序</span><br><span class="line">merge(other_list)：合并两个已排序的列表</span><br><span class="line">unique()：删除连续重复的元素</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;list&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    list&lt;int&gt; mylist&#123;1, 2, 3, 4, 5&#125;;</span><br><span class="line">    mylist.push_front(6); // 在前面插入6</span><br><span class="line">    mylist.push_back(7);  // 在末尾插入7</span><br><span class="line"></span><br><span class="line">    for (auto it = mylist.begin(); it != mylist.end(); ++it)</span><br><span class="line">        cout &lt;&lt; &#x27; &#x27; &lt;&lt; *it;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>映射（map）：</strong> 键值对集合，支持快速查找，<code>map</code> 中的键必须是唯一的。如果插入一个已经存在的键，新的值不会替换原有值，而是忽略插入操作，<code>map</code> 内部会自动根据键的大小进行排序，因此遍历时元素是按顺序排列的，由于 <code>map</code> 基于红黑树实现，查找、插入和删除操作的时间复杂度为 <code>O(log n)</code>，适合需要频繁查找和修改的场景</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">插入元素：</span><br><span class="line">insert(pair&lt;const Key, T&gt; val)：插入一个键值对</span><br><span class="line">operator[]：通过键访问或插入值。如果键不存在，则插入默认值</span><br><span class="line"></span><br><span class="line">访问元素：</span><br><span class="line">operator[]：通过键访问值</span><br><span class="line">at(const Key&amp; key)：通过键访问值，如果键不存在则抛出异常</span><br><span class="line"></span><br><span class="line">查找元素：</span><br><span class="line">find(const Key&amp; key)：返回指向键为 key 的元素的迭代器，如果不存在则返回 end()</span><br><span class="line">count(const Key&amp; key)：返回键为 key 的元素数量（对于 map，返回 0 或 1）</span><br><span class="line"></span><br><span class="line">删除元素：</span><br><span class="line">erase(iterator position)：删除指定位置的元素</span><br><span class="line">erase(const Key&amp; key)：删除键为 key 的元素</span><br><span class="line">clear()：清空所有元素</span><br><span class="line"></span><br><span class="line">遍历元素：</span><br><span class="line">使用迭代器遍历，例如 for (auto it = m.begin(); it != m.end(); ++it)。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    // 创建一个 map 容器</span><br><span class="line">    map&lt;string, int&gt; ageMap;</span><br><span class="line"></span><br><span class="line">    // 添加元素</span><br><span class="line">    ageMap[&quot;Alice&quot;] = 30;</span><br><span class="line">    ageMap[&quot;Bob&quot;] = 25;</span><br><span class="line"></span><br><span class="line">    // 访问元素</span><br><span class="line">    cout &lt;&lt; &quot;Alice&#x27;s age: &quot; &lt;&lt; ageMap[&quot;Alice&quot;] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    // 遍历 map</span><br><span class="line">    for (const auto&amp; pair : ageMap) &#123;</span><br><span class="line">        cout &lt;&lt; pair.first &lt;&lt; &quot;: &quot; &lt;&lt; pair.second &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 查找元素</span><br><span class="line">    if (ageMap.count(&quot;Bob&quot;)) &#123;</span><br><span class="line">        cout &lt;&lt; &quot;Bob is in the map.&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 删除元素</span><br><span class="line">    ageMap.erase(&quot;Alice&quot;);</span><br><span class="line"></span><br><span class="line">    // 清空 map</span><br><span class="line">    ageMap.clear();</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>集合（set ）：</strong> 有序集合，支持唯一元素，集合中的元素不能重复，可以添加或删除元素，但不能修改现有元素的值，插入元素时自动排序，元素通过键引用，而非容器中的位置</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert()：用于向set中插入元素</span><br><span class="line"></span><br><span class="line">erase()：用于从set中删除元素</span><br><span class="line"></span><br><span class="line">clear()：用于清除set中的所有元素</span><br><span class="line"></span><br><span class="line">empty()：用于检查set是否为空</span><br><span class="line"></span><br><span class="line">size()：用于返回set的大小</span><br><span class="line"></span><br><span class="line">begin()：返回指向第一个元素的迭代器</span><br><span class="line"></span><br><span class="line">end()：返回指向最后一位元素的下一位的迭代器</span><br><span class="line"></span><br><span class="line">find()：查找指定元素，返回其迭代器或结束迭代器</span><br><span class="line"></span><br><span class="line">count()：统计集合中特定元素的数量</span><br><span class="line"></span><br><span class="line">lower_bound()：返回第一个大于等于给定值的值的地址</span><br><span class="line"></span><br><span class="line">upper_bound()：返回第一个大于给定值的值的地址</span><br><span class="line"></span><br><span class="line">equal_range()：返回一个pair，first为第一个大于等于目标的迭代器，second为第一个大于目标的迭代器</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    set&lt;int&gt; s;</span><br><span class="line">    s.insert(10);</span><br><span class="line">    s.insert(20);</span><br><span class="line">    s.insert(30);</span><br><span class="line"></span><br><span class="line">    // 遍历set</span><br><span class="line">    for (int a : s) &#123;</span><br><span class="line">        cout &lt;&lt; a &lt;&lt; &quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    // 检查元素是否存在</span><br><span class="line">    if (s.find(20) != s.end()) &#123;</span><br><span class="line">        cout &lt;&lt; &quot;20 exists in set&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 删除元素</span><br><span class="line">    s.erase(20);</span><br><span class="line"></span><br><span class="line">    // 检查set是否为空</span><br><span class="line">    if (!s.empty()) &#123;</span><br><span class="line">        cout &lt;&lt; &quot;Set is not empty&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 获取set的大小</span><br><span class="line">    cout &lt;&lt; &quot;Size of set: &quot; &lt;&lt; s.size() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><blockquote>
<p>提供遍历容器的统一接口，连接容器与算法，<code>begin() </code>,  <code>end() </code>, 迭代器是STL中泛化的指针，提供统一接口遍历不同容器（如 <code>vector</code>、<code>list</code> 、<code>map</code> ）的元素</p>
</blockquote>
<p><strong><code>1. 基础遍历（所有容器通用）</code></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">    vector&lt;int&gt; vec = &#123;1, 2, 3, 4&#125;;</span><br><span class="line">    // 正向遍历 </span><br><span class="line">    for (auto it = vec.begin();  it != vec.end();  ++it) &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; &quot; &quot;;  // 输出：1 2 3 4</span><br><span class="line">    &#125;</span><br><span class="line">    // C++11范围for循环（底层基于迭代器）</span><br><span class="line">    for (int val : vec) &#123;</span><br><span class="line">        cout &lt;&lt; val &lt;&lt; &quot; &quot;;  // 同上 </span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">// 范围 for 循环内部实现基于迭代器，因此在循环中不能随意增加或删除元素，否则会导致未定义行为</span><br></pre></td></tr></table></figure>

<p><strong><code>2. 反向遍历（双向/随机访问迭代器支持）</code></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">list&lt;string&gt; words = &#123;&quot;hello&quot;, &quot;world&quot;&#125;;</span><br><span class="line">for (auto rit = words.rbegin();  rit != words.rend();  ++rit) &#123;</span><br><span class="line">    cout &lt;&lt; *rit &lt;&lt; &quot; &quot;;  // 输出：world hello </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong><code>3. 插入与删除操作</code></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vector&lt;int&gt; v = &#123;10, 20, 30&#125;;</span><br><span class="line">auto it = v.begin()  + 1;</span><br><span class="line">it = v.insert(it,  15);  // 插入后v=&#123;10,15,20,30&#125;，it指向15 </span><br><span class="line">it = v.erase(it);        // 删除15，it指向20（需更新迭代器！）</span><br></pre></td></tr></table></figure>

<p><strong><code>4. 关联容器特例（set/map）</code></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set&lt;int&gt; s = &#123;5, 2, 8, 1&#125;;</span><br><span class="line">// 遍历自动排序结果：1 2 5 8</span><br><span class="line">for (auto it = s.begin();  it != s.end();  ++it) &#123;</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">// 查找操作（返回迭代器）</span><br><span class="line">auto pos = s.find(5); </span><br><span class="line">if (pos != s.end())  &#123;</span><br><span class="line">    s.erase(pos);   // 安全删除</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>vector的push_back()可能引发扩容，导致所有迭代器失效；erase()使被删元素及之后的迭代器失效</code></p>
<p><code>对vector/deque插入/删除元素后，必须重新获取迭代器。关联容器（如set）删除元素时，优先使用it = container.erase(it) 语法</code></p>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><blockquote>
<p>独立于容器的通用操作（排序、查找等），<code>sort()</code> ,  <code>find() </code>,  <code>copy()</code></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// sort(): 对容器进行排序</span><br><span class="line">sort(a.begin(), a.end()); // 默认升序排序</span><br><span class="line">sort(a.begin(), a.end(), greater&lt;&gt;()); // 使用greater对象进行降序排序</span><br><span class="line"></span><br><span class="line">// distance(): 计算两个迭代器之间的距离</span><br><span class="line">int dist = distance(a.begin(), a.end()); // 计算a的大小</span><br><span class="line"></span><br><span class="line">// copy(): 将一个范围内的元素复制到另一个范围</span><br><span class="line">vector&lt;int&gt; b(a.size());</span><br><span class="line">copy(a.begin(), a.end(), b.begin()); // 将a的内容复制到b</span><br><span class="line"></span><br><span class="line">// next_permutation(): 生成下一个排列</span><br><span class="line">sort(a.begin(), a.end()); // 先排序</span><br><span class="line">do &#123;</span><br><span class="line">    // 处理当前排列</span><br><span class="line">&#125; while (next_permutation(a.begin(), a.end())); // 生成所有排列</span><br><span class="line"></span><br><span class="line">// set_intersection(): 计算两个集合的交集</span><br><span class="line">vector&lt;int&gt; a&#123;1, 2, 3, 4, 5&#125;;</span><br><span class="line">vector&lt;int&gt; b&#123;3, 4, 5, 6, 7&#125;;</span><br><span class="line">vector&lt;int&gt; result;</span><br><span class="line">set_intersection(a.begin(), a.end(), b.begin(), b.end(), back_inserter(result)); // 计算交集</span><br></pre></td></tr></table></figure>

<h2 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h2><blockquote>
<p>函数对象是重载了 <code>operator()</code> 的类对象，可像函数一样被调用。本质是类实例，而非函数指针，实现定制化操作，谓词（如 <code>greater&lt;int&gt;</code> ），函数对象可包含成员变量，记录调用间的状态（普通函数无法做到）</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line"></span><br><span class="line">struct GreaterThan &#123;</span><br><span class="line">    bool operator()(int a, int b) const &#123;</span><br><span class="line">        return a &gt; b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    std::vector&lt;int&gt; vec = &#123;5, 3, 8, 1, 2&#125;;</span><br><span class="line">    std::sort(vec.begin(), vec.end(), GreaterThan());</span><br><span class="line">    for (int num : vec) &#123;</span><br><span class="line">        std::cout &lt;&lt; num &lt;&lt; &quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h2><blockquote>
<p>修改组件接口（如容器→栈&#x2F;队列），栈 <code>stack</code> ， 队列 <code>queue</code>， 优先队列 <code>priority_queue</code></p>
</blockquote>
<p><strong><code>栈（stack）</code></strong></p>
<blockquote>
<p>栈是一种后进先出（LIFO）的数据结构。栈适配器可以基于 deque、vector 或 list。默认情况下，栈适配器使用 deque 作为底层容器，只能从栈顶进行插入和删除操作，提供 push()、pop()、top()、empty() 和 size() 等操作</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;list&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    // 创建一个使用 list 作为基础容器的 stack 适配器</span><br><span class="line">    std::list&lt;int&gt; values&#123;1, 2, 3&#125;;</span><br><span class="line">    std::stack&lt;int, std::list&lt;int&gt;&gt; my_stack(values);</span><br><span class="line"></span><br><span class="line">    // 查看 my_stack 存储元素的个数</span><br><span class="line">    std::cout &lt;&lt; &quot;size of my_stack: &quot; &lt;&lt; my_stack.size() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    // 将 my_stack 中存储的元素依次弹栈，直到其为空</span><br><span class="line">    while (!my_stack.empty()) &#123;</span><br><span class="line">        std::cout &lt;&lt; my_stack.top() &lt;&lt; std::endl; // 输出栈顶元素</span><br><span class="line">        my_stack.pop(); // 弹出栈顶元素</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong><code>队列（queue）</code></strong></p>
<blockquote>
<p>队列是一种先进先出（FIFO）的数据结构。队列适配器默认使用 deque 作为底层容器，也可以使用 list，元素在队尾插入并在前端删除，提供 push()、pop()、front()、back()、empty() 和 size() 等操作</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    std::queue&lt;int&gt; q;</span><br><span class="line"></span><br><span class="line">    // 在队尾压入新元素</span><br><span class="line">    q.push(1);</span><br><span class="line">    q.push(2);</span><br><span class="line">    q.push(3);</span><br><span class="line"></span><br><span class="line">    // 查看队列长度</span><br><span class="line">    std::cout &lt;&lt; &quot;size of queue: &quot; &lt;&lt; q.size() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    // 将队列中的元素依次弹出，直到其为空</span><br><span class="line">    while (!q.empty()) &#123;</span><br><span class="line">        std::cout &lt;&lt; q.front() &lt;&lt; std::endl; // 输出队首元素</span><br><span class="line">        q.pop(); // 弹出队首元素</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong><code>优先队列（priority_queue）</code></strong></p>
<blockquote>
<p>优先队列是一种不遵循 FIFO 或 LIFO 原则的数据结构，元素的排序基于优先级（使用最大堆），因此具有最高优先级的元素始终位于前端。优先队列适配器默认使用 vector 作为底层容器，也可以使用 deque，元素的排序基于优先级，提供 push()、pop()、top()、empty() 和 size() 等操作，优先队列适配器不能基于 list，因为 list 不支持随机访问操作，可以自定义比较函数来实现不同的优先级规则</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">struct Node &#123;</span><br><span class="line">    int x, y;</span><br><span class="line">    Node(int a = 0, int b = 0) : x(a), y(b) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct cmp &#123;</span><br><span class="line">    bool operator()(Node a, Node b) &#123;</span><br><span class="line">        if (a.x == b.x) return a.y &gt; b.y;</span><br><span class="line">        return a.x &gt; b.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    std::priority_queue&lt;Node, std::vector&lt;Node&gt;, cmp&gt; q;</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; 10; ++i)</span><br><span class="line">        q.push(Node(rand(), rand()));</span><br><span class="line"></span><br><span class="line">    while (!q.empty()) &#123;</span><br><span class="line">        std::cout &lt;&lt; q.top().x &lt;&lt; &#x27; &#x27; &lt;&lt; q.top().y &lt;&lt; std::endl;</span><br><span class="line">        q.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分配器"><a href="#分配器" class="headerlink" title="分配器"></a>分配器</h2><blockquote>
<p>管理堆内存的对象，管理内存分配策略（默认基于 <code>new/delete</code>），<code>allocator&lt;T&gt;</code></p>
</blockquote>
<p><code>分配器提供了多种成员函数</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">allocate(size_t n)：分配n个对象所需的内存</span><br><span class="line"></span><br><span class="line">deallocate(T* p, size_t n)：释放由allocate分配的内存</span><br><span class="line"></span><br><span class="line">construct(T* p, const T&amp; val)：在已分配的内存上构造对象</span><br><span class="line"></span><br><span class="line">destroy(T* p)：销毁对象但不解分配内存</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;memory&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    std::allocator&lt;int&gt; alloc;</span><br><span class="line">    int* p = alloc.allocate(5); // 分配5个int的内存</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; 5; ++i) &#123;</span><br><span class="line">        alloc.construct(p + i, i * 10); // 构造对象</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; 5; ++i) &#123;</span><br><span class="line">        std::cout &lt;&lt; p[i] &lt;&lt; &quot; &quot;; // 输出: 0 10 20 30 40</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; 5; ++i) &#123;</span><br><span class="line">        alloc.destroy(p + i); // 销毁对象</span><br><span class="line">    &#125;</span><br><span class="line">    alloc.deallocate(p, 5); // 释放内存</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="6-文件操作"><a href="#6-文件操作" class="headerlink" title="6. 文件操作"></a>6. 文件操作</h1><blockquote>
<p>在C++中，文件 <code>I/O</code>（输入&#x2F;输出）是程序与外部世界交换信息的重要手段。它允许程序从文件中读取数据或将数据写入文件。C++标准库提供了多种文件流类来处理文件操作，文件 I&#x2F;O 操作主要通过 <code>&lt;fstream&gt; </code> 库实现</p>
</blockquote>
<h3 id="常用的文件操作包括"><a href="#常用的文件操作包括" class="headerlink" title="常用的文件操作包括"></a>常用的文件操作包括</h3><blockquote>
<p><strong>ifstream：</strong> 用于从文件读取数据，输入文件流（读操作），继承自 <code>istream</code></p>
<p><strong>ofstream：</strong> 用于将数据写入文件，输出文件流（写操作），继承自 <code>ostream</code></p>
<p><strong>fstream：</strong> 用于文件的输入输出，兼具读写功能</p>
<p><strong>打开文件：</strong> 通过构造函数或 <code>open()</code> 成员函数打开文件，并指定文件名和打开模式</p>
<p><strong>读写操作：</strong> 使用插入（&lt;&lt;）或提取（&gt;&gt;）操作符读取或写入文件中的数据</p>
<p><strong>关闭文件：</strong> 使用 <code>close()</code> 函数显式关闭文件，或者让文件 <code>I/O</code> 变量超出作用域（文件I&#x2F;O类的析构函数会自动关闭文件</p>
</blockquote>
<p><code>要在 C++ 中进行文件处理，必须在 C++ 源代码文件中包含头文件 &lt;iostream&gt; 和 &lt;fstream&gt;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;fstream&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    std::ifstream src(&quot;source.png&quot;,  std::ios::binary); // 二进制读</span><br><span class="line">    std::ofstream dest(&quot;copy.png&quot;,  std::ios::binary);  // 二进制写</span><br><span class="line"> </span><br><span class="line">    if (!src || !dest) &#123;</span><br><span class="line">        std::cerr &lt;&lt; &quot;文件打开失败！&quot; &lt;&lt; std::endl;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    // 高效逐块复制 </span><br><span class="line">    const int BUFFER_SIZE = 4096;</span><br><span class="line">    char buffer[BUFFER_SIZE];</span><br><span class="line">    while (src.read(buffer,  BUFFER_SIZE)) &#123;</span><br><span class="line">        dest.write(buffer,  src.gcount());  // 写入实际读取的字节 </span><br><span class="line">    &#125;</span><br><span class="line">    dest.write(buffer,  src.gcount());      // 写入剩余字节 </span><br><span class="line"> </span><br><span class="line">    src.close(); </span><br><span class="line">    dest.close(); </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>结果：copy.png和 source.png一样了</code></p>
<h3 id="文件打开模式"><a href="#文件打开模式" class="headerlink" title="文件打开模式"></a>文件打开模式</h3><blockquote>
<p>要从文件读取信息或者向文件写入信息之前，首先要打开文件，在C++中，文件打开模式可以通过 <code>std::ios_base</code> 类中的标志来指定</p>
</blockquote>
<blockquote>
<p><strong>ios::in：</strong> 以读取模式打开文件</p>
<p><strong>ios::out：</strong> 以写入模式打开文件</p>
<p><strong>ios::app：</strong> 以追加模式打开文件，所有新数据写入到文件的末尾</p>
<p><strong>ios::ate：</strong> 将文件指针定位到文件的末尾</p>
<p><strong>ios::binary：</strong> 以二进制模式打开文件，而不是文本模式</p>
<p><strong>ios::trunc：</strong> 如果文件已存在，则删除文件内容</p>
<p><strong>ios::nocreate：</strong> 如果文件不存在，则打开失败</p>
<p><strong>ios::noreplace：</strong> 如果文件已存在，则打开失败</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;fstream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">    ofstream outFile;</span><br><span class="line">    outFile.open(&quot;number.txt&quot;, ios::app);</span><br><span class="line">    if (!outFile.is_open())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot; problem with opening the file &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        outFile &lt;&lt; 200 &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; &quot;done writing&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    outFile.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>输出：done writing</code></p>
<h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><blockquote>
<p>读取文件时，可以使用 <code>std::ifstream</code> 类，使用 &gt;&gt; 或 <code>getline</code> 读取文件内容</p>
<p><strong>1. 包含头文件：</strong></p>
<p><code>#include &lt;fstream&gt; </code> &#x2F;&#x2F; 核心文件流库 </p>
<p><code>#include &lt;string&gt;</code>   &#x2F;&#x2F; 用于getline等操作</p>
<p><strong>2. 创建流对象：</strong> <code>std::ifstream fin; </code> &#x2F;&#x2F; <code>ifstream</code> 专用于输入（读取）</p>
<p><strong>3. 打开文件并校验：</strong></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fin.open(&quot;data.txt&quot;,  std::ios::in);  // 文本模式打开 </span><br><span class="line">if (!fin.is_open())  &#123;  // 必须检查是否成功打开 </span><br><span class="line">    std::cerr &lt;&lt; &quot;文件打开失败！&quot;;</span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>模式选项（可组合使用）：</strong> <code>std::ios::in</code>（读）、<code>std::ios::binary</code>（二进制）、<code>std::ios::ate</code>（初始定位到文件末尾）</p>
<p><strong>4. 读取数据：</strong> 四种核心读取方法</p>
<p><strong>方法 1：</strong> 运算符 &gt;&gt;（简单但有限制），<strong>适用场景：</strong> 读取无空格的数据（如数字、单词），<strong>缺陷：</strong> 忽略空格和换行，不保留原始格式</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char buffer[100];</span><br><span class="line">while (fin &gt;&gt; buffer) &#123;  // 遇空格/换行终止 </span><br><span class="line">    std::cout &lt;&lt; buffer &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>方法 2：</strong> <code>std::getline</code>（推荐按行处理），<strong>优势：</strong> 保留行内空格，内存安全（自动处理字符串内存）</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">std::string line;</span><br><span class="line">while (std::getline(fin, line)) &#123;  // 读取整行（含空格）</span><br><span class="line">    std::cout &lt;&lt; line &lt;&lt; std::endl; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>方法 3：</strong> 流对象的 <code>getline</code> 方法，<strong>注意：</strong> 需预设缓冲区大小，避免溢出</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char buffer[100];</span><br><span class="line">while (fin.getline(buffer,  100)) &#123;  // 读取到字符数组</span><br><span class="line">    std::cout &lt;&lt; buffer &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>方法 4：</strong> 逐字符读取（ <code>get()</code> ），<strong>用途：</strong> 需精细控制字符时（如解析特殊结构）<strong>缺点：</strong> 效率低，大文件不推荐</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char ch;</span><br><span class="line">while (fin.get(ch))  &#123;  // 逐个字符读取</span><br><span class="line">    std::cout &lt;&lt; ch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>特殊场景处理：二进制文件读取</strong> 必须指定 <code>std::ios::binary</code> 模式</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">std::ifstream binFile(&quot;data.bin&quot;,  std::ios::binary);</span><br><span class="line">char* data = new char[1024];</span><br><span class="line">binFile.read(data,  1024);  // 直接读取字节块</span><br><span class="line">binFile.close(); </span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>5. 关闭文件：</strong> <code>fin.close(); </code>  &#x2F;&#x2F; 显式关闭释放资源</p>
</blockquote>
<p><code>二进制模式比文本模式更快（无换行符转换）</code></p>
<h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><blockquote>
<p><strong>std::ofstream（输出文件流）：</strong> 专用于写入文件，需包含头文件 <code>&lt;fstream&gt;</code></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;fstream&gt;</span><br><span class="line">int main() &#123;</span><br><span class="line">    std::ofstream fout(&quot;data.txt&quot;);  // 创建或覆盖文件</span><br><span class="line">    if (fout.is_open())  &#123;</span><br><span class="line">        fout &lt;&lt; &quot;Hello, World!\n&quot;; // 写入文本 </span><br><span class="line">        fout.close();  // 必须关闭 </span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>std::fstream（多功能文件流）：</strong> 支持读写操作，通过模式参数控制</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">std::fstream file(&quot;data.txt&quot;,  std::ios::out | std::ios::app); // 追加模式 </span><br><span class="line">file &lt;&lt; &quot;New line\n&quot;;</span><br><span class="line">file.close();</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>写入数据方法</strong></p>
</blockquote>
<blockquote>
<p><strong>1. 文本写入：</strong> 使用 &lt;&lt; 操作符（类似 <code>cout</code> ）</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fout &lt;&lt; &quot;Integer: &quot; &lt;&lt; 42 &lt;&lt; &quot;\nFloat: &quot; &lt;&lt; 3.14;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>2. 二进制写入：</strong> 用 write() 直接写入内存数据</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int data = 100;</span><br><span class="line">fout.write(reinterpret_cast&lt;char*&gt;(&amp;data),  sizeof(data)); // 二进制写入</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>3. 格式化控制：</strong> 设置精度与宽度</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fout.precision(2);     // 保留2位小数 </span><br><span class="line">fout.width(10);        // 输出宽度10字符</span><br><span class="line">fout &lt;&lt; 3.14159;      // 输出 &quot;      3.14&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>性能优化与安全</strong></p>
</blockquote>
<blockquote>
<p><strong>1. 缓冲区管理：</strong> 默认有缓冲区，手动刷新可避免数据丢失</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fout &lt;&lt; &quot;Important data&quot;;</span><br><span class="line">fout.flush();  // 立即写入磁盘</span><br><span class="line">调整缓冲区大小（减少I/O次数）：</span><br><span class="line">char buffer[8192]; // 8KB缓冲区 </span><br><span class="line">fout.rdbuf()-&gt;pubsetbuf(buffer,  sizeof(buffer));</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>2. 错误处理：</strong> 检查文件是否成功打开</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (!fout) &#123;</span><br><span class="line">    std::cerr &lt;&lt; &quot;File open failed!&quot;;</span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>3. 线程安全：</strong> 多线程写入时需加锁（如 <code>std::mutex</code> ）</p>
</blockquote>
<p><strong>高级场景</strong></p>
<blockquote>
<p><strong>1. 追加数据</strong> </p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">std::ofstream log(&quot;log.txt&quot;,  std::ios::app);</span><br><span class="line">log &lt;&lt; &quot;Event: User login\n&quot;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>2. 大文件处理：</strong> 分块写入避免内存溢出</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">std::vector&lt;char&gt; largeData(1000000, &#x27;A&#x27;); // 1MB数据 </span><br><span class="line">fout.write(largeData.data(),  largeData.size()); </span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>3. 跨平台路径处理：</strong> 使用 <code>std::filesystem</code>（C++17起）</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;filesystem&gt;</span><br><span class="line">std::ofstream fout(std::filesystem::path(&quot;data/demo.txt&quot;)); </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;fstream&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line"> </span><br><span class="line">int main() &#123;</span><br><span class="line">    // 1. 打开文件（追加模式）</span><br><span class="line">    std::ofstream fout(&quot;output.txt&quot;,  std::ios::app);</span><br><span class="line">    if (!fout) &#123;</span><br><span class="line">        std::cerr &lt;&lt; &quot;Error opening file!&quot;;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    // 2. 写入数据 </span><br><span class="line">    fout &lt;&lt; &quot;---- New Entry ----\n&quot;;</span><br><span class="line">    fout &lt;&lt; &quot;Timestamp: &quot; &lt;&lt; time(nullptr) &lt;&lt; &quot;\n&quot;;</span><br><span class="line"> </span><br><span class="line">    // 3. 检查写入状态</span><br><span class="line">    if (fout.fail())  </span><br><span class="line">        std::cerr &lt;&lt; &quot;Write failed!&quot;;</span><br><span class="line"> </span><br><span class="line">    // 4. 关闭文件</span><br><span class="line">    fout.close(); </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="文件常见问题及解决方案"><a href="#文件常见问题及解决方案" class="headerlink" title="文件常见问题及解决方案"></a>文件常见问题及解决方案</h3><blockquote>
<p><strong>1. 检查文件是否成功打开：</strong> 使用 <code>is_open()</code> 成员函数检查文件是否成功打开，如果未成功，则采取相应措施</p>
<p><strong>2. 显式关闭文件：</strong> 尽管C++流对象在析构时会自动关闭文件，显式调用 <code>close()</code> 函数可以提高代码的清晰度和控制力</p>
<p><strong>3. 使用追加或读写模式：</strong> 如果需要在文件末尾追加内容，可以使用 <code>ios::app</code> 模式；如果需要读写同一文件，可以使用 <code>ios::in | ios::out</code> 模式</p>
<p><strong>4. 注意字符编码：</strong> 明确文件的编码格式，必要时使用第三方库处理不同编码的读写</p>
</blockquote>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>“C++”</tag>
        <tag>“入门”</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>UISearchBar详解</title>
    <url>/2017/03/11/UISearchBar%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<blockquote>
<p>今天公司的项目测试的差不多了，基本可以上架了，又有时间来分享一下最近遇到的一些问题了，公司的项目进行了大改版（应该是全改了，基本是一个新的项目了），老大决定用swift重写。之前一直在自学swift，终于这一次可以实战了。项目中搜索用的比较多，但是搜索框的样式与默认的差别太大了，所以只能自定义了。</p>
</blockquote>
<p>The UISearchBar class implements a text field control for text-based searches. The control provides a text field for entering text, a search button, a bookmark button, and a cancel button. The UISearchBar object does not actually perform any searches. You use a delegate, an object conforming to the UISearchBarDelegate protocol, to implement the actions when text is entered and buttons are clicked.</p><p>

<blockquote>
<p>以上是苹果对UISearchBar的解释，可以看见UISearchBar提供了类似UITextField的输入（其实它的组成中就有UITextField，下面会讲到），右边有搜索按钮、标签按钮、关闭按钮可供选择，搜索都是在协议UISearchBarDelegate中进行。</p>
</blockquote>
</p><p><strong>自定义外观</strong></p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/7efbcef7e9cb93c4383fe6794bdbefdf.webp?x-image-process=image/format,png" alt="默认搜索外观"></p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/226c294545fe64cc3f3f91cd71df0146.webp?x-image-process=image/format,png" alt="项目搜索外观"></p>
<blockquote>
<p>UISearchBar的层级很是复杂主要由UISearchBarBackgroud、UISearchBarTextField、<br>UINavigationButton组成，其中UISearchBarTextField就是输入框，主要是由——UISearchBarSearchFieldBackgroundView、UIButton（❌）、UIImageView（?）等组成，</p>
</blockquote>
<p><strong>获取TextField方法：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let searchFiled:UITextField = self.searchBar.value(forKey: &quot;_searchField&quot;) as! UITextField</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>这样就可以通过修改	searchFiled来修改输入样式（圆角、字体等）。</strong></p>
<blockquote>
<p>UISearchBar的直接子控件是UIVIew，其上的子控件UISearchBarBackgroud的frame与UISearchBar的bounds相等，UISearchBarTextField的高度默认为28与UISearchBar左右有8像素的固定间距，上下间距为直接子控件UIView的高度 - UISearchBarTextField的默认高度28 再除以2。因此UISearchBar的输入框始终与设置的frame不一样，不便于布局，我们可以添加一个子类继承UISearchBar，可以更改其内边距。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class MySearchBar: UISearchBar &#123;</span><br><span class="line">    </span><br><span class="line">    // 监听是否添加了该属性</span><br><span class="line">    var contentInset: UIEdgeInsets? &#123;</span><br><span class="line">        didSet &#123;</span><br><span class="line">            self.layoutSubviews()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    override func layoutSubviews() &#123;</span><br><span class="line">        super.layoutSubviews()</span><br><span class="line">        // 便利寻找</span><br><span class="line">        for view in self.subviews &#123;</span><br><span class="line">            for subview in view.subviews &#123;</span><br><span class="line">                // 判定是否是UISearchBarTextField</span><br><span class="line">                if subview.isKind(of: UITextField.classForCoder()) &#123;</span><br><span class="line">                    if let textFieldContentInset = contentInset &#123;</span><br><span class="line">                        // 修改UISearchBarTextField的布局</span><br><span class="line">                        subview.frame = CGRect(x: textFieldContentInset.left, y: textFieldContentInset.top, width: self.bounds.width - textFieldContentInset.left - textFieldContentInset.right, height: self.bounds.height - textFieldContentInset.top - textFieldContentInset.bottom)</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        // 设置UISearchBar中UISearchBarTextField的默认边距</span><br><span class="line">                        let top: CGFloat = (self.bounds.height - 28.0) / 2.0</span><br><span class="line">                        let bottom: CGFloat = top</span><br><span class="line">                        let left: CGFloat = 8.0</span><br><span class="line">                        let right: CGFloat = left</span><br><span class="line">                        contentInset = UIEdgeInsets(top: top, left: left, bottom: bottom, right: right)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>让实例化的UISearchBar继承MySearchBar，然后就可以很方便的直接控制内边距了</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">self.searchBar.contentInset = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>接下来就是处理placeholder靠左，这个就比较麻烦了，查询了一大堆办法都挺麻烦的，最后找到了一个很投机的办法：先判定手机宽度，然后在placeholder右边加上空格做成靠左的假象。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if SCREEN.WIDTH == 320 &#123;</span><br><span class="line">           self.searchBar.placeholder = &quot;搜索位置       &quot;</span><br><span class="line">       &#125;else if SCREEN.WIDTH == 373\5 &#123;</span><br><span class="line">           self.searchBar.placeholder = &quot;搜索位置                  &quot;</span><br><span class="line">       &#125;else if SCREEN.WIDTH == 414 &#123;</span><br><span class="line">           self.searchBar.placeholder = &quot;搜索位置                                 &quot;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>然后在storyboard中设置searchBar的BarStyle为Minimal就可以很方便的控制UISearchBar的外观了。<br>到这里就剩一个问题了：UISearchBar上下的两根黑线了，</p>
</blockquote>
<p><strong>去除方法：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">self.searchBar.setBackgroundImage(UIImage.init(), for: .any, barMetrics: .default)</span><br></pre></td></tr></table></figure>

<p><strong>搜索的使用</strong></p>
<blockquote>
<p>如苹果官方文档所说，与搜索相关的都是在其代理方法中完成。UISearchBar有很多的代理方法，感兴趣的可以点击进入查看</p>
</blockquote>
<p><a href="https://developer.apple.com/reference/uikit/uisearchbardelegate">UISearchBarDelegate</a>我就介绍几个常用的：</p>
<blockquote>
<p>当搜索内容变化时，执行该方法,可以实时监听输入框的变化,可以实现时实搜索。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (BOOL)searchBar:(UISearchBar *)searchBar shouldChangeTextInRange:(NSRange)range replacementText:(NSString *)textNS_AVAILABLE_IOS(3_0);                 // called before text changes</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>也行你想把搜索事件放在点击搜索以后再触发，那就选用这个方法，它就是点击搜索后的代理方法</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (void)searchBarSearchButtonClicked:(UISearchBar *)searchBar;</span><br></pre></td></tr></table></figure>

<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><blockquote>
<p>当然如果你觉得这样太麻烦了，你还可以选择用UITextField来实现UISearchBar的功能，但是最终哪一个更加的麻烦还需要试一试才知道。</p>
</blockquote>
]]></content>
      <categories>
        <category>swift</category>
      </categories>
      <tags>
        <tag>“iOS”</tag>
        <tag>“swift”</tag>
        <tag>“UISearchBar”</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter遇到的问题</title>
    <url>/2025/05/23/flutter-error/</url>
    <content><![CDATA[<blockquote>
<p><strong>1.Flutter In ios 14+,debug mode Flutter apps can only be launched from Flutter tooling。<br>原因：Debug模式下，Flutter也实现了热重载，默认编译方式为JIT而iOS 14+系统对这种编译模式做了限制，导致无法启动。</strong></p>
</blockquote>
<p>解决办法如下：用 [Xcode] 打开Flutter里面Runner工程项目，在 Build Settings 的最下方找到 User-Defined，点击 + 按钮，添加一个键为 FLUTTER_BUILD_MODE ，debug设置profile模式，release设置release 模式：<img src="https://i-blog.csdnimg.cn/img_convert/7f789a7b66202aa3d5d577d4ff7a4b51.webp?x-oss-process=image/format,png" alt="截屏2024-03-14 11.27.00.png">{target&#x3D;”_blank”}</p>
<blockquote>
<p><strong>2.将 flutter 模块 嵌入iOS工程中，编译时报错：Failed to package 。。。。flutter代码路径。。。。。Command PhaseScriptExecution failed with a nonzero exit code</strong><br><img src="https://i-blog.csdnimg.cn/img_convert/ad21f4b3e2a82eb701e1e9363f00d885.webp?x-oss-process=image/format,png" alt="截屏2024-03-14 11.28.18.png">{target&#x3D;”_blank”}</p>
</blockquote>
<p>解决办法如下：<br><strong>1.确保flutter项目代码中没有错误</strong><br><strong>2.重新构建项目：</strong><br><strong>flutter clean</strong><br><strong>2.flutter pub get（获取远程库,确定当前应用所依赖的包，并将它们保存到中央系统缓存（central system cache）中）</strong><br><strong>3.flutter run</strong></p>
<blockquote>
<p><strong>3.升级flutter：flutter upgrade –force 报错</strong><br><img src="https://i-blog.csdnimg.cn/img_convert/ed59f544c4becaac4c167e3128af66ca.webp?x-oss-process=image/format,png" alt="截屏2024-09-12 15.23.05.png">{target&#x3D;”_blank”}</p>
</blockquote>
<p>Flutter Channel版本选择<br>Flutter提供了Stable、Beta、Dev和Master四种版本，每种版本都有其特定的用途和稳定性：<br>Stable：最稳定的版本，推荐用于生产环境。<br>Beta：相对较稳定，但仍可能存在一些已知问题。<br>Dev：经过Google测试后的最新版本，包含新功能和改进。<br>Master：最新的代码主分支，更新速度非常快，几乎每天都有提交，新功能多但可能不稳定。<br>开发Flutter项目时，一般推荐使用Stable版本，以确保项目的稳定性和可靠性。如需使用某些尚未在Stable版本中支持的功能，可以考虑使用Beta或Dev版本。Master版本则更适合于那些希望尝试最新功能并愿意承受潜在不稳定性的开发者。</p>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>“Flutter”</tag>
        <tag>“Error”</tag>
      </tags>
  </entry>
  <entry>
    <title>gitHub hexo 个人博客升级版</title>
    <url>/2025/06/11/gitHub-hexo-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%8D%87%E7%BA%A7%E7%89%88/</url>
    <content><![CDATA[<blockquote>
<p>9年前自己开始学习gitHub hexo搭建个人博客，查了很多资料，最后用hexo 搭建一个个人博客，托管在gitHub上，前段时间换了一个电脑，我在新的电脑上想再发布一篇文章，才发现不行了。因为之前只在GitHub托管了hexo生成的静态文件(public)，忘记备份Hexo的源文件。<br>source&#x2F;_posts&#x2F;（所有文章）<br>_config.yml（Hexo 主配置）<br>themes&#x2F;（主题文件）<br>package.json（依赖列表）<br>如果你遇到这种情况，跟着我进入接下来的重新部署过程。</p>
</blockquote>
<p><a href="https://www.jianshu.com/p/e0619df8f245">gitHub hexo 个人博客基础版</a>。</p>
<h3 id="首先确认你本地已经不存在source-x2F-posts文件夹，再查一查github是否有备份，如何远程和本地都没有，那就只能重新部署了。"><a href="#首先确认你本地已经不存在source-x2F-posts文件夹，再查一查github是否有备份，如何远程和本地都没有，那就只能重新部署了。" class="headerlink" title="首先确认你本地已经不存在source&#x2F;_posts文件夹，再查一查github是否有备份，如何远程和本地都没有，那就只能重新部署了。"></a>首先确认你本地已经不存在source&#x2F;_posts文件夹，再查一查github是否有备份，如何远程和本地都没有，那就只能重新部署了。</h3><blockquote>
<p>1.静态文件（如 public&#x2F; 下的 HTML）可通过浏览器右键「查看页面源代码」复制正文，或使用工具解析 HTML 结构。</p>
</blockquote>
<blockquote>
<p>2.使用 Markdown 渲染，HTML 中的 “article ”标签内通常包含原始文本的转换结果。</p>
</blockquote>
<blockquote>
<p>3.生成.md文件放在_posts文件夹里面。</p>
</blockquote>
<h1 id="1-备份Hexo的源文件"><a href="#1-备份Hexo的源文件" class="headerlink" title="1.备份Hexo的源文件"></a>1.备份Hexo的源文件</h1><p><strong>到这里就可以重新发布文章了，但是为了下一次不要再出现这种情况，我们需要对Hexo的源文件进行备份。</strong></p>
<p><strong>备份方式共有两种：</strong></p>
<blockquote>
<p>1.在当前gitHub管理的hexo生成的静态文件仓库中再开一个分支，用于备份Hexo的源文件。</p>
</blockquote>
<blockquote>
<p>2.单独创建一个私有仓库用于备份Hexo的源文件。</p>
</blockquote>
<p><em>因为博客需要对外展示，所以当前gitHub管理的hexo生成的静态文件仓库必须是公开的，所以如果你选择第一种方式你的原文件也只能放在公开的仓库分支。如果不想将自己的Hexo的源文件公开就可以选择第二种方式：单独创建一个私有的仓库用来备份Hexo的源文件。</em></p>
<h1 id="2-自动化"><a href="#2-自动化" class="headerlink" title="2.自动化"></a>2.自动化</h1><blockquote>
<p>上文创建完成后每次发布博客，都需要去git提交备份文件，这样太麻烦了。我们可以创建一个自动化脚本，将这些重复步骤自动化。</p>
</blockquote>
<p><strong>创建一个deploy.sh放在博客根目录：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 设置绝对路径</span><br><span class="line">BLOG_DIR=&quot;实际路径/blog&quot;</span><br><span class="line"></span><br><span class="line"># 进入博客目录</span><br><span class="line">cd &quot;$BLOG_DIR&quot; || exit 1</span><br><span class="line"></span><br><span class="line"># Hexo操作</span><br><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br><span class="line"></span><br><span class="line"># 源文件备份</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;自动备份: $(date +&quot;%Y-%m-%d %H:%M&quot;)&quot;</span><br><span class="line">git push origin main</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这样一个简单的发布博客并且源文件备份的自动化脚本就好了。<br>以后每一次写完文章后再在终端进入”实际路径&#x2F;blog” 执行.&#x2F;deploy.sh 就行了</p>
</blockquote>
<p><img src="https://upload-images.jianshu.io/upload_images/1976231-be565414c227becd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="执行./deploy.sh"></p>
<p><strong>首次执行需要先设置执行权限：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x deploy.sh</span><br></pre></td></tr></table></figure>

<h1 id="3-多博客自动化"><a href="#3-多博客自动化" class="headerlink" title="3.多博客自动化"></a>3.多博客自动化</h1><blockquote>
<p>当我们有多个博客需要同步是就需要对Hexo的源文件进行再次修改。</p>
</blockquote>
<p>我以github为例：</p>
<p><strong>1.首先我们的有两个GitHub账号并且本地配置好SSH</strong></p>
<p><img src="https://upload-images.jianshu.io/upload_images/1976231-4b672d531de2e4be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="本地SSH配置"></p>
<p><strong>2.添加配置文件</strong></p>
<h3 id="config-yml：为其中一个GitHub账号的配置"><a href="#config-yml：为其中一个GitHub账号的配置" class="headerlink" title="_config.yml：为其中一个GitHub账号的配置"></a>_config.yml：为其中一个GitHub账号的配置</h3><blockquote>
<p>url: <a href="https://gavincarter1991.github.io/#">https://gavincarter1991.github.io#</a> 博客完整URL</p>
<p>source_dir: source  # 这个值会被脚本覆盖，但需要存在</p>
<p>public_dir: public_kind</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/1976231-d4cc0887e0a1f1c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="deploy"></p>
</blockquote>
<h3 id="config-other-yml：为另外一个GitHub账号的配置"><a href="#config-other-yml：为另外一个GitHub账号的配置" class="headerlink" title="_config_other.yml：为另外一个GitHub账号的配置"></a>_config_other.yml：为另外一个GitHub账号的配置</h3><blockquote>
<p>url: <a href="https://kindyourself.github.io/">https://kindyourself.github.io</a> # 博客完整URL</p>
<p>source_dir:  &#x2F;Users&#x2F;dianyin&#x2F;Desktop&#x2F;blog&#x2F;temp_source_gavin</p>
<p>public_dir: public_gavin</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/1976231-e88ac014d9ccf8ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="deploy"></p>
</blockquote>
<p>考虑到多个博客内容可能不一样：在根目录新建一个scripts文件夹创建一个JS脚本multi-site.js进行内容配置，公共文章放在source&#x2F;_posts，不同的文章各自放在自己的目录里面（source&#x2F;_posts_gavin  source&#x2F;_posts_gavin _posts_kind）脚本会分开发布。</p>
<p><strong>multi-site.js 内容：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const fs = require(&#x27;fs-extra&#x27;);</span><br><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">const &#123; promisify &#125; = require(&#x27;util&#x27;);</span><br><span class="line">const exec = promisify(require(&#x27;child_process&#x27;).exec);</span><br><span class="line"></span><br><span class="line">hexo.extend.filter.register(&#x27;before_generate&#x27;, async function() &#123;</span><br><span class="line">  const baseDir = hexo.base_dir;</span><br><span class="line">  const currentSite = process.env.HEXO_SITE || &#x27;kind&#x27;;</span><br><span class="line">  </span><br><span class="line">  const sites = &#123;</span><br><span class="line">    kind: &#123;</span><br><span class="line">      exclusiveDir: &#x27;source/_posts_kind&#x27;,</span><br><span class="line">      commonDir: &#x27;source/_posts&#x27;,</span><br><span class="line">      output: &#x27;public_kind&#x27;,</span><br><span class="line">      config: &#x27;_config.yml&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    gavin: &#123;</span><br><span class="line">      exclusiveDir: &#x27;source/_posts_gavin&#x27;,</span><br><span class="line">      commonDir: &#x27;source/_posts&#x27;,</span><br><span class="line">      output: &#x27;public_gavin&#x27;,</span><br><span class="line">      config: &#x27;_config_gavin.yml&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  const site = sites[currentSite];</span><br><span class="line">  if (!site) return;</span><br><span class="line">  </span><br><span class="line">  // 创建临时源目录</span><br><span class="line">  const tempSourceDir = path.join(baseDir, `temp_source_$&#123;currentSite&#125;`);</span><br><span class="line">  fs.ensureDirSync(tempSourceDir);</span><br><span class="line">  fs.emptyDirSync(tempSourceDir);</span><br><span class="line">  </span><br><span class="line">  // 1. 复制整个source目录（包括所有共享文件）</span><br><span class="line">  fs.copySync(path.join(baseDir, &#x27;source&#x27;), tempSourceDir);</span><br><span class="line">  </span><br><span class="line">  // 2. 清空临时源目录的_posts文件夹</span><br><span class="line">  const tempPostsDir = path.join(tempSourceDir, &#x27;_posts&#x27;);</span><br><span class="line">  fs.ensureDirSync(tempPostsDir);</span><br><span class="line">  fs.emptyDirSync(tempPostsDir);</span><br><span class="line">  </span><br><span class="line">  // 3. 复制共同文章</span><br><span class="line">  const commonPosts = path.join(baseDir, site.commonDir);</span><br><span class="line">  if (fs.existsSync(commonPosts)) &#123;</span><br><span class="line">    fs.readdirSync(commonPosts).forEach(file =&gt; &#123;</span><br><span class="line">      if (file.endsWith(&#x27;.md&#x27;)) &#123;</span><br><span class="line">        fs.copySync(</span><br><span class="line">          path.join(commonPosts, file),</span><br><span class="line">          path.join(tempPostsDir, file)</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  // 4. 复制专属文章</span><br><span class="line">  const exclusivePosts = path.join(baseDir, site.exclusiveDir);</span><br><span class="line">  if (fs.existsSync(exclusivePosts)) &#123;</span><br><span class="line">    fs.readdirSync(exclusivePosts).forEach(file =&gt; &#123;</span><br><span class="line">      if (file.endsWith(&#x27;.md&#x27;)) &#123;</span><br><span class="line">        fs.copySync(</span><br><span class="line">          path.join(exclusivePosts, file),</span><br><span class="line">          path.join(tempPostsDir, file)</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  // 5. 动态应用配置</span><br><span class="line">  hexo.config.source_dir = tempSourceDir;</span><br><span class="line">  hexo.config.public_dir = site.output;</span><br><span class="line">  </span><br><span class="line">  // 6. 验证复制结果</span><br><span class="line">  const postCount = fs.readdirSync(tempPostsDir).length;</span><br><span class="line">  hexo.log.info(`✅ $&#123;currentSite&#125; 站点准备完成: $&#123;postCount&#125; 篇文章`);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 添加部署后清理钩子</span><br><span class="line">hexo.extend.filter.register(&#x27;after_deploy&#x27;, function() &#123;</span><br><span class="line">  const baseDir = hexo.base_dir;</span><br><span class="line">  const currentSite = process.env.HEXO_SITE;</span><br><span class="line">  </span><br><span class="line">  if (currentSite) &#123;</span><br><span class="line">    const tempSourceDir = path.join(baseDir, `temp_source_$&#123;currentSite&#125;`);</span><br><span class="line">    if (fs.existsSync(tempSourceDir)) &#123;</span><br><span class="line">      fs.removeSync(tempSourceDir);</span><br><span class="line">      hexo.log.info(`🧹 清理临时目录: $&#123;tempSourceDir&#125;`);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>当然deploy.sh也需要更改为：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env bash</span><br><span class="line"></span><br><span class="line"># 配置区</span><br><span class="line">BLOG_DIR=&quot;/Users/dianyin/Desktop/blog&quot;</span><br><span class="line">SOURCE_BRANCH=&quot;master&quot;</span><br><span class="line">PRIVATE_REPO_KIND=&quot;git@github.com-kind:kindyourself/blog-source.git&quot;</span><br><span class="line">PRIVATE_REPO_GAVIN=&quot;git@github.com-gavin:gavincarter1991/blog-source.git&quot;</span><br><span class="line"></span><br><span class="line">cd &quot;$BLOG_DIR&quot; || &#123; echo &quot;❌ 无法进入博客目录&quot;; exit 1; &#125;</span><br><span class="line"></span><br><span class="line"># 清理上次生成的临时文件</span><br><span class="line">rm -rf temp_source_* public*</span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line"># 生成 Kind 站点</span><br><span class="line">echo &quot;===== 🚀 生成 Kind 站点 =====&quot;</span><br><span class="line">export HEXO_SITE=&quot;kind&quot;</span><br><span class="line">hexo generate --config _config.yml</span><br><span class="line"></span><br><span class="line"># 验证生成结果</span><br><span class="line">echo &quot;Kind 站点内容:&quot;</span><br><span class="line">ls -lh public_kind</span><br><span class="line">tree -L 2 public_kind | head -20</span><br><span class="line"></span><br><span class="line"># 生成 Gavin 站点</span><br><span class="line">echo &quot;===== 🚀 生成 Gavin 站点 =====&quot;</span><br><span class="line">export HEXO_SITE=&quot;gavin&quot;</span><br><span class="line">hexo generate --config _config_gavin.yml</span><br><span class="line"></span><br><span class="line"># 验证生成结果</span><br><span class="line">echo &quot;Gavin 站点内容:&quot;</span><br><span class="line">ls -lh public_gavin</span><br><span class="line">tree -L 2 public_gavin | head -20</span><br><span class="line"></span><br><span class="line"># 部署到GitHub Pages</span><br><span class="line">echo &quot;===== 🚀 部署到 GitHub Pages =====&quot;</span><br><span class="line">echo &quot;部署 Kind 站点...&quot;</span><br><span class="line">export HEXO_SITE=&quot;kind&quot;</span><br><span class="line">hexo deploy --config _config.yml</span><br><span class="line"></span><br><span class="line">echo &quot;部署 Gavin 站点...&quot;</span><br><span class="line">export HEXO_SITE=&quot;gavin&quot;</span><br><span class="line">hexo deploy --config _config_gavin.yml</span><br><span class="line"></span><br><span class="line"># 备份到私有仓库</span><br><span class="line">echo &quot;===== 📦 备份源文件到私有仓库 =====&quot;</span><br><span class="line">git add .</span><br><span class="line">if git diff-index --quiet HEAD --; then</span><br><span class="line">    echo &quot;🔄 无文件变更&quot;</span><br><span class="line">else</span><br><span class="line">    git commit -m &quot;自动备份: $(date +&quot;%Y-%m-%d %H:%M:%S&quot;)&quot;</span><br><span class="line">    </span><br><span class="line">    # 推送到两个私有仓库</span><br><span class="line">    git push &quot;$PRIVATE_REPO_KIND&quot; &quot;$SOURCE_BRANCH&quot; &amp;&amp; \</span><br><span class="line">        echo &quot;✅ kindyourself/blog-source 备份成功&quot; || \</span><br><span class="line">        echo &quot;❌ kindyourself/blog-source 备份失败&quot;</span><br><span class="line">    </span><br><span class="line">    git push &quot;$PRIVATE_REPO_GAVIN&quot; &quot;$SOURCE_BRANCH&quot; &amp;&amp; \</span><br><span class="line">        echo &quot;✅ gavincarter1991/blog-source 备份成功&quot; || \</span><br><span class="line">        echo &quot;❌ gavincarter1991/blog-source 备份失败&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo &quot;===== ✅ 部署完成 =====&quot;</span><br><span class="line">echo &quot;博客地址1: https://kindyourself.github.io&quot;</span><br><span class="line">echo &quot;博客地址2: https://gavincarter1991.github.io&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>以上就是gitHub hexo 个人博客升级版</strong></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>“Hexo”</tag>
        <tag>“github&quot;</tag>
        <tag>“博客&quot;</tag>
      </tags>
  </entry>
  <entry>
    <title>gitHub hexo 个人博客</title>
    <url>/2016/07/16/gitHub-hexo-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<blockquote>
<p>一直以来就想搭建一个自己的博客，不想其它网站那么杂乱，需要一个纯粹的记录成长之路的地方。查了很多资料，最后决定用hexo 搭建一个静态网页，托管在gitHub上。下面我就介绍一下我的搭建之路，<a href="https://gavincarter1991.github.io/">我的搭建网页</a>。</p>
</blockquote>
<h3 id="1-gitHub"><a href="#1-gitHub" class="headerlink" title="1. gitHub"></a>1. gitHub</h3><p>gitHub 的注册及配置我就不介绍了，这个哪里都可以查到，我介绍一下注册过后远程仓库的创建。<br>首先创建远程仓库：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/ea1e5de3d83fcb9ca8c0eb0e11086ab3.webp?x-image-process=image/format,png" alt="屏幕快照 2016-07-16 02.49.16.png"><br>在后面的Respository name 里面输入：gavincarter1991.github.io 这个格式是定的（gavincarter1991 需要填写你的用户名）我没有测试过如果不填写自己用户名的后果，不过查了很多资料都推荐这样填写，有的还是不以这样的方式会报错，没有实践，我没有发言权。<br><img src="https://i-blog.csdnimg.cn/blog_migrate/c44f6c8a7f4544c550f966f205dd7848.webp?x-image-process=image/format,png" alt="屏幕快照 2016-07-16 02.49.37.png"></p>
<h3 id="2-homebrew安装"><a href="#2-homebrew安装" class="headerlink" title="2. homebrew安装"></a>2. homebrew安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure>
<p>查看安装是否成功：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm -v</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>安装成功会显示版本号：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/257560df666479d7a2171dd37c11a68b.webp?x-image-process=image/format,png" alt="屏幕快照 2016-07-16 03.09.16.png"></p>
<h3 id="3-开始安装hexo"><a href="#3-开始安装hexo" class="headerlink" title="3. 开始安装hexo"></a>3. 开始安装hexo</h3><p>首先进入你需要存放博客的文件夹，然后：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo -g</span><br></pre></td></tr></table></figure>

<p>查看版本号：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure>
<p>初始化项目：(类似于git)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<h3 id="4-开始使用"><a href="#4-开始使用" class="headerlink" title="4. 开始使用"></a>4. 开始使用</h3><p>创建页面：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new post &quot;My First Blog&quot;</span><br></pre></td></tr></table></figure>
<p>生成静态文件(会在当前目录下生成一个新的叫做public的文件夹)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g # 或者hexo generate</span><br></pre></td></tr></table></figure>
<p>开启本地服务 用于在本地浏览 Ctrl+C退出查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s # 或者hexo server，可以在输入http://localhost:4000/ 查看 或者 按住Command 双击命令行下的网址（http://localhost:4000/）</span><br></pre></td></tr></table></figure>
<p>这时网页已经成型了。</p>
<p>接下来就是要部署到gitHub上 只需要在配置文件_config.xml中作如下修改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:gavincarter1991/gavincarter1991.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>当然gavincarter1991位置还是填你的信息</p>
<p>然后安装一个自动工具，方便以后页面的部署：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>部署去gitHub：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>以后每一次部署的一般步骤：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<h3 id="5-写文章"><a href="#5-写文章" class="headerlink" title="5.写文章"></a>5.写文章</h3><p>首先；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new post &quot;My First Blog&quot;</span><br></pre></td></tr></table></figure>
<p>然后去目录：source_posts下找到My First Blog.md（markdown文件）开始编辑文章了。我Mac用的是Mou编辑器，你可以自由选择适合自己的markdown编辑器。<a href="https://wizardforcel.gitbooks.io/markdown-simple-world/content/0.html">这里有markdown使用技巧</a><br>写好以后就可以按照前面的部署常用步骤进行部署了。</p>
<h3 id="6-其他"><a href="#6-其他" class="headerlink" title="6. 其他"></a>6. 其他</h3><p>1.主题：hexo有很多<a href="https://github.com/hexojs/hexo/wiki/Themes">第三方主题</a>可以选择，通过git clone<br>2.配置修改参数<a href="http://div.io/topic/1691">详见</a> 我写几个常用的：<br>头像：把图片放在主题内 source&#x2F;images&#x2F;，图片链接地址可以填 &#x2F;images&#x2F;avatar.png  然后在当前主题的_config.yml 不是根目录的_config.yml（如果你换了主题，需要根据自己选择的主题进入里面去设置）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line"># in theme directory(source/images): /images/avatar.jpg</span><br><span class="line"># in site  directory(source/uploads): /uploads/avatar.jpg</span><br><span class="line">avatar: /images/avatar.jpg</span><br></pre></td></tr></table></figure>
<p>个人中心配置：（根目录的_config.yml）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Gavin</span><br><span class="line">subtitle: 记录成长过程中的点点滴滴</span><br><span class="line">description: 我爱敏敏</span><br><span class="line">author: kindyourself@163.com</span><br><span class="line">language: zh-Hans</span><br><span class="line">timezone:</span><br></pre></td></tr></table></figure>
<p>显示标签与分类：取消对应注释</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash (/archives -&gt; archives)</span><br><span class="line">menu:</span><br><span class="line">  home: /</span><br><span class="line">  categories: /categories</span><br><span class="line">  #about: /about</span><br><span class="line">  archives: /archives</span><br><span class="line">  tags: /tags</span><br><span class="line">  #commonweal: /404.html</span><br></pre></td></tr></table></figure>
<p>然后创建分类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;categories&quot;</span><br></pre></td></tr></table></figure>
<p>在&#x2F;source&#x2F;categories下有个index.md 按照如下填写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2016-07-16 02:21:37</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>以后在写文章的时候加上分类就会自动创建分类了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">layout: &#x27;[layout]&#x27;</span><br><span class="line">title: iOS-自定义带抽屉效果的tabBar</span><br><span class="line">date: 2016-07-12 23:19:35</span><br><span class="line">tags: [自定义，抽屉，tabBar]</span><br><span class="line">categories: &quot;iOS&quot; // 分类</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>创建标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;tags&quot;</span><br></pre></td></tr></table></figure>
<p>在&#x2F;source&#x2F;tags下有个index.md 按照如下填写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: All tags</span><br><span class="line">date: 2016-07-16 02:11:12</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>以后在写文章的时候加上标签就会自动计入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">layout: &#x27;[layout]&#x27;</span><br><span class="line">title: iOS-自定义带抽屉效果的tabBar</span><br><span class="line">date: 2016-07-12 23:19:35</span><br><span class="line">tags: [自定义，抽屉，tabBar] // 标签</span><br><span class="line">categories: &quot;iOS&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>下载主题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<h3 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h3><blockquote>
<p>这个在网上还有很多很详细的教程，这是我的大致操作流程。感觉这个可以很简单，就是少去动原生的。如果你想要去捣鼓会发现还是有很多可以捣鼓的，因为他有很多的参数可以配置。我只是配置了一下我觉得在我看来重要的。有兴趣的朋友可以去捣鼓捣鼓。-太晚了，都4点了，睡觉去</p>
</blockquote>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>“hexo”</tag>
        <tag>“个人博客”</tag>
        <tag>“gitHub”</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS-SM3加密算法N种集成</title>
    <url>/2025/06/13/iOS-SM3%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95N%E7%A7%8D%E9%9B%86%E6%88%90/</url>
    <content><![CDATA[<p>近期的一个项目需要用到SM3加密算法，需要在iOS中使用Objective-C实现SM3国密加密算法。</p>
<blockquote>
<p>SM3：是中国国家密码管理局发布的密码杂凑算法标准，适用于商用密码应用中的数字签名和验证、消息认证码的生成与验证以及随机数的生成等</p>
<p>由于iOS系统并未内置SM3算法，我们需要使用第三方开源库或自己实现</p>
<p><strong><a href="https://github.com/muzipiao/GMObjC">GMObjC</a>库：</strong> 是一个基于 OpenSSL 的国密（SM2、SM3、SM4）算法的 Objective-C 开源库，适用于 iOS 和 macOS 开发。它封装了中国国家密码管理局发布的多种加密算法，包括：</p>
</blockquote>
<blockquote>
<p><strong>1. SM2：</strong> 支持基于椭圆曲线（ECC）的加解密，密钥协商（ECDH）和签名算法</p>
<p><strong>2. SM3：</strong> 类似 SHA 系列的国密哈希算法，包含 SM3 和 HMAC 等</p>
<p><strong>3. SM4：</strong> 实现对称分组加密算法</p>
<p><strong><a href="https://github.com/guanzhi/GmSSL#">GmSSL</a>库：</strong>GmSSL是由北京大学自主开发的国产商用密码开源库，实现了对国密算法、标准和安全通信协议的全面功能覆盖，支持包括移动端在内的主流操作系统和处理器，支持密码钥匙、密码卡等典型国产密码硬件，提供功能丰富的命令行工具及多种编译语言编程接口</p>
</blockquote>
<h2 id="方案一：使用第三方库（GMObjC）"><a href="#方案一：使用第三方库（GMObjC）" class="headerlink" title="方案一：使用第三方库（GMObjC）"></a>方案一：使用第三方库（GMObjC）</h2><p>集成GMObjC：<a href="https://muzipiao.github.io/gmdocs/zh/guide/getting-started">集成GMObjC方法</a></p>
<p>因为我们的项目是SDK不便用CocoaPods方法，因此我只能选择直接集成和手动编译为 Framework。</p>
<h3 id="1-直接集成-demo"><a href="#1-直接集成-demo" class="headerlink" title="1.直接集成 (demo)"></a>1.直接集成 (<a href="https://github.com/GavinCarter1991/sm3-demo/tree/GMObjC%EF%BC%88%E7%9B%B4%E6%8E%A5%E9%9B%86%E6%88%90%EF%BC%89">demo</a>)</h3><blockquote>
<p>1.从 Git 下载最新代码，找到和 README 同级的 GMObjC 文件夹，将 GMObjC 文件夹拖入项目</p>
<p>2.找到和 README 同级的 Frameworks 文件夹，将项目 Frameworks&#x2F;OpenSSL.xcframework 拖入项目</p>
<p>3.在需要使用的地方导入头文件 GMObjC.h 即可使用 SM2、SM4 加解密，签名验签，计算 SM3 摘要等</p>
</blockquote>
<p><strong>注意事项</strong></p>
<p><code> GMObjC 依赖 OpenSSL，可直接拖入 Frameworks/OpenSSL.xcframework 或通过pod GMOpenSSL安装 OpenSSL。</code></p>
<p><code> 如果项目中已集成 OpenSSL 1.1.1l 以上版本，可共用同一个 OpenSSL；否则需要使用 Carthage 将 GMObjC 编译为动态库。</code></p>
<p><strong>我按照以上步骤将文件导入后报错：</strong><br>OpenSSL.xcframework 签名验证失败</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1976231-53feb7bc56f237bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="OpenSSL.xcframework报错"></p>
<p><strong>终端执行强制重签名命令</strong></p>
<p>codesign –force –deep –sign - 你的路径&#x2F;OpenSSL.xcframework</p>
<p>返回：你的路径&#x2F;OpenSSL.xcframework: replacing existing signature</p>
<p>现在就可以运行测试了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#import &quot;GMObjC.h&quot;</span><br><span class="line"></span><br><span class="line">NSString *str = @&quot;123@1234&quot;;</span><br><span class="line">NSString *digest = [GMSm3Utils hashWithText:str];</span><br><span class="line">NSLog(@&quot;%@&quot;, digest);</span><br></pre></td></tr></table></figure>

<h3 id="2-手动编译为-Framework-demo"><a href="#2-手动编译为-Framework-demo" class="headerlink" title="2.手动编译为 Framework (demo)"></a>2.手动编译为 Framework (<a href="https://github.com/GavinCarter1991/sm3-demo/tree/GMObjC-Framework%EF%BC%88%E6%89%8B%E5%8A%A8%E7%BC%96%E8%AF%91%EF%BC%89">demo</a>)</h3><p>1.<strong>动态库‌：</strong></p>
<blockquote>
<p>从 GitHub 下载源码，打开项目GMObjC-master&#x2F;Frameworks&#x2F;GMObjC.xcframework把这个拖入项目</p>
<p>在 Xcode 的 General → Frameworks, Libraries, and Embedded Content 中需标记为 Embed &amp; Sign</p>
</blockquote>
<p><img src="https://upload-images.jianshu.io/upload_images/1976231-30c18fc5528e087b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Embed &amp; Sign"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#import &quot;GMObjC/GMObjC.h&quot;</span><br><span class="line"></span><br><span class="line">NSString *digest1 = [GMSm3Utils hashWithText:str];</span><br><span class="line">NSLog(@&quot;%@&quot;, digest1);</span><br></pre></td></tr></table></figure>

<p>2.<strong>静态库：</strong></p>
<blockquote>
<p>从 GitHub 下载源码，打开项目 GMObjC.xcodeproj，设置 Build Settings - Linking-General - Mach-O Type 为 Static Library</p>
<p>手动编译为静态库 GMObjC.framework</p>
<p><strong>合并为 XCFramework：</strong>通过xcodebuild -create-xcframework命令来合并为 XCFramework，通过合并 GMObjC 库的模拟器和真机版本来演示</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建合并包 GMObjC.xcframework</span><br><span class="line"></span><br><span class="line">xcodebuild -create-xcframework \</span><br><span class="line">           -framework Release-iphoneos/GMObjC.framework \</span><br><span class="line">           -framework Release-iphonesimulator/GMObjC.framework \</span><br><span class="line">           -output GMObjC.xcframework</span><br></pre></td></tr></table></figure>
<p><strong>把生成的GMObjC.xcframework拖入项目即可</strong></p>
<h3 id="3-CocoaPods安装GMObjC-GMObjC-demo-GMDynamic-demo"><a href="#3-CocoaPods安装GMObjC-GMObjC-demo-GMDynamic-demo" class="headerlink" title="3.CocoaPods安装GMObjC  (GMObjC-demo) (GMDynamic-demo)"></a>3.CocoaPods安装GMObjC  (<a href="https://github.com/GavinCarter1991/sm3-demo/tree/GMObjC-CocoaPods">GMObjC-demo</a>) (<a href="https://github.com/GavinCarter1991/sm3-demo/tree/GMDynamic-CocoaPods">GMDynamic-demo</a>)</h3><blockquote>
<p>GMObjC 和 GMDynamic 只能安装其中一个，二者不能同时安装。</p>
<p>GMObjC 为静态库，GMDynamic 为编译好的 GMObjC 动态库版本。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装 GMObjC 的源码和 GMOpenSSL.xcframework (静态库)</span><br><span class="line">pod &#x27;GMObjC&#x27;, &#x27;~&gt; 4.0.3&#x27;</span><br><span class="line"></span><br><span class="line"># 当 Podfile 中使用 use_frameworks! 时，安装 GMObjC.xcframework (动态库)</span><br><span class="line">pod &#x27;GMDynamic&#x27;, &#x27;~&gt; 4.0.3&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="方案二：使用第三方库（GmSSL）-demo"><a href="#方案二：使用第三方库（GmSSL）-demo" class="headerlink" title="方案二：使用第三方库（GmSSL）(demo)"></a>方案二：使用第三方库（GmSSL）(<a href="https://github.com/GavinCarter1991/sm3-demo/tree/GmSSL%EF%BC%88libgmssl.a%EF%BC%89">demo</a>)</h2><p><strong>集成GmSSL：</strong></p>
<p><img src="https://upload-images.jianshu.io/upload_images/1976231-4e921d7eba588139.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="集成GmSSL方法"></p>
<p>但是我用这种方法不行，我用了其他的方法。</p>
<blockquote>
<p>我们使用GmSSL 3.x（master分支）来编译iOS的静态库（libcrypto.a和libssl.a）。由于3.x版本采用了CMake构建系统，因此流程与2.x不同。</p>
<p>GmSSL 3.x 的构建系统已经发生了变化，生成的库文件名为 libgmssl.a 而不是传统的 libcrypto.a 和 libssl.a。</p>
<p> 如果项目必须使用 <code>libcrypto.a</code> 和 <code>libssl.a</code>，请回退到 GmSSL 2.x</p>
</blockquote>
<ol>
<li><p>克隆代码并切换到master分支（或最新的稳定标签）</p>
</li>
<li><p>配置CMake工具链文件（为iOS交叉编译）</p>
</li>
<li><p>分别编译arm64（真机）和x86_64（模拟器）架构</p>
</li>
<li><p>使用lipo合并成通用静态库</p>
</li>
<li><p>将生成的静态库和头文件集成到iOS项目中。</p>
</li>
</ol>
<p><strong>创建编译脚本：</strong> build_ios.sh（放在GmSSL根目录）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">set -e</span><br><span class="line"></span><br><span class="line"># 确保使用正确的路径</span><br><span class="line">export PATH=&quot;/usr/local/bin:$PATH&quot;</span><br><span class="line"></span><br><span class="line"># 设置环境变量</span><br><span class="line">export XCODE_PATH=$(xcode-select -p)</span><br><span class="line">export IOS_SDK=$XCODE_PATH/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk</span><br><span class="line">export SIM_SDK=$XCODE_PATH/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk</span><br><span class="line"></span><br><span class="line"># 创建输出目录</span><br><span class="line">OUTPUT_DIR=&quot;build-ios&quot;</span><br><span class="line">rm -rf $OUTPUT_DIR</span><br><span class="line">mkdir -p $OUTPUT_DIR</span><br><span class="line"></span><br><span class="line"># 编译函数</span><br><span class="line">compile_arch() &#123;</span><br><span class="line">    ARCH=$1</span><br><span class="line">    SDK=$2</span><br><span class="line">    </span><br><span class="line">    BUILD_DIR=&quot;$&#123;OUTPUT_DIR&#125;/$&#123;ARCH&#125;&quot;</span><br><span class="line">    mkdir -p $BUILD_DIR</span><br><span class="line">    pushd $BUILD_DIR &gt; /dev/null</span><br><span class="line">    </span><br><span class="line">    echo &quot;▸ 配置 $ARCH...&quot;</span><br><span class="line">    cmake ../.. \</span><br><span class="line">        -DCMAKE_SYSTEM_NAME=iOS \</span><br><span class="line">        -DCMAKE_OSX_ARCHITECTURES=$ARCH \</span><br><span class="line">        -DCMAKE_OSX_SYSROOT=$SDK \</span><br><span class="line">        -DCMAKE_OSX_DEPLOYMENT_TARGET=13.0 \</span><br><span class="line">        -DCMAKE_BUILD_TYPE=Release \</span><br><span class="line">        -DBUILD_SHARED_LIBS=OFF \</span><br><span class="line">        -DENABLE_SM2=ON \</span><br><span class="line">        -DENABLE_SM3=ON \</span><br><span class="line">        -DENABLE_SM4=ON \</span><br><span class="line">        -DENABLE_SM9=ON \</span><br><span class="line">        -G Ninja</span><br><span class="line">        </span><br><span class="line">    echo &quot;▸ 编译 $ARCH...&quot;</span><br><span class="line">    ninja</span><br><span class="line">    </span><br><span class="line">    # 关键修改：GmSSL 3.x 生成的库是 libgmssl.a</span><br><span class="line">    mkdir -p lib</span><br><span class="line">    cp bin/libgmssl.a lib/</span><br><span class="line">    </span><br><span class="line">    popd &gt; /dev/null</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 编译各架构</span><br><span class="line">compile_arch &quot;arm64&quot; &quot;$IOS_SDK&quot;</span><br><span class="line">compile_arch &quot;x86_64&quot; &quot;$SIM_SDK&quot;</span><br><span class="line"></span><br><span class="line"># 合并通用库</span><br><span class="line">UNIVERSAL_DIR=&quot;$&#123;OUTPUT_DIR&#125;/universal&quot;</span><br><span class="line">mkdir -p $UNIVERSAL_DIR/lib</span><br><span class="line"></span><br><span class="line"># 合并为单个库 (GmSSL 3.x 只生成一个库)</span><br><span class="line">lipo -create \</span><br><span class="line">    &quot;$&#123;OUTPUT_DIR&#125;/arm64/lib/libgmssl.a&quot; \</span><br><span class="line">    &quot;$&#123;OUTPUT_DIR&#125;/x86_64/lib/libgmssl.a&quot; \</span><br><span class="line">    -output &quot;$UNIVERSAL_DIR/lib/libgmssl.a&quot;</span><br><span class="line"></span><br><span class="line"># 复制头文件</span><br><span class="line">if [ -d &quot;$&#123;OUTPUT_DIR&#125;/arm64/include&quot; ]; then</span><br><span class="line">    cp -R &quot;$&#123;OUTPUT_DIR&#125;/arm64/include&quot; &quot;$UNIVERSAL_DIR/&quot;</span><br><span class="line">elif [ -d &quot;../../include&quot; ]; then</span><br><span class="line">    cp -R &quot;../../include&quot; &quot;$UNIVERSAL_DIR/&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;⚠️ 警告: 找不到头文件目录&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo &quot;✅ 编译成功！&quot;</span><br><span class="line">echo &quot;库文件位置: $UNIVERSAL_DIR/lib/libgmssl.a&quot;</span><br><span class="line">echo &quot;头文件位置: $UNIVERSAL_DIR/include&quot;</span><br><span class="line"></span><br><span class="line"># 验证文件</span><br><span class="line">file &quot;$UNIVERSAL_DIR/lib&quot;/*.a</span><br><span class="line">lipo -info &quot;$UNIVERSAL_DIR/lib/libgmssl.a&quot;</span><br></pre></td></tr></table></figure>

<p><strong>然后按照以下步骤进行执行：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装构建工具</span><br><span class="line">brew install cmake ninja pkg-config</span><br><span class="line"></span><br><span class="line"># 获取最新代码</span><br><span class="line">git clone https://github.com/guanzhi/GmSSL.git</span><br><span class="line">cd GmSSL</span><br><span class="line">git checkout master  # 确保使用最新版本</span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line"># 2. 执行编译</span><br><span class="line">chmod +x build_ios.sh</span><br><span class="line">./build_ios.sh</span><br></pre></td></tr></table></figure>

<ol>
<li><p>将GmSSL&#x2F;build-ios&#x2F;universal&#x2F;lib&#x2F;libgmssl.a 拖入项目</p>
</li>
<li><p>将GmSSL&#x2F;include&#x2F;gmssl 拖入项目</p>
</li>
<li><p>import “sm3.h”</p>
</li>
</ol>
<p><strong>封装方法：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@interface GmSSLEncryptorSM3 : NSObject</span><br><span class="line"></span><br><span class="line">+ (NSString *)sm3HashWithString:(NSString *)input;</span><br><span class="line">+ (NSData *)sm3HashWithData:(NSData *)data;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation GmSSLEncryptorSM3</span><br><span class="line"></span><br><span class="line">+ (instancetype)encryptor &#123;</span><br><span class="line">    return [[GmSSLEncryptorSM3 alloc] init];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (NSData *)sm3HashWithData:(NSData *)data &#123;</span><br><span class="line">    // 初始化 SM3 上下文</span><br><span class="line">    SM3_CTX ctx;</span><br><span class="line">    sm3_init(&amp;ctx);</span><br><span class="line">    // 添加数据到哈希计算</span><br><span class="line">    sm3_update(&amp;ctx, data.bytes, data.length);</span><br><span class="line">    // 准备存储结果的缓冲区 (SM3 输出为 32 字节)</span><br><span class="line">    uint8_t dgst[SM3_DIGEST_SIZE];</span><br><span class="line">    // 完成哈希计算</span><br><span class="line">    sm3_finish(&amp;ctx, dgst);</span><br><span class="line">    // 转换为 NSData</span><br><span class="line">    return [NSData dataWithBytes:dgst length:SM3_DIGEST_SIZE];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (NSString *)sm3HashWithString:(NSString *)input &#123;</span><br><span class="line">    NSData *inputData = [input dataUsingEncoding:NSUTF8StringEncoding];</span><br><span class="line">    // 计算 SM3 哈希</span><br><span class="line">    NSData *hashData = [GmSSLEncryptorSM3 sm3HashWithData:inputData];</span><br><span class="line">    // 转换为十六进制字符串显示</span><br><span class="line">    NSMutableString *hexString = [NSMutableString string];</span><br><span class="line">    const uint8_t *bytes = (const uint8_t *)hashData.bytes;</span><br><span class="line">    for (NSUInteger i = 0; i &lt; hashData.length; i++) &#123;</span><br><span class="line">        [hexString appendFormat:@&quot;%02x&quot;, bytes[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    return hexString;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>
<p><strong>就可以在项目中使用了：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NSString *encryptor = [GmSSLEncryptorSM3 sm3HashWithString:str];</span><br><span class="line">NSLog(@&quot;%@&quot;, encryptor);</span><br></pre></td></tr></table></figure>

<h2 id="方案三：纯-Objective-C-实现（无依赖）-demo"><a href="#方案三：纯-Objective-C-实现（无依赖）-demo" class="headerlink" title="方案三：纯 Objective-C 实现（无依赖）(demo)"></a>方案三：纯 Objective-C 实现（无依赖）(<a href="https://github.com/GavinCarter1991/sm3-demo/tree/SM3-%E7%BA%AFOC%E4%BB%A3%E7%A0%81">demo</a>)</h2><blockquote>
<p>SM3本质上不是加密算法，它是是一种杂凑函数，是在[SHA-256]基础上改进实现的一种算法，它不是对数据进行加密然后再解密，而是生成一个256位的散列值，因此SM3适用于内容摘要，数字签名验证或密码验证等。</p>
</blockquote>
<p><strong>SM3算法的执行过程：</strong></p>
<p>根据SM3标准文档（GM&#x2F;T 0004-2012）</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1976231-b73f718c48617fcb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="sm3流程.png"></p>
<p><strong>消息扩展：</strong>将16个32位字扩展为68个字（W）和64个字（W1），使用P1宏。<br><strong>压缩函数：</strong>64轮迭代更新寄存器（A-H），每轮使用FF1&#x2F;GG1等宏。<br><strong>常量：</strong>压缩函数中的常量0x7A879D8A（TJ的固定值）。<br><strong>结果输出：</strong>将最终状态寄存器转换为大端序字节流（256位）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//</span><br><span class="line">//  SM3Encryptor.m</span><br><span class="line">//  testDemo</span><br><span class="line">//</span><br><span class="line">//  Created by wt on 2025/6/12.</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">#import &quot;SM3Encryptor.h&quot;</span><br><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line"></span><br><span class="line">// SM3 上下文结构</span><br><span class="line">typedef struct &#123;</span><br><span class="line">    uint32_t state[8];   // 8个32位寄存器（A-H）</span><br><span class="line">    uint64_t totalLength; // 总消息长度（位）</span><br><span class="line">    uint8_t buffer[64];  // 当前数据块缓存</span><br><span class="line">    uint32_t bufferLength; // 当前缓冲区长度</span><br><span class="line">&#125; SM3Context;</span><br><span class="line"></span><br><span class="line">// 循环左移</span><br><span class="line">static inline uint32_t ROTL(uint32_t x, uint8_t n) &#123;</span><br><span class="line">    return (x &lt;&lt; n) | (x &gt;&gt; (32 - n));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 布尔函数 FF0（0≤j≤15）</span><br><span class="line">static inline uint32_t FF0(uint32_t x, uint32_t y, uint32_t z) &#123;</span><br><span class="line">    return x ^ y ^ z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 布尔函数 FF1（16≤j≤63）</span><br><span class="line">static inline uint32_t FF1(uint32_t x, uint32_t y, uint32_t z) &#123;</span><br><span class="line">    return (x &amp; y) | (x &amp; z) | (y &amp; z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 布尔函数 GG0（0≤j≤15）</span><br><span class="line">static inline uint32_t GG0(uint32_t x, uint32_t y, uint32_t z) &#123;</span><br><span class="line">    return x ^ y ^ z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 布尔函数 GG1（16≤j≤63）</span><br><span class="line">static inline uint32_t GG1(uint32_t x, uint32_t y, uint32_t z) &#123;</span><br><span class="line">    return (x &amp; y) | ((~x) &amp; z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 置换函数 P0</span><br><span class="line">static inline uint32_t P0(uint32_t x) &#123;</span><br><span class="line">    return x ^ ROTL(x, 9) ^ ROTL(x, 17);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 置换函数 P1</span><br><span class="line">static inline uint32_t P1(uint32_t x) &#123;</span><br><span class="line">    return x ^ ROTL(x, 15) ^ ROTL(x, 23);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 初始化SM3上下文</span><br><span class="line">void SM3Init(SM3Context *context) &#123;</span><br><span class="line">    // SM3标准初始值</span><br><span class="line">    context-&gt;state[0] = 0x7380166F;</span><br><span class="line">    context-&gt;state[1] = 0x4914B2B9;</span><br><span class="line">    context-&gt;state[2] = 0x172442D7;</span><br><span class="line">    context-&gt;state[3] = 0xDA8A0600;</span><br><span class="line">    context-&gt;state[4] = 0xA96F30BC;</span><br><span class="line">    context-&gt;state[5] = 0x163138AA;</span><br><span class="line">    context-&gt;state[6] = 0xE38DEE4D;</span><br><span class="line">    context-&gt;state[7] = 0xB0FB0E4E;</span><br><span class="line">    context-&gt;totalLength = 0;</span><br><span class="line">    context-&gt;bufferLength = 0;</span><br><span class="line">    memset(context-&gt;buffer, 0, 64);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 处理单个64字节块（压缩函数核心）</span><br><span class="line">void SM3Compress(SM3Context *context, const uint8_t block[64]) &#123;</span><br><span class="line">    // 1. 消息扩展：16字 → 68字（W） + 64字（W1）</span><br><span class="line">    uint32_t W[68], W1[64];</span><br><span class="line">    </span><br><span class="line">    // 初始化前16字（大端序转换）</span><br><span class="line">    for (int i = 0; i &lt; 16; i++) &#123;</span><br><span class="line">        W[i] = (uint32_t)block[i*4] &lt;&lt; 24 |</span><br><span class="line">               (uint32_t)block[i*4+1] &lt;&lt; 16 |</span><br><span class="line">               (uint32_t)block[i*4+2] &lt;&lt; 8 |</span><br><span class="line">               (uint32_t)block[i*4+3];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 计算W[16]-W[67]</span><br><span class="line">    for (int j = 16; j &lt; 68; j++) &#123;</span><br><span class="line">        uint32_t temp = W[j-16] ^ W[j-9] ^ ROTL(W[j-3], 15);</span><br><span class="line">        W[j] = P1(temp) ^ ROTL(W[j-13], 7) ^ W[j-6];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 计算W1[0]-W1[63]</span><br><span class="line">    for (int j = 0; j &lt; 64; j++) &#123;</span><br><span class="line">        W1[j] = W[j] ^ W[j+4];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 2. 寄存器初始化（A-H）</span><br><span class="line">    uint32_t A = context-&gt;state[0];</span><br><span class="line">    uint32_t B = context-&gt;state[1];</span><br><span class="line">    uint32_t C = context-&gt;state[2];</span><br><span class="line">    uint32_t D = context-&gt;state[3];</span><br><span class="line">    uint32_t E = context-&gt;state[4];</span><br><span class="line">    uint32_t F = context-&gt;state[5];</span><br><span class="line">    uint32_t G = context-&gt;state[6];</span><br><span class="line">    uint32_t H = context-&gt;state[7];</span><br><span class="line">    </span><br><span class="line">    // 3. 64轮迭代（严格遵循标准）</span><br><span class="line">    for (int j = 0; j &lt; 64; j++) &#123;</span><br><span class="line">        uint32_t SS1, SS2, TT1, TT2;</span><br><span class="line">        </span><br><span class="line">        // 常量选择（关键修正）</span><br><span class="line">        uint32_t TJ = (j &lt; 16) ? 0x79CC4519 : 0x7A879D8A;</span><br><span class="line">        </span><br><span class="line">        // 计算SS1/SS2（修正了TJ参数）</span><br><span class="line">        SS1 = ROTL(ROTL(A, 12) + E + ROTL(TJ, j % 32), 7);</span><br><span class="line">        SS2 = SS1 ^ ROTL(A, 12);</span><br><span class="line">        </span><br><span class="line">        // 计算TT1/TT2（使用内联函数）</span><br><span class="line">        if (j &lt; 16) &#123;</span><br><span class="line">            TT1 = FF0(A, B, C) + D + SS2 + W1[j];</span><br><span class="line">            TT2 = GG0(E, F, G) + H + SS1 + W[j];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            TT1 = FF1(A, B, C) + D + SS2 + W1[j];</span><br><span class="line">            TT2 = GG1(E, F, G) + H + SS1 + W[j];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        // 更新寄存器（严格顺序）</span><br><span class="line">        D = C;</span><br><span class="line">        C = ROTL(B, 9);</span><br><span class="line">        B = A;</span><br><span class="line">        A = TT1;</span><br><span class="line">        H = G;</span><br><span class="line">        G = ROTL(F, 19);</span><br><span class="line">        F = E;</span><br><span class="line">        E = P0(TT2);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 4. 更新最终状态（与初始IV异或）</span><br><span class="line">    context-&gt;state[0] ^= A;</span><br><span class="line">    context-&gt;state[1] ^= B;</span><br><span class="line">    context-&gt;state[2] ^= C;</span><br><span class="line">    context-&gt;state[3] ^= D;</span><br><span class="line">    context-&gt;state[4] ^= E;</span><br><span class="line">    context-&gt;state[5] ^= F;</span><br><span class="line">    context-&gt;state[6] ^= G;</span><br><span class="line">    context-&gt;state[7] ^= H;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 更新数据（可分多次调用）</span><br><span class="line">void SM3Update(SM3Context *context, const uint8_t *data, size_t length) &#123;</span><br><span class="line">    context-&gt;totalLength += length * 8; // 更新总位数（字节转位）</span><br><span class="line">    </span><br><span class="line">    // 处理缓冲区中的剩余空间</span><br><span class="line">    if (context-&gt;bufferLength &gt; 0) &#123;</span><br><span class="line">        size_t copySize = MIN(64 - context-&gt;bufferLength, length);</span><br><span class="line">        memcpy(context-&gt;buffer + context-&gt;bufferLength, data, copySize);</span><br><span class="line">        context-&gt;bufferLength += copySize;</span><br><span class="line">        data += copySize;</span><br><span class="line">        length -= copySize;</span><br><span class="line">        </span><br><span class="line">        if (context-&gt;bufferLength == 64) &#123;</span><br><span class="line">            SM3Compress(context, context-&gt;buffer);</span><br><span class="line">            context-&gt;bufferLength = 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 处理完整块</span><br><span class="line">    while (length &gt;= 64) &#123;</span><br><span class="line">        SM3Compress(context, data);</span><br><span class="line">        data += 64;</span><br><span class="line">        length -= 64;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 缓存剩余数据</span><br><span class="line">    if (length &gt; 0) &#123;</span><br><span class="line">        memcpy(context-&gt;buffer, data, length);</span><br><span class="line">        context-&gt;bufferLength = length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 完成哈希计算</span><br><span class="line">void SM3Final(SM3Context *context, uint8_t output[32]) &#123;</span><br><span class="line">    // 计算填充长度（SM3标准：补位1 + k个0 + 64位长度）</span><br><span class="line">    size_t totalBits = context-&gt;totalLength;</span><br><span class="line">    size_t paddingBits = (context-&gt;bufferLength &lt; 56) ?</span><br><span class="line">                         (56 - context-&gt;bufferLength) :</span><br><span class="line">                         (120 - context-&gt;bufferLength);</span><br><span class="line">    </span><br><span class="line">    // 构建填充数据</span><br><span class="line">    uint8_t padding[128] = &#123;0&#125;;</span><br><span class="line">    padding[0] = 0x80; // 补位起始位（二进制10000000）</span><br><span class="line">    </span><br><span class="line">    // 添加填充</span><br><span class="line">    SM3Update(context, padding, paddingBits);</span><br><span class="line">    </span><br><span class="line">    // 添加消息长度（大端序64位）</span><br><span class="line">    uint64_t bitCount = CFSwapInt64HostToBig(totalBits);</span><br><span class="line">    SM3Update(context, (uint8_t *)&amp;bitCount, 8);</span><br><span class="line">    </span><br><span class="line">    // 确保最后一个块被处理</span><br><span class="line">    if (context-&gt;bufferLength &gt; 0) &#123;</span><br><span class="line">        memset(context-&gt;buffer + context-&gt;bufferLength, 0, 64 - context-&gt;bufferLength);</span><br><span class="line">        SM3Compress(context, context-&gt;buffer);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 输出最终哈希（256位，大端序）</span><br><span class="line">    for (int i = 0; i &lt; 8; i++) &#123;</span><br><span class="line">        output[i*4]     = (uint8_t)(context-&gt;state[i] &gt;&gt; 24);</span><br><span class="line">        output[i*4 + 1] = (uint8_t)(context-&gt;state[i] &gt;&gt; 16);</span><br><span class="line">        output[i*4 + 2] = (uint8_t)(context-&gt;state[i] &gt;&gt; 8);</span><br><span class="line">        output[i*4 + 3] = (uint8_t)(context-&gt;state[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Objective-C 封装接口</span><br><span class="line">@implementation SM3Encryptor</span><br><span class="line"></span><br><span class="line">+ (NSData *)hashWithData:(NSData *)inputData &#123;</span><br><span class="line">    SM3Context context;</span><br><span class="line">    SM3Init(&amp;context);</span><br><span class="line">    </span><br><span class="line">    // 处理输入数据</span><br><span class="line">    SM3Update(&amp;context, inputData.bytes, inputData.length);</span><br><span class="line">    </span><br><span class="line">    // 获取结果</span><br><span class="line">    uint8_t output[32];</span><br><span class="line">    SM3Final(&amp;context, output);</span><br><span class="line">    </span><br><span class="line">    return [NSData dataWithBytes:output length:32];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (NSString *)hexStringWithData:(NSData *)inputData &#123;</span><br><span class="line">    NSData *hashData = [self hashWithData:inputData];</span><br><span class="line">    const uint8_t *bytes = (const uint8_t *)hashData.bytes;</span><br><span class="line">    NSMutableString *hex = [NSMutableString string];</span><br><span class="line">    </span><br><span class="line">    for (NSUInteger i = 0; i &lt; hashData.length; i++) &#123;</span><br><span class="line">        [hex appendFormat:@&quot;%02X&quot;, bytes[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return [hex copy];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (NSString *)hexStringWithInput:(NSString *)inputStr &#123;</span><br><span class="line">    NSData *inputData = [inputStr dataUsingEncoding:NSUTF8StringEncoding];</span><br><span class="line">    NSData *hashData = [self hashWithData:inputData];</span><br><span class="line">    const uint8_t *bytes = (const uint8_t *)hashData.bytes;</span><br><span class="line">    NSMutableString *hex = [NSMutableString string];</span><br><span class="line">    </span><br><span class="line">    for (NSUInteger i = 0; i &lt; hashData.length; i++) &#123;</span><br><span class="line">        [hex appendFormat:@&quot;%02X&quot;, bytes[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return [hex copy];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>“iOS”</tag>
        <tag>“SM3”</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS-js与iOS的交互（基于WKWebViewJavascriptBridge第三方）</title>
    <url>/2016/07/09/iOS-js%E4%B8%8EiOS%E7%9A%84%E4%BA%A4%E4%BA%92%EF%BC%88%E5%9F%BA%E4%BA%8EWKWebViewJavascriptBridge%E7%AC%AC%E4%B8%89%E6%96%B9%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>后天就要去北京出差了，据说那边的项目主要是与网页交互，所以就简单的研究了一下js与iOS的交互。<br>其交互方式有很多种</p>
</blockquote>
<h3 id="一、native（app）通过UIWebView的代理方法拦截url-scheme判断是否是我们需要拦截处理的url及其所对应的要处理的逻辑（可以实现对网页的返回、前景、刷新），比较通用和简单。"><a href="#一、native（app）通过UIWebView的代理方法拦截url-scheme判断是否是我们需要拦截处理的url及其所对应的要处理的逻辑（可以实现对网页的返回、前景、刷新），比较通用和简单。" class="headerlink" title="一、native（app）通过UIWebView的代理方法拦截url scheme判断是否是我们需要拦截处理的url及其所对应的要处理的逻辑（可以实现对网页的返回、前景、刷新），比较通用和简单。"></a>一、native（app）通过UIWebView的代理方法拦截url scheme判断是否是我们需要拦截处理的url及其所对应的要处理的逻辑（可以实现对网页的返回、前景、刷新），比较通用和简单。</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">self.webView = [[UIWebView alloc]initWithFrame:CGRectMake(0, 0, self.view.bounds.size.width, self.view.bounds.size.height)];</span><br><span class="line"></span><br><span class="line">self.webView.delegate = self;</span><br><span class="line"></span><br><span class="line">[self.webView setUserInteractionEnabled:YES]; //是否支持交互</span><br><span class="line"></span><br><span class="line">[self.webView setOpaque:NO]; //opaque是不透明的意思</span><br><span class="line"></span><br><span class="line">[self.webView setScalesPageToFit:YES]; //自动缩放以适应屏幕</span><br><span class="line"></span><br><span class="line">[self.view addSubview:self.webView];</span><br><span class="line"></span><br><span class="line">if (sender.tag == 101) &#123;</span><br><span class="line"></span><br><span class="line">// 返回（点击页面才会有返回）</span><br><span class="line">[self.mWebView goBack];</span><br><span class="line"></span><br><span class="line">&#125;else if (sender.tag == 102) &#123;</span><br><span class="line"></span><br><span class="line">// 前进（点击过的页面）</span><br><span class="line">[self.mWebView goForward];</span><br><span class="line"></span><br><span class="line">&#125;else &#123;</span><br><span class="line"></span><br><span class="line">// 刷新页面</span><br><span class="line">[self.mWebView reload];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二、iOS7之后出了JavaScriptCore-framework用于与JS交互，通过JSContext调用JS代码的方法："><a href="#二、iOS7之后出了JavaScriptCore-framework用于与JS交互，通过JSContext调用JS代码的方法：" class="headerlink" title="二、iOS7之后出了JavaScriptCore.framework用于与JS交互，通过JSContext调用JS代码的方法："></a>二、iOS7之后出了JavaScriptCore.framework用于与JS交互，通过JSContext调用JS代码的方法：</h3><p><strong>1、直接调用JS代码</strong></p>
<p><strong>2、在ObjC中通过JSContext注入模型，然后调用模型的方法</strong></p>
<p><strong>通过evaluateScript:方法就可以执行JS代码</strong></p>
<h3 id="三、React-Native-（不是很了解，只知道是Facebook的，能编译很多的语音，兼容性很强，可移植也很强，有很多很好的原生控件，有兴趣的朋友可以了解一下）"><a href="#三、React-Native-（不是很了解，只知道是Facebook的，能编译很多的语音，兼容性很强，可移植也很强，有很多很好的原生控件，有兴趣的朋友可以了解一下）" class="headerlink" title="三、React Native （不是很了解，只知道是Facebook的，能编译很多的语音，兼容性很强，可移植也很强，有很多很好的原生控件，有兴趣的朋友可以了解一下）"></a>三、React Native （不是很了解，只知道是Facebook的，能编译很多的语音，兼容性很强，可移植也很强，有很多很好的原生控件，有兴趣的朋友可以了解一下）</h3><h3 id="四、WebViewJavascriptBridge（第三方）是基于方式一封装的（主要是两个回调函数）。"><a href="#四、WebViewJavascriptBridge（第三方）是基于方式一封装的（主要是两个回调函数）。" class="headerlink" title="四、WebViewJavascriptBridge（第三方）是基于方式一封装的（主要是两个回调函数）。"></a>四、WebViewJavascriptBridge（第三方）是基于方式一封装的（主要是两个回调函数）。</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在iOS端：1.self.bridge = [WebViewJavascriptBridge bridgeForWebView:self.webView];</span><br></pre></td></tr></table></figure>

<blockquote>
<p>链接iOS与js,self.webView就是展示你用来显示需要交换页面的UIWebView</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2.[self.bridge registerHandler:@&quot;testJavascriptHandler&quot; handler:^(id data, WVJBResponseCallback responseCallback) &#123;</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;ObjC Echo called with: %@&quot;, data);</span><br><span class="line"></span><br><span class="line">// 反馈给JS</span><br><span class="line">responseCallback(data);</span><br><span class="line"></span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">// 在JS中如果调用了bridge.send()，那么将触发OC端_bridge初始化方法中的回调。</span><br><span class="line"></span><br><span class="line">// 在JS中调用了bridge.callHandler(&#x27;testJavascriptHandler&#x27;)，它将触发OC端注册的同名方法</span><br><span class="line"></span><br><span class="line">// oc 同理</span><br><span class="line"></span><br><span class="line">// JS主动调用OjbC的方法</span><br><span class="line"></span><br><span class="line">// 这是JS会调用ObjC Echo方法，这是OC注册给JS调用的</span><br><span class="line"></span><br><span class="line">// JS需要回调，当然JS也可以传参数过来。data就是JS所传的参数，不一定需要传</span><br><span class="line"></span><br><span class="line">// OC端通过responseCallback回调JS端，JS就可以得到所需要的数据</span><br><span class="line"></span><br><span class="line">3.[self.bridge callHandler:@&quot;sayHello&quot; data:@&#123;@&quot;hello&quot;: @&quot;你好&quot;&#125; responseCallback:^(id responseData) &#123;</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;回调结果: %@&quot;, responseData);</span><br><span class="line"></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<blockquote>
<p>直接调用JS端注册的HandleName，一定注意此次的名字一定要与js端的相同。<br>js调用时也一样</p>
</blockquote>
<p>在JS端：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.Copy and paste setupWebViewJavascriptBridge into your JS:</span><br><span class="line"></span><br><span class="line">（此段代码为固定格式，直接放在js端就行）</span><br><span class="line"></span><br><span class="line">function setupWebViewJavascriptBridge(callback) &#123;</span><br><span class="line"></span><br><span class="line">if (window.WebViewJavascriptBridge) &#123; return callback(WebViewJavascriptBridge); &#125;</span><br><span class="line"></span><br><span class="line">if (window.WVJBCallbacks) &#123; return window.WVJBCallbacks.push(callback); &#125;</span><br><span class="line"></span><br><span class="line">window.WVJBCallbacks = [callback];</span><br><span class="line"></span><br><span class="line">var WVJBIframe = document.createElement(&#x27;iframe&#x27;);</span><br><span class="line"></span><br><span class="line">WVJBIframe.style.display = &#x27;none&#x27;;</span><br><span class="line"></span><br><span class="line">WVJBIframe.src = &#x27;wvjbscheme://__BRIDGE_LOADED__&#x27;;</span><br><span class="line"></span><br><span class="line">document.documentElement.appendChild(WVJBIframe);</span><br><span class="line"></span><br><span class="line">setTimeout(function() &#123; document.documentElement.removeChild(WVJBIframe) &#125;, 0)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>后面几步与iOS端一样</p>
<p>如有错误，望请指出。</p>
</blockquote>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>“iOS”</tag>
        <tag>“js”</tag>
        <tag>“WKWebViewJavascriptBridge”</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 下加载本地HTML/js/css/image 等路径问题</title>
    <url>/2016/07/25/iOS-%E4%B8%8B%E5%8A%A0%E8%BD%BD%E6%9C%AC%E5%9C%B0HTML-js-css-image-%E7%AD%89%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>今天在项目中遇到一个问题：我将H5的文件拖入项目中，在webView上添加H5,运行时发现H5的样式与图片等都没有了。经过多种测试后发现：是路径的问题。</p>
<p>在ios项目下添加本地HTML&#x2F;js&#x2F;css&#x2F;image  当拖入项目时有两种选择：</p>
<p>一个是  Create groups for any added folders（创建虚拟结构-包结构）</p>
<p>一个是 Create folder references for any added folders 创建实体结构）</p>
</blockquote>
<blockquote>
<p>如果选择前者，当APP编译过后引入的文件会被放在同一个文件夹下面会忽略你原本的文件夹。因此在HTML文件中的路径就会出现问题。如果你选择了前者那么HTML文件中引入CSS，js，图片等就不需要添加前缀路径了，直接写文件名就行。</p>
</blockquote>
<p><strong>引入文件方式：</strong></p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NSString * htmlPath = [[NSBundle mainBundle] pathForResource:@&quot;index&quot; ofType:@&quot;html&quot;];</span><br><span class="line">NSString * htmlString = [NSString stringWithContentsOfFile:htmlPath encoding:NSUTF8StringEncoding error:nil];</span><br><span class="line"> NSURL *baseURL = [NSURL fileURLWithPath:[[NSBundle mainBundle] resourcePath]];</span><br><span class="line">[self.webView loadHTMLString:htmlString baseURL:baseURL];</span><br></pre></td></tr></table></figure>
<blockquote>
<p> 如果选择后者，当APP编译过后引入的文件会按照原本的目录结构存放，这个时候就需要添加相对路径。</p>
</blockquote>
<p> <strong>引入文件方式：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[self.webView loadRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:@&quot;huaiha/index.html&quot; </span><br><span class="line"></span><br><span class="line">relativeToURL:[[NSBundle mainBundle] bundleURL]]]];</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>“iOS”</tag>
        <tag>“本地”</tag>
        <tag>“路径问题”</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter-详解布局</title>
    <url>/2025/07/07/Flutter-%E8%AF%A6%E8%A7%A3%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<blockquote>
<p>上一章我们详细的学习了 Flutter 中的<a href="https://www.jianshu.com/p/c6fe1cf0ff45">Widget</a>，这一章我们将要学习 Flutter 的<code>布局</code>， 在上一章我们了解到了：Everything is a widget，在 Flutter 中几乎所有的对象都是一个 <code>Widget</code> ，当然也包括布局，Flutter 的布局系统基于 <code>Widget </code>树，通过组合不同的布局 <code>Widget</code> 实现复杂的 UI，你在 Flutter 应用程序中能直接看到的图像，图标和文本都是 <code>Widget</code>。此外不能直接看到的也是 <code>Widget</code>，如用来排列、限制和对齐可见 <code>Widget</code> 的行、列和网格。</p>
</blockquote>
<p><a href="https://github.com/GavinCarter1991/flutter-layout-demo">DEMO</a></p>
<h1 id="布局规则"><a href="#布局规则" class="headerlink" title="布局规则"></a>布局规则</h1><p><strong>1.约束由父组件向子组件传导，大小由子组件向父组件传导，位置由父组件决定。</strong></p>
<p><strong>2.布局Widget是Flutter UI的基础，理解它们的规则和适用场景非常重要</strong></p>
<h1 id="核心布局控件-多子组件"><a href="#核心布局控件-多子组件" class="headerlink" title="核心布局控件 (多子组件)"></a>核心布局控件 (多子组件)</h1><h2 id="1-Row-amp-Column"><a href="#1-Row-amp-Column" class="headerlink" title="1. Row &amp; Column"></a>1. Row &amp; Column</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> Row水平排列子Widget，Column垂直排列子Widget</p>
</li>
<li><p><strong>规则：</strong> 子Widget可以是非弹性（不扩展）或弹性（Expanded）。主轴-mainAxisAlignment（Row 为 X 轴，Column 为 Y 轴）和交叉轴-crossAxisAlignment（Row 为 Y 轴，Column 为 X 轴）</p>
</li>
<li><p><strong>注意：</strong></p>
</li>
<li><p>1.当子Widget的总长度超过主轴长度时，会溢出（常见错误：黄色黑色条纹警告）。可以使用Expanded或Flexible来避免，或者使用ListView代替</p>
</li>
<li><p>2.如果没有指定主轴对齐方式（mainAxisAlignment）和交叉轴对齐方式（crossAxisAlignment），默认是start和stretch</p>
</li>
<li><p><strong>推荐：</strong> 用于线性排列多个子Widget，如：导航栏（Row）、表单项列表（Column）、图文混排（Row + Column 嵌套），如果子Widget较多且可能超出屏幕，考虑使用ListView。</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Row(</span><br><span class="line">  mainAxisAlignment: MainAxisAlignment.spaceBetween, // 主轴均匀分布</span><br><span class="line">      crossAxisAlignment: CrossAxisAlignment.center, // 交叉轴居中</span><br><span class="line">  children: [</span><br><span class="line">    Container(width: 50, height: 50, color: Colors.red),</span><br><span class="line">    Expanded(child: Container(height: 30, color: Colors.green)), // 弹性填充剩余空间</span><br><span class="line">    Container(width: 50, height: 50, color: Colors.blue),</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-0f77998e7ccc506f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ROW"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Column(</span><br><span class="line">  mainAxisAlignment: MainAxisAlignment.spaceBetween, // 主轴均匀分布</span><br><span class="line">      crossAxisAlignment: CrossAxisAlignment.center, // 交叉轴居中</span><br><span class="line">  children: [</span><br><span class="line">    Container(width: 50, height: 50, color: Colors.red),</span><br><span class="line">    Expanded(child: Container(height: 30, color: Colors.green)), // 弹性填充剩余空间</span><br><span class="line">    Container(width: 50, height: 50, color: Colors.blue),</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-9d2e8d107c3b5f44.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Column"></p>
<h2 id="2-Stack"><a href="#2-Stack" class="headerlink" title="2. Stack"></a>2. Stack</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 将子Widget重叠在一起。第一个子Widget在底部，后面的依次在上层</p>
</li>
<li><p><strong>规则：</strong> 子Widget可以使用Positioned来定位，否则放置在左上角。如果没有定位，则根据alignment属性对齐（默认左上角）,子 Widget 顺序决定绘制顺序（后绘制的在上层）</p>
</li>
<li><p><strong>注意：</strong> 如果不使用Positioned，且Stack没有指定大小，那么Stack会调整到包裹所有未定位的子Widget（但如果有定位的子Widget，则定位的子Widget不影响Stack大小）, Positioned 的子 Widget 可能超出 Stack 边界（需 <code>Clip</code> 处理）</p>
</li>
<li><p><strong>推荐：</strong> 用于需要重叠的布局，如图片上的标签、浮动按钮、自定义进度条</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Stack(</span><br><span class="line">  alignment: Alignment.center, // 所有子Widget居中</span><br><span class="line">  children: [</span><br><span class="line">    Container(width: 200, height: 200, color: Colors.blue), // 底层</span><br><span class="line">    Positioned(</span><br><span class="line">      bottom: 10,</span><br><span class="line">      right: 10,</span><br><span class="line">      child: Container(width: 50, height: 50, color: Colors.red), // 定位到右下</span><br><span class="line">    ),</span><br><span class="line">    const Text(&quot;Stack Example&quot;), // 文字居中</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-aa664a2dba537c26.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Stack"></p>
<h2 id="3-Wrap"><a href="#3-Wrap" class="headerlink" title="3. Wrap"></a>3. Wrap</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 当一行（或一列）放不下子Widget时，自动换行（或换列）</p>
</li>
<li><p><strong>规则：</strong> 可以设置方向（水平或垂直）、间距（spacing-主轴方向间距）和行间距（runSpacing-交叉轴方向行间距）</p>
</li>
<li><p><strong>注意：</strong> 与Row不同，Wrap不会溢出，而是换行。但要注意如果子Widget很大且没有足够空间，可能会超出屏幕（在换行方向），按需换行，避免溢出，子 Widget 数量极大时应用 Wrap.builder，计算间距不要忽略 spacing 和 runSpacing 不然容易导致布局重叠</p>
</li>
<li><p><strong>推荐：</strong> 用于流式布局，如标签列表、筛选条件栏、自适应按钮组</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Wrap(</span><br><span class="line">  spacing: 8.0, // 水平间距</span><br><span class="line">  runSpacing: 4.0, // 垂直间距（行间距）</span><br><span class="line">  children: [</span><br><span class="line">    Chip(label: Text(&#x27;标签1&#x27;)),</span><br><span class="line">    Chip(label: Text(&#x27;标签2&#x27;)),</span><br><span class="line">    Chip(label: Text(&#x27;标签3&#x27;)),</span><br><span class="line">    Chip(label: Text(&#x27;标签4&#x27;)),</span><br><span class="line">    Chip(label: Text(&#x27;标签5&#x27;)),</span><br><span class="line">    Chip(label: Text(&#x27;标签6&#x27;)),</span><br><span class="line">    Chip(label: Text(&#x27;标签7&#x27;)),</span><br><span class="line">    Chip(label: Text(&#x27;标签8&#x27;)),</span><br><span class="line">    Chip(label: Text(&#x27;标签9&#x27;)),</span><br><span class="line">    Chip(label: Text(&#x27;标签10&#x27;)),</span><br><span class="line">    Chip(label: Text(&#x27;标签11&#x27;)),</span><br><span class="line">    Chip(label: Text(&#x27;标签12&#x27;)),</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-c4a8a811e079ba1d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Wrap"></p>
<h2 id="4-Flow"><a href="#4-Flow" class="headerlink" title="4. Flow"></a>4. Flow</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> </p>
</li>
<li><p>1.Flow 需要自定义布局逻辑时使用，通过delegate控制每个子Widget的位置和大小。性能较好，因为子Widget可以独立定位而不影响父Widget</p>
</li>
<li><p>2.动态增减子元素：在delegate中监听数据变化，调用context.invalidateLayout()重布局</p>
</li>
<li><p><strong>规则：</strong> Flow：高性能自定义布局（需实现 FlowDelegate）</p>
</li>
<li><p><strong>注意：</strong> 通过委托计算（delegate-calculated）实现动态自适应，胜任复杂场景，当布局复杂度低时，优先用Wrap简化开发</p>
</li>
<li><p><strong>推荐：</strong> 复杂动画布局，避免Wrap的多次测量，适合动态加载&#x2F;高频更新场景</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class MyFlowDelegate extends FlowDelegate &#123;</span><br><span class="line">  @override</span><br><span class="line">  void paintChildren(FlowPaintingContext context) &#123;</span><br><span class="line">    var x = 0.0, y = 0.0;</span><br><span class="line">    for (var i = 0; i &lt; context.childCount; i++) &#123;</span><br><span class="line">      // 动态计算每个子组件位置</span><br><span class="line">      final childSize = context.getChildSize(i)!;</span><br><span class="line">      context.paintChild(i, transform: Matrix4.translationValues(x, y, 0));</span><br><span class="line">      x += childSize.width * 0.8; // 重叠效果</span><br><span class="line">      y += childSize.height * 0.2;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  bool shouldRepaint(covariant FlowDelegate oldDelegate) =&gt; true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Flow(</span><br><span class="line">  delegate: MyFlowDelegate(),</span><br><span class="line">  children: List.generate(</span><br><span class="line">      5,</span><br><span class="line">      (index) =&gt; Container(</span><br><span class="line">            width: 80,</span><br><span class="line">            height: 80,</span><br><span class="line">            color: Colors.primaries[index],</span><br><span class="line">          )),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-ce736ecf89cfae2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Flow"></p>
<span id="more"></span>


<h2 id="5-ListView"><a href="#5-ListView" class="headerlink" title="5. ListView"></a>5. ListView</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 可滚动的线性布局，支持水平和垂直方向</p>
</li>
<li><p><strong>规则：</strong> 如果子Widget数量固定，使用ListView(children: […])，如果数量多，使用ListView.builder按需构建</p>
</li>
<li><p><strong>注意：</strong> 直接使用children方式构建大量子Widget会导致性能问题，因为会一次性构建所有子Widget。对于长列表，务必使用builder，嵌套 ListView 时需明确滚动方向</p>
</li>
<li><p><strong>推荐：</strong> 用于需要滚动的列表，例如消息列表、设置菜单、长数据展示</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ListView.builder(</span><br><span class="line">    itemCount: 100,</span><br><span class="line">    itemBuilder: (context, index) &#123;</span><br><span class="line">      return ListTile(</span><br><span class="line">        title: Text(&#x27;Item $index&#x27;),</span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">  )</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-3fe3070d3e246234.gif?imageMogr2/auto-orient/strip" alt="ListView"></p>
<h2 id="6-GridView"><a href="#6-GridView" class="headerlink" title="6. GridView"></a>6. GridView</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 网格布局</p>
</li>
<li><p><strong>规则：</strong> 有多种构造方式：GridView.count（固定列数）、GridView.extent（固定最大交叉轴长度）、GridView.builder（按需构建）</p>
</li>
<li><p><strong>注意：</strong> 同样要注意性能，长列表使用builder，要正确设置 childAspectRatio 不然容易导致单元格变形</p>
</li>
<li><p><strong>推荐：</strong> 用于展示网格状内容，如图片墙、产品网格、仪表盘卡片</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var array = [Colors.blue, Colors.red, Colors.yellow];</span><br><span class="line">GridView.count(</span><br><span class="line">  crossAxisCount: 3, // 每行3列</span><br><span class="line">  childAspectRatio: 1.0, // 宽高比</span><br><span class="line">  children: List.generate(</span><br><span class="line">      9,</span><br><span class="line">      (index) =&gt; Container(</span><br><span class="line">            decoration: BoxDecoration(</span><br><span class="line">              color: array[index % 3],</span><br><span class="line">              borderRadius: BorderRadius.circular(8.0),</span><br><span class="line">            ),</span><br><span class="line">            child: Center(child: Text(&#x27;Item $index&#x27;)),</span><br><span class="line">          )),</span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-d7cab59e26a42a4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="GridView"></p>
<h2 id="7-Table"><a href="#7-Table" class="headerlink" title="7. Table"></a>7. Table</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 是一种基于表格模型的布局方式</p>
</li>
<li><p><strong>规则：</strong> 每一行的高度由内容决定，列宽可通过 columnWidths 属性自定义。<br>支持多种列宽类型：FixedColumnWidth（固定宽度）、FlexColumnWidth（弹性比例）、FractionColumnWidth（百分比）等，通过 rowHeight 属性设置固定行高，或通过 TableRow 的 height 属性单独调整某一行，在 TableRow 中嵌套 Row、Column 或其他布局组件，实现复杂内容排版，通过 MediaQuery 动态调整列宽比例，适配不同屏幕尺寸</p>
</li>
<li><p><strong>注意：</strong> 避免在大量数据中直接使用 Table，推荐结合 ListView 或 CustomScrollView 分页加载</p>
</li>
<li><p><strong>推荐：</strong> 适用于需要行列对齐的复杂场景，Stack + Table：在表格中叠加其他组件（如悬浮按钮），Wrap + Table：结合弹性布局实现自适应表格</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Table(</span><br><span class="line">  columnWidths: const &#123;</span><br><span class="line">    0: FixedColumnWidth(80), // 第一列固定宽度</span><br><span class="line">    1: FlexColumnWidth(2), // 第二列弹性宽度（占比更大）</span><br><span class="line">    2: IntrinsicColumnWidth(), // 第三列自适应内容宽度</span><br><span class="line">  &#125;,</span><br><span class="line">  border: TableBorder.all(color: Colors.black, width: 1.0),</span><br><span class="line">  defaultVerticalAlignment: TableCellVerticalAlignment.middle, // 垂直居中</span><br><span class="line">  children: const [</span><br><span class="line">    TableRow(</span><br><span class="line">      // 表头行</span><br><span class="line">      decoration: BoxDecoration(color: Colors.grey),</span><br><span class="line">      children: [</span><br><span class="line">        Text(&#x27;姓名&#x27;, textAlign: TextAlign.center),</span><br><span class="line">        Text(&#x27;性别&#x27;, textAlign: TextAlign.center),</span><br><span class="line">        Text(&#x27;年龄&#x27;, textAlign: TextAlign.center),</span><br><span class="line">      ],</span><br><span class="line">    ),</span><br><span class="line">    TableRow(</span><br><span class="line">      // 数据行</span><br><span class="line">      children: [</span><br><span class="line">        Text(&#x27;张三&#x27;),</span><br><span class="line">        Text(&#x27;男&#x27;),</span><br><span class="line">        Text(&#x27;25&#x27;),</span><br><span class="line">      ],</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-fc6e105cb97388d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Table"></p>
<h2 id="8-CustomScrollView"><a href="#8-CustomScrollView" class="headerlink" title="8. CustomScrollView"></a>8. CustomScrollView</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 是 Flutter 处理复杂滚动场景的核心工具，通过灵活组合 Sliver 组件，可实现头部折叠、多类型布局、吸顶等高级交互，</p>
</li>
<li><p><strong>规则：</strong> 所有子组件共享同一个滚动控制器，确保联动滑动，仅渲染可见区域的 Sliver，其子组件必须是 Sliver 家族成员（如 SliverList、SliverGrid、SliverToBoxAdapter 等），普通组件需通过 SliverToBoxAdapter 包裹才能嵌入</p>
</li>
<li><p><strong>注意：</strong> Sliver 的使用规范及性能优化，必要时结合 <code>NestedScrollView</code> 解决嵌套滚动问题，避免嵌套滚动组件</p>
</li>
<li><p><strong>推荐：</strong> 实现统一且复杂的滚动效果。它像“粘合剂”一样将不同布局粘合为整体滚动区域，解决嵌套滚动冲突问题（例如 ListView 嵌套 GridView 需手动指定高度）</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Table(</span><br><span class="line">  columnWidths: const &#123;</span><br><span class="line">    0: FixedColumnWidth(80), // 第一列固定宽度</span><br><span class="line">    1: FlexColumnWidth(2), // 第二列弹性宽度（占比更大）</span><br><span class="line">    2: IntrinsicColumnWidth(), // 第三列自适应内容宽度</span><br><span class="line">  &#125;,</span><br><span class="line">  border: TableBorder.all(color: Colors.black, width: 1.0),</span><br><span class="line">  defaultVerticalAlignment: TableCellVerticalAlignment.middle, // 垂直居中</span><br><span class="line">  children: const [</span><br><span class="line">    TableRow(</span><br><span class="line">      // 表头行</span><br><span class="line">      decoration: BoxDecoration(color: Colors.grey),</span><br><span class="line">      children: [</span><br><span class="line">        Text(&#x27;姓名&#x27;, textAlign: TextAlign.center),</span><br><span class="line">        Text(&#x27;性别&#x27;, textAlign: TextAlign.center),</span><br><span class="line">        Text(&#x27;年龄&#x27;, textAlign: TextAlign.center),</span><br><span class="line">      ],</span><br><span class="line">    ),</span><br><span class="line">    TableRow(</span><br><span class="line">      // 数据行</span><br><span class="line">      children: [</span><br><span class="line">        Text(&#x27;张三&#x27;),</span><br><span class="line">        Text(&#x27;男&#x27;),</span><br><span class="line">        Text(&#x27;25&#x27;),</span><br><span class="line">      ],</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-d7b7599d3b1a3a9f.gif?imageMogr2/auto-orient/strip" alt="CustomScrollView"></p>
<h2 id="9-IndexedStack"><a href="#9-IndexedStack" class="headerlink" title="9. IndexedStack"></a>9. IndexedStack</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> IndexedStack 是 Stack 的子类（extends Stack），是一种层叠布局组件，专门用于在同一位置切换显示不同子组件</p>
</li>
<li><p><strong>规则：</strong> IndexedStack 继承自 Stack 组件，通过 index 属性控制当前显示的子组件。与 Stack 的叠加显示不同，IndexedStack 仅渲染指定索引的子项，其他子项处于隐藏状态，尺寸由最大的子组件决定，与当前显示的 index 无关。支持 alignment 对齐属性，可结合 Positioned 实现精确定位，所有子组件会预先加载到内存中，适合需要保持面状态的场景（如 Tab 切换）。通过 Offstage 隐藏非活跃子项，而非销毁</p>
</li>
<li><p><strong>注意：</strong> 子组件过多或复杂时可能引发内存压力，通过 setState 修改 index 实现无动画切换，适合高频操作场景，可通过 RepaintBoundary 优化绘制性能，需要精确定位时，推荐组合使用 Positioned 而非 Align</p>
</li>
<li><p><strong>推荐：</strong> 优先用于少量子项的场景，复杂页面建议结合 PageView 使用</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class DynamicIndexedStack extends StatefulWidget &#123;</span><br><span class="line">  @override </span><br><span class="line">  _DynamicIndexedStackState createState() =&gt; _DynamicIndexedStackState();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class _DynamicIndexedStackState extends State&lt;DynamicIndexedStack&gt; &#123;</span><br><span class="line">  int _currentIndex = 0;</span><br><span class="line"> </span><br><span class="line">  final List&lt;Widget&gt; _pages = [</span><br><span class="line">    PageWidget(title: &quot;页面1&quot;, color: Colors.red), </span><br><span class="line">    PageWidget(title: &quot;页面2&quot;, color: Colors.green), </span><br><span class="line">    PageWidget(title: &quot;页面3&quot;, color: Colors.blue), </span><br><span class="line">  ];</span><br><span class="line"> </span><br><span class="line">  @override </span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Column(</span><br><span class="line">      children: [</span><br><span class="line">        // 切换按钮 </span><br><span class="line">        Row(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center, </span><br><span class="line">          children: [</span><br><span class="line">            _buildButton(0, &quot;页面1&quot;),</span><br><span class="line">            _buildButton(1, &quot;页面2&quot;),</span><br><span class="line">            _buildButton(2, &quot;页面3&quot;),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">        </span><br><span class="line">        // IndexedStack区域 </span><br><span class="line">        Expanded(</span><br><span class="line">          child: IndexedStack(</span><br><span class="line">            index: _currentIndex,</span><br><span class="line">            children: _pages,</span><br><span class="line">          ),</span><br><span class="line">        )</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  Widget _buildButton(int index, String text) &#123;</span><br><span class="line">    return ElevatedButton(</span><br><span class="line">      onPressed: () =&gt; setState(() =&gt; _currentIndex = index),</span><br><span class="line">      style: ElevatedButton.styleFrom( </span><br><span class="line">        backgroundColor: _currentIndex == index ? Colors.amber  : null,</span><br><span class="line">      ),</span><br><span class="line">      child: Text(text),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// 带状态的页面组件（验证状态保留）</span><br><span class="line">class PageWidget extends StatefulWidget &#123;</span><br><span class="line">  final String title;</span><br><span class="line">  final Color color;</span><br><span class="line"> </span><br><span class="line">  PageWidget(&#123;required this.title,  required this.color&#125;); </span><br><span class="line"> </span><br><span class="line">  @override </span><br><span class="line">  _PageWidgetState createState() =&gt; _PageWidgetState();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class _PageWidgetState extends State&lt;PageWidget&gt; &#123;</span><br><span class="line">  int _counter = 0;</span><br><span class="line"> </span><br><span class="line">  @override </span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Container(</span><br><span class="line">      color: widget.color.withOpacity(0.3), </span><br><span class="line">      child: Center(</span><br><span class="line">        child: Column(</span><br><span class="line">          mainAxisSize: MainAxisSize.min, </span><br><span class="line">          children: [</span><br><span class="line">            Text(widget.title,  style: TextStyle(fontSize: 24)),</span><br><span class="line">            ElevatedButton(</span><br><span class="line">              onPressed: () =&gt; setState(() =&gt; _counter++),</span><br><span class="line">              child: Text(&quot;计数: $_counter&quot;),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-2e56190732b81b76.gif?imageMogr2/auto-orient/strip" alt="IndexedStack"></p>
<h2 id="10-Flex"><a href="#10-Flex" class="headerlink" title="10. Flex"></a>10. Flex</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 动态增减子元素：使用Key触发子树重建</p>
</li>
<li><p><strong>规则：</strong> Flex：更底层的 Row&#x2F;Column（需配合 Flexible）</p>
</li>
<li><p><strong>注意：</strong> 通过约束驱动（constraint-driven）实现空间比例分配，适合结构化界面</p>
</li>
<li><p><strong>推荐：</strong> 自定义排版</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Flex(</span><br><span class="line">  // 等价于Column</span><br><span class="line">  direction: Axis.vertical,</span><br><span class="line">  children: [</span><br><span class="line">    Expanded(</span><br><span class="line">      flex: 1, // 占1/3高度</span><br><span class="line">      child: Container(color: Colors.red),</span><br><span class="line">    ),</span><br><span class="line">    Expanded(</span><br><span class="line">      flex: 2, // 占2/3高度</span><br><span class="line">      child: Container(color: Colors.blue),</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-c2b3f0670fcb1fef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Flex"></p>
<h2 id="11-ListBody"><a href="#11-ListBody" class="headerlink" title="11. ListBody"></a>11. ListBody</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 是一个沿指定轴方向顺序排列子组件的布局控件，其核心特性是不限制主轴空间，需配合父容器约束使用</p>
</li>
<li><p><strong>规则：</strong> 必须嵌套在ListView、Column等有界容器内，子组件在交叉轴（如水平方向）自动拉伸，无需额外设置，ListBody仅负责线性排列，不包含滚动机制，ListView &#x3D; ListBody + 滚动功能，适合长列表</p>
</li>
<li><p><strong>注意：</strong> 子项数量动态或可能超出屏幕时，必须用ListView替代，避免布局溢出，子组件尺寸变化会触发整个ListBody重新布局，影响性能，对动态子项优先使用ListView.builder ，仅构建可见区域组件</p>
</li>
<li><p><strong>推荐：</strong> 固定数量子项的线性排列（如静态菜单栏、卡片组），需父容器明确尺寸约束（如SizedBox、ConstrainedBox）</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SingleChildScrollView(</span><br><span class="line">  // 提供滚动支持</span><br><span class="line">  child: ListBody(</span><br><span class="line">    mainAxis: Axis.vertical,</span><br><span class="line">    reverse: false,</span><br><span class="line">    children: &lt;Widget&gt;[</span><br><span class="line">      Container(height: 100, color: Colors.blue[50]),</span><br><span class="line">      Container(height: 100, color: Colors.blue[100]),</span><br><span class="line">      Container(height: 100, color: Colors.blue[200]),</span><br><span class="line">    ],</span><br><span class="line">  ),</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-d9eb3bba462142d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ListBody"></p>
<h1 id="单子组件布局控件"><a href="#单子组件布局控件" class="headerlink" title="单子组件布局控件"></a>单子组件布局控件</h1><h2 id="1-Container"><a href="#1-Container" class="headerlink" title="1. Container"></a>1. Container</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 最常用的布局 Widget，可以包含一个子Widget，并可以设置 padding、margin、边框、背景等</p>
</li>
<li><p><strong>规则：</strong> 如果没有子 Widget，Container 会尽可能大；如果有子 Widget，则根据子 Widget 和自身约束调整大小</p>
</li>
<li><p><strong>注意：</strong> 在没有约束的情况下，Container会尽可能大（比如占满整个屏幕）；在有约束的情况下（如父Widget是Column），Container如果没有子Widget，则会收缩到没有大小</p>
</li>
<li><p><strong>推荐：</strong> 作为其他Widget的容器，用于装饰或设置间距</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Container(</span><br><span class="line">  padding: const EdgeInsets.all(8.0),</span><br><span class="line">  margin: const EdgeInsets.all(16.0),</span><br><span class="line">  decoration: BoxDecoration(</span><br><span class="line">    color: Colors.blue,</span><br><span class="line">    borderRadius: BorderRadius.circular(8.0),</span><br><span class="line">  ),</span><br><span class="line">  child: const Text(&#x27;Hello World&#x27;),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-419c86fa35335118.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Container页面"></p>
<h2 id="2-Padding"><a href="#2-Padding" class="headerlink" title="2. Padding"></a>2. Padding</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 给子Widget设置内边距</p>
</li>
<li><p><strong>规则：</strong> 只有一个子Widget</p>
</li>
<li><p><strong>注意：</strong> 与Container的padding不同，Padding是一个独立的Widget</p>
</li>
<li><p><strong>推荐：</strong> 当需要内边距但不需要Container的其他装饰时使用</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Container(</span><br><span class="line">  decoration: BoxDecoration(</span><br><span class="line">    color: Colors.blue,</span><br><span class="line">    borderRadius: BorderRadius.circular(12),</span><br><span class="line">  ),</span><br><span class="line">  child: const Padding(</span><br><span class="line">    padding: EdgeInsets.symmetric(horizontal: 24, vertical: 16),</span><br><span class="line">    child: Text(</span><br><span class="line">      &quot;Flutter Padding 背景颜色示例&quot;,</span><br><span class="line">      style: TextStyle(color: Colors.white),</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-7fcd47aa694b5566.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Padding"></p>
<h2 id="3-Align"><a href="#3-Align" class="headerlink" title="3. Align"></a>3. Align</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 控制子Widget在父Widget中的对齐方式</p>
</li>
<li><p><strong>规则：</strong> 通过alignment属性设置对齐方式（如Alignment.center）</p>
</li>
<li><p><strong>注意：</strong> 如果父Widget没有约束，Align会尽可能大；如果有约束，则根据约束调整大小，并将子Widget对齐</p>
</li>
<li><p><strong>推荐：</strong> 用于精确控制子Widget的位置</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Container(</span><br><span class="line">  height: 200,</span><br><span class="line">  width: 200,</span><br><span class="line">  color: Colors.grey,</span><br><span class="line">  child: Align(</span><br><span class="line">    alignment: Alignment.bottomRight,</span><br><span class="line">    child: Container(width: 50, height: 50, color: Colors.red),</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-8ee9f7561ef7216b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Align"></p>
<h2 id="4-Center"><a href="#4-Center" class="headerlink" title="4. Center"></a>4. Center</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 用于将子组件在父组件中水平和垂直居中显示（是Align(alignment: Alignment.center)的简写），Center 组件继承自 Align，因此它本质上是一个简化版的 Align，专门用于居中布局</p>
</li>
<li><p><strong>规则：</strong> 如果 Center 没有子组件且父容器提供无界约束（unbounded），则 Center 会尽可能缩小自身尺寸，如果父容器提供有界约束（bounded），则 Center 会扩展到父容器的大小。有子组件时，Center 的尺寸会根据子组件的大小和父容器的约束动态调整。<br>如果设置了 widthFactor 或 heightFactor，子组件的尺寸会按比例缩放（例如 widthFactor: 2 会使子组件宽度翻倍）</p>
</li>
<li><p><strong>注意：</strong> widthFactor 和 heightFactor用于调整子组件的宽度和高度比例，避免嵌套过多层级，如果父容器限制了尺寸（如 <code>SizedBox</code>），需确保 <code>Center</code> 的子组件尺寸在约束范围内</p>
</li>
<li><p><strong>推荐：</strong> 快速居中单个组件，与复杂布局结合，响应式布局</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Center(</span><br><span class="line">  child: Container(</span><br><span class="line">    width: 200,</span><br><span class="line">    height: 100,</span><br><span class="line">    color: Colors.blue,</span><br><span class="line">    child: const Text(</span><br><span class="line">      &quot;居中内容&quot;,</span><br><span class="line">      style: TextStyle(color: Colors.white),</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-40e2db3a630d7d19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Center"></p>
<h2 id="5-AspectRatio"><a href="#5-AspectRatio" class="headerlink" title="5. AspectRatio"></a>5. AspectRatio</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 强制子Widget保持指定的宽高比</p>
</li>
<li><p><strong>规则：</strong> 需要设置aspectRatio属性（宽&#x2F;高）</p>
</li>
<li><p><strong>注意：</strong> 父Widget必须提供约束，否则无法计算</p>
</li>
<li><p><strong>推荐：</strong> 用于需要固定宽高比的场景，如播放器</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AspectRatio(</span><br><span class="line">  aspectRatio: 16 / 9,</span><br><span class="line">  child: Container(color: Colors.blue),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-7410e57ee840cd9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="AspectRatio"></p>
<h2 id="6-ConstrainedBox"><a href="#6-ConstrainedBox" class="headerlink" title="6. ConstrainedBox"></a>6. ConstrainedBox</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 对子Widget施加额外的约束（BoxConstraints）</p>
</li>
<li><p><strong>规则：</strong> 可以设置最小、最大宽高</p>
</li>
<li><p><strong>注意：</strong> 如果子Widget本身有约束，可能会冲突，此时以更紧的约束为准</p>
</li>
<li><p><strong>推荐：</strong> 用于需要限制子Widget大小的情况</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ConstrainedBox(</span><br><span class="line">  constraints: const BoxConstraints(</span><br><span class="line">    minWidth: 100,</span><br><span class="line">    maxWidth: 200,</span><br><span class="line">    minHeight: 50,</span><br><span class="line">    maxHeight: 100,</span><br><span class="line">  ),</span><br><span class="line">  child: Container(color: Colors.red),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-5858d221ad0961c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ConstrainedBox"></p>
<h2 id="7-UnconstrainedBox"><a href="#7-UnconstrainedBox" class="headerlink" title="7. UnconstrainedBox"></a>7. UnconstrainedBox</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 解除父容器的约束，允许子控件按照自身大小绘制，然后根据实际大小再约束</p>
</li>
<li><p><strong>规则：</strong> 子组件，其尺寸不会受到UnconstrainedBox的约束，若子组件尺寸超过父容器区域，Debug模式下会显示黄色溢出警告（Release模式会裁剪），若父级有多个约束组件（如嵌套的ConstrainedBox），UnconstrainedBox只能突破直接父级的约束，无法突破更高层约束</p>
</li>
<li><p><strong>注意：</strong> constrainedAxis：null（默认）：完全解除约束 &#x2F; Axis.horizontal ：仅水平方向解除约束，垂直方向仍受父级限制 &#x2F; Axis.vertical ：仅垂直方向解除约束，水平方向受限制，过度使用可能导致布局计算复杂化，建议仅在必要时使用</p>
</li>
<li><p><strong>推荐：</strong> 适用于需要突破父容器约束的场景，例如在ListView或AppBar中保持子组件原始尺寸</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ListView(</span><br><span class="line">  children: [</span><br><span class="line">    // 原始Container被拉伸至屏幕宽度 </span><br><span class="line">    Container(width: 200, height: 100, color: Colors.red), </span><br><span class="line">    </span><br><span class="line">    // 使用UnconstrainedBox保持原始尺寸</span><br><span class="line">    UnconstrainedBox(</span><br><span class="line">      child: Container(width: 200, height: 100, color: Colors.blue), </span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-ffe0106484ea43f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="UnconstrainedBox"></p>
<h2 id="8-SizedBox"><a href="#8-SizedBox" class="headerlink" title="8. SizedBox"></a>8. SizedBox</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 可以指定固定大小的盒子，也可以用于设置间隔</p>
</li>
<li><p><strong>规则：</strong> 如果指定了width和height，则强制子Widget使用该大小（如果子Widget有约束，则可能会强制调整）</p>
</li>
</ul>
</blockquote>
<ol>
<li>SizedBox.shrink()	零尺寸占位符</li>
<li>SizedBox.expand()	扩展填充占位符</li>
<li>SizedBox.fromSize()	指定尺寸占位符<blockquote>
<ul>
<li><p><strong>注意：</strong> 当没有子Widget时，SizedBox会占据指定大小的空间；有子Widget时，则强制子Widget大小为指定大小</p>
</li>
<li><p><strong>推荐：</strong> 用于固定尺寸的盒子或间隔（如SizedBox(width: 10)）</p>
</li>
</ul>
</blockquote>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SizedBox(</span><br><span class="line">  width: 100,</span><br><span class="line">  height: 100,</span><br><span class="line">  child: Container(color: Colors.green),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-e740fea4b1386c95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="SizedBox"></p>
<h2 id="9-FractionallySizedBox"><a href="#9-FractionallySizedBox" class="headerlink" title="9. FractionallySizedBox"></a>9. FractionallySizedBox</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 子Widget的大小相对于父Widget的百分比</p>
</li>
<li><p><strong>规则：</strong> 需要设置widthFactor和heightFactor（0.0到1.0）</p>
</li>
<li><p><strong>注意：</strong> 父Widget必须提供约束，否则无法计算百分比</p>
</li>
<li><p><strong>推荐：</strong> 用于需要相对父容器百分比大小的场景</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Container(</span><br><span class="line">  width: 200,</span><br><span class="line">  height: 200,</span><br><span class="line">  color: Colors.blue,</span><br><span class="line">  child: FractionallySizedBox(</span><br><span class="line">    widthFactor: 0.5,</span><br><span class="line">    heightFactor: 0.5,</span><br><span class="line">    child: Container(color: Colors.red),</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-b0f9ae5d677c6ee7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="FractionallySizedBox"></p>
<h2 id="10-Transform"><a href="#10-Transform" class="headerlink" title="10. Transform"></a>10. Transform</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 对子Widget进行矩阵变换（平移、旋转、缩放等）</p>
</li>
<li><p><strong>规则：</strong> 变换不影响布局，变换是在布局之后进行的，所以可能会超出父Widget区域</p>
</li>
<li><p><strong>注意：</strong> 变换后可能会超出父Widget范围，导致被裁剪（可以使用Clip.none避免）</p>
</li>
<li><p><strong>推荐：</strong> 用于需要变换的场景，如旋转一个图标</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Transform.rotate(</span><br><span class="line">  angle: 3.14 / 4, // 45度</span><br><span class="line">  child: Container(width: 100, height: 100, color: Colors.blue),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-d10cddf8801e61d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Transform"></p>
<h2 id="11-Baseline"><a href="#11-Baseline" class="headerlink" title="11. Baseline"></a>11. Baseline</h2><blockquote>
<ul>
<li><strong>说明：</strong> 根据子Widget的基线对齐（常用于文本）, Baseline 的对齐方式有两种类型:</li>
</ul>
<p> <strong>alphabetic：</strong> 对齐字母底部基线（适用于英文等拉丁文字）</p>
<p> <strong>ideographic：</strong> 对齐表意文字基线（适用于中文、日文等）</p>
<ul>
<li><p><strong>规则：</strong> 需要设置baseline和baselineType（如TextBaseline.alphabetic）</p>
</li>
<li><p><strong>注意：</strong> 需要子Widget有基线（如Text），否则无效</p>
</li>
<li><p><strong>推荐：</strong> 尤其适用于文字排版场景，处理混合文字（如中英文）时，通过baselineType区分基线类型，避免排版错乱</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const Row(</span><br><span class="line">  children: [</span><br><span class="line">    Baseline(</span><br><span class="line">      baseline: 50.0,</span><br><span class="line">      baselineType: TextBaseline.alphabetic,</span><br><span class="line">      child: Text(&#x27;Hello&#x27;, style: TextStyle(fontSize: 20)),</span><br><span class="line">    ),</span><br><span class="line">    Baseline(</span><br><span class="line">      baseline: 50.0,</span><br><span class="line">      baselineType: TextBaseline.alphabetic,</span><br><span class="line">      child: Text(&#x27;World&#x27;, style: TextStyle(fontSize: 30)),</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-cb638ee25dbc7368.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Baseline"></p>
<h2 id="12-FittedBox"><a href="#12-FittedBox" class="headerlink" title="12. FittedBox"></a>12. FittedBox</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 对子Widget进行缩放和位置调整，以使其适应可用空间</p>
</li>
<li><p><strong>规则：</strong> 通过fit属性设置适应方式（如BoxFit.contain）</p>
</li>
<li><p><strong>注意：</strong> 如果子Widget没有约束，可能会出现问题</p>
</li>
<li><p><strong>推荐：</strong> 用于需要缩放的场景，如保持图片比例并适应容器</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Container(</span><br><span class="line">  width: 200,</span><br><span class="line">  height: 100,</span><br><span class="line">  color: Colors.amber,</span><br><span class="line">  child: FittedBox(</span><br><span class="line">    fit: BoxFit.contain,</span><br><span class="line">    child: Image.network(</span><br><span class="line">        &#x27;https://upload-images.jianshu.io/upload_images/1976231-cb638ee25dbc7368.png&#x27;),</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-cba023ab829a3898.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="FittedBox"></p>
<h2 id="13-OverflowBox"><a href="#13-OverflowBox" class="headerlink" title="13. OverflowBox"></a>13. OverflowBox</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 允许子Widget超出父Widget的约束，从而在父容器之外显示</p>
</li>
<li><p><strong>规则：</strong> 设置自己的约束，子Widget可以突破父Widget的约束</p>
</li>
<li><p><strong>注意：</strong> 可能导致布局溢出（无警告），使用时需注意</p>
</li>
<li><p><strong>推荐：</strong> 在需要突破约束时使用，但需谨慎</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Container(</span><br><span class="line">  color: Colors.green,</span><br><span class="line">  width: 200.0,</span><br><span class="line">  height: 200.0,</span><br><span class="line">  padding: const EdgeInsets.all(50.0),</span><br><span class="line">  child: OverflowBox(</span><br><span class="line">    alignment: Alignment.topLeft,</span><br><span class="line">    maxWidth: 400.0,</span><br><span class="line">    maxHeight: 400.0,</span><br><span class="line">    child: Container(</span><br><span class="line">      color: Colors.blueGrey,</span><br><span class="line">      width: 300.0,</span><br><span class="line">      height: 300.0,</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-91814fc4a7d45d92.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="OverflowBox"></p>
<h2 id="14-LimitedBox"><a href="#14-LimitedBox" class="headerlink" title="14. LimitedBox"></a>14. LimitedBox</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 一个用于限制子组件最大尺寸的布局组件，当父Widget没有约束时，限制子Widget的最大宽高</p>
</li>
<li><p><strong>规则：</strong> 在无约束时生效（如在ListView中，ListView沿着主轴方向有约束，但交叉轴方向无约束，此时在交叉轴方向使用LimitedBox可以限制最大宽高）</p>
</li>
<li><p><strong>注意：</strong> 在父Widget有约束时无效</p>
</li>
<li><p><strong>推荐：</strong> 在ListView中限制交叉轴方向的大小</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Row(</span><br><span class="line">  children: [</span><br><span class="line">    Container(</span><br><span class="line">      color: Colors.grey,</span><br><span class="line">      width: 100.0,</span><br><span class="line">    ),</span><br><span class="line">    LimitedBox(</span><br><span class="line">      maxWidth: 150.0,</span><br><span class="line">      maxHeight: 150.0,</span><br><span class="line">      child: Container(</span><br><span class="line">        color: Colors.lightGreen,</span><br><span class="line">        width: 250.0,</span><br><span class="line">        height: 250.0,</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-d1f241904b33084f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="LimitedBox"></p>
<h2 id="15-IntrinsicWidth-x2F-IntrinsicHeight"><a href="#15-IntrinsicWidth-x2F-IntrinsicHeight" class="headerlink" title="15. IntrinsicWidth&#x2F;IntrinsicHeight"></a>15. IntrinsicWidth&#x2F;IntrinsicHeight</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 调整子Widget到其内部内容的高度或宽度（有性能问题，慎用）</p>
</li>
<li><p><strong>规则：</strong> 迫使子Widget计算其内部内容的最大高度或宽度，并调整其他子Widget到相同高度或宽度</p>
</li>
<li><p><strong>注意：</strong> 性能差，因为需要遍历子Widget两次（一次测量，一次布局）</p>
</li>
<li><p><strong>推荐：</strong> 尽量避免使用，寻找其他布局方式替代。如果必须使用，注意性能影响</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Column(</span><br><span class="line">  mainAxisAlignment: MainAxisAlignment.start,</span><br><span class="line">  children: [</span><br><span class="line">    IntrinsicWidth(</span><br><span class="line">      stepWidth: 100,</span><br><span class="line">      child: Container(</span><br><span class="line">        color: Colors.blue,</span><br><span class="line">        child: Center(</span><br><span class="line">          child: Container(</span><br><span class="line">            color: Colors.red,</span><br><span class="line">            width: 50,</span><br><span class="line">            height: 50,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-c8063e592d34fd20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="IntrinsicWidth"></p>
<h2 id="16-CustomSingleChildLayout-x2F-CustomMultiChildLayout"><a href="#16-CustomSingleChildLayout-x2F-CustomMultiChildLayout" class="headerlink" title="16. CustomSingleChildLayout&#x2F;CustomMultiChildLayout"></a>16. CustomSingleChildLayout&#x2F;CustomMultiChildLayout</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 使用自定义的布局代理进行布局，可以实现复杂的布局效果，<strong>CustomSingleChildLayout</strong> 是一个用于控制单个子组件布局的组件，<strong>CustomMultiChildLayout</strong> 是一个用于控制多个子组件布局的组件</p>
</li>
<li><p><strong>规则：</strong> 需要自定义LayoutDelegate，SingleChildLayoutDelegate 来实现布局逻辑。该组件适用于需要对单个子组件进行复杂或非常规布局的场景，例如需要精确控制子组件的位置或尺寸时，MultiChildLayoutDelegate 来实现布局逻辑，适用于需要对多个子组件进行复杂布局的场景</p>
</li>
<li><p><strong>注意：</strong> 相对复杂，需要自己实现布局逻辑</p>
</li>
<li><p><strong>推荐：</strong>当其他布局Widget无法满足需求时使用，自定义的网格布局、层叠布局</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CustomSingleChildLayout(</span><br><span class="line">  delegate: _MyDelegate(),</span><br><span class="line">  child: Container(color: Colors.blue), </span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line">class _MyDelegate extends SingleChildLayoutDelegate &#123;</span><br><span class="line">  @override</span><br><span class="line">  BoxConstraints getConstraintsForChild(BoxConstraints constraints) &#123;</span><br><span class="line">    return constraints.loosen();  // 解除子组件约束 </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  @override</span><br><span class="line">  Offset getPositionForChild(Size size, Size childSize) &#123;</span><br><span class="line">    return Offset(size.width/2,  0); // 顶部居中</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  @override</span><br><span class="line">  bool shouldRelayout(covariant SingleChildLayoutDelegate oldDelegate) &#123;</span><br><span class="line">    // TODO: implement shouldRelayout</span><br><span class="line">    throw UnimplementedError();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-c723cf1e5f55eb82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="CustomSingleChildLayout"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Container(</span><br><span class="line">  width: 200.0,</span><br><span class="line">  height: 100.0,</span><br><span class="line">  color: Colors.yellow,</span><br><span class="line">  child: CustomMultiChildLayout(</span><br><span class="line">    delegate: TestLayoutDelegate(),</span><br><span class="line">    children: &lt;Widget&gt;[</span><br><span class="line">      LayoutId(</span><br><span class="line">        id: TestLayoutDelegate.title,</span><br><span class="line">        child: Container(</span><br><span class="line">          color: Colors.red,</span><br><span class="line">          child: const Text(&#x27;Title&#x27;),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      LayoutId(</span><br><span class="line">        id: TestLayoutDelegate.description,</span><br><span class="line">        child: Container(</span><br><span class="line">          color: Colors.green,</span><br><span class="line">          child: const Text(&#x27;Description&#x27;),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    ],</span><br><span class="line">  ),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">class TestLayoutDelegate extends MultiChildLayoutDelegate &#123;</span><br><span class="line">  static const String title = &#x27;title&#x27;;</span><br><span class="line">  static const String description = &#x27;description&#x27;;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  void performLayout(Size size) &#123;</span><br><span class="line">    final BoxConstraints constraints = BoxConstraints(maxWidth: size.width);</span><br><span class="line">    final Size titleSize = layoutChild(title, constraints);</span><br><span class="line">    positionChild(title, const Offset(0.0, 0.0));</span><br><span class="line">    final double descriptionY = titleSize.height;</span><br><span class="line">    layoutChild(description, constraints);</span><br><span class="line">    positionChild(description, Offset(0.0, descriptionY));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  bool shouldRelayout(TestLayoutDelegate oldDelegate) =&gt; false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-697fa21cb3fbdfa3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="CustomMultiChildLayout"></p>
<h2 id="17-Placeholder"><a href="#17-Placeholder" class="headerlink" title="17. Placeholder"></a>17. Placeholder</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 主要用于在开发过程中快速构建页面骨架，加速页面流程的运行。它可以在布局中占位，帮助开发者快速预览页面结构。Placeholder 的大小默认适合其容器，若位于无界空间（unbounded space），则根据 fallbackWidth 和 fallbackHeight 调整大小。Placeholder 支持自定义颜色、线条宽度、fallbackHeight 和 fallbackWidth</p>
</li>
<li><p><strong>规则：</strong> 可以在 Row 或 Column 中使用 Placeholder，但需要通过 fallbackHeight 和 fallbackWidth 限定大小，在无界空间中，可以使用 fallbackWidth 和 fallbackHeight 来限定占位符的大小</p>
</li>
<li><p><strong>注意：</strong> 虽然 Placeholder 是一个简单的占位符，但在复杂的布局中过多使用可能会影响性能，因此应合理使用</p>
</li>
<li><p><strong>推荐：</strong> 在页面开发初期，可以使用 Placeholder 来快速构建页面骨架，帮助开发者快速预览页面结构</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const Center(</span><br><span class="line">  child: Column(</span><br><span class="line">    mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">    children: &lt;Widget&gt;[</span><br><span class="line">      SizedBox(</span><br><span class="line">        height: 100,</span><br><span class="line">        child: Row(</span><br><span class="line">          children: [</span><br><span class="line">            Placeholder(</span><br><span class="line">              fallbackWidth: 100,</span><br><span class="line">              color: Colors.green,</span><br><span class="line">              strokeWidth: 10,</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      SizedBox(</span><br><span class="line">        width: 100,</span><br><span class="line">        child: Column(</span><br><span class="line">          children: [</span><br><span class="line">            Placeholder(</span><br><span class="line">              fallbackHeight: 100,</span><br><span class="line">              color: Colors.green,</span><br><span class="line">              strokeWidth: 10,</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    ],</span><br><span class="line">  ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-6ada42602ae47cb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Placeholder"></p>
<h1 id="弹性布局辅助控件"><a href="#弹性布局辅助控件" class="headerlink" title="弹性布局辅助控件"></a>弹性布局辅助控件</h1><h2 id="1-Expanded"><a href="#1-Expanded" class="headerlink" title="1. Expanded"></a>1. Expanded</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 作为Row、Column或Flex的子Widget，可以扩展以填充主轴上的可用空间</p>
</li>
<li><p><strong>规则：</strong> 必须位于Row、Column或Flex内。flex参数用于分配剩余空间的比例（默认为1）</p>
</li>
<li><p><strong>注意：</strong> 在Row或Column中，如果子Widget的总主轴长度超过可用空间，使用Expanded可以避免溢出，因为它会压缩子Widget（强制子Widget适应分配的空间）</p>
</li>
<li><p><strong>推荐：</strong> 在需要子Widget按比例分配空间时使用，比例分割布局（如 70%-30% 面板）</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Row(</span><br><span class="line">  children: [</span><br><span class="line">    Expanded(flex: 2, child: Container(color: Colors.red)), // 占2/3空间</span><br><span class="line">    Expanded(flex: 1, child: Container(color: Colors.green)), // 占1/3空间</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-96eab57e36b14c38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Expanded"></p>
<h2 id="2-Flexible"><a href="#2-Flexible" class="headerlink" title="2. Flexible"></a>2. Flexible</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 与Expanded类似，但更灵活。Expanded是Flexible(fit: FlexFit.tight)的简写。Flexible的默认fit是FlexFit.loose，即子Widget不需要填满分配的空间</p>
</li>
<li><p><strong>规则：</strong> 同样必须位于Row、Column或Flex内</p>
</li>
<li><p><strong>注意：</strong> Flexible与Expanded的区别：Expanded会强制子Widget填满空间，而Flexible则允许子Widget使用更小的空间</p>
</li>
<li><p><strong>推荐：</strong> 当需要子Widget有弹性但不需要强制填满时使用，自适应表格列</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Row(</span><br><span class="line">  children: [</span><br><span class="line">    Flexible(</span><br><span class="line">      child: Container(height: 50, color: Colors.red),</span><br><span class="line">    ),</span><br><span class="line">    </span><br><span class="line">    Flexible(</span><br><span class="line">      child: Container(</span><br><span class="line">          height: 100,</span><br><span class="line">          color: Colors</span><br><span class="line">              .green), // 这个容器高度100，但Row高度由最高子Widget决定（100），红色容器高度50，但会被拉伸到100（因为Row交叉轴是垂直方向，默认是stretch）</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><code>注意：Row的交叉轴对齐默认是stretch，所以子Widget在垂直方向会被拉伸。如果不想被拉伸，可以设置crossAxisAlignment: CrossAxisAlignment.start。</code></p>
<p><img src="https://upload-images.jianshu.io/upload_images/1976231-9f0780f4fe1947a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Flexible"></p>
<h2 id="3-Spacer"><a href="#3-Spacer" class="headerlink" title="3. Spacer"></a>3. Spacer</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 在弹性布局中占据剩余空间（相当于<code>Expanded</code>包裹一个空的<code>SizedBox</code>）,是一个用于在 Row、Column 或 Flex 布局中填充剩余空间的空白组件</p>
</li>
<li><p><strong>规则：</strong> 它会根据 flex 参数按比例占据主轴（水平或垂直方向）的可用空间，类似弹性布局中的“弹簧”，flex（默认值为1）：指定空间分配比例。例如，两个 Spacer(flex: 2) 和 Spacer(flex: 1) 会按 2:1 分配剩余空间</p>
</li>
<li><p><strong>注意：</strong> 必须作为 Row、Column 或 Flex 的直接子组件，空间不足时可能引发溢出错误（需确保父容器有足够空间）</p>
</li>
<li><p><strong>推荐：</strong> 等间距按钮组，左右对齐元素，多比例空间分配</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Column(</span><br><span class="line">  children: [</span><br><span class="line">    const Text(</span><br><span class="line">      &quot;顶部标题&quot;,</span><br><span class="line">      style: TextStyle(</span><br><span class="line">        color: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">    const Spacer(flex: 1),</span><br><span class="line">    const Row(</span><br><span class="line">      children: [</span><br><span class="line">        Text(</span><br><span class="line">          &quot;左侧文本&quot;,</span><br><span class="line">          style: TextStyle(</span><br><span class="line">            color: Colors.black,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        Spacer(flex: 2),</span><br><span class="line">        Text(&quot;中间文本&quot;,</span><br><span class="line">            style: TextStyle(</span><br><span class="line">              color: Colors.red,</span><br><span class="line">            )),</span><br><span class="line">        Spacer(flex: 1),</span><br><span class="line">        Icon(Icons.star),</span><br><span class="line">      ],</span><br><span class="line">    ),</span><br><span class="line">    const Spacer(flex: 3), // 下方大面积留白</span><br><span class="line">    ElevatedButton(</span><br><span class="line">      onPressed: () &#123;&#125;,</span><br><span class="line">      child: const Text(</span><br><span class="line">        &quot;确认&quot;,</span><br><span class="line">        style: TextStyle(</span><br><span class="line">          color: Colors.blue,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-252bd90059c6ef74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Spacer"></p>
<h1 id="层叠布局辅助控件"><a href="#层叠布局辅助控件" class="headerlink" title="层叠布局辅助控件"></a>层叠布局辅助控件</h1><h2 id="1-Positioned"><a href="#1-Positioned" class="headerlink" title="1. Positioned"></a>1. Positioned</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 仅作为 Stack 的直接子组件使用，用于在层叠布局中精确定位子组件，类似 CSS 的绝对定位</p>
</li>
<li><p><strong>规则：</strong> left、right、top、bottom（控制子组件相对于父 Stack 边缘的距离），width、height（可选，用于固定子组件尺寸），支持 Positioned(topLeft&#x2F;bottomRight) 等快捷方式</p>
</li>
<li><p><strong>注意：</strong> 若设置 left + right，则不能同时设置 width；同理适用于 top + bottom 与 height 的冲突，未设置尺寸时，需至少指定两个相对定位属性（如 left 和 right）以确定布局范围</p>
</li>
<li><p><strong>推荐：</strong> 结合 MediaQuery 动态计算定位值，适配不同屏幕尺寸，使用 Align 简化对齐逻辑</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Stack(</span><br><span class="line">  fit: StackFit.expand, // 填充父容器</span><br><span class="line">  children: [</span><br><span class="line">    Positioned(</span><br><span class="line">      left: 10,</span><br><span class="line">      right: 10,</span><br><span class="line">      height: 80,</span><br><span class="line">      child: Container(color: Colors.orange), // 水平居中且宽度自适应</span><br><span class="line">    ),</span><br><span class="line">    Positioned(</span><br><span class="line">      top: 10,</span><br><span class="line">      bottom: 10,</span><br><span class="line">      width: 80,</span><br><span class="line">      child: Container(color: Colors.purple), // 垂直居中且高度自适应</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-676bbb12f2ea47dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Positioned"></p>
<h2 id="2-PositionedDirectional"><a href="#2-PositionedDirectional" class="headerlink" title="2. PositionedDirectional"></a>2. PositionedDirectional</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 它用于在 Stack 中根据 textDirection 的方向来定位子部件。与 Positioned 不同，PositionedDirectional 接受的是一个偏移量和一个 textDirection 参数，从而决定子部件相对 Stack 的位置。这使得在布局中使用 PositionedDirectional 更加灵活和方便</p>
</li>
<li><p><strong>规则：</strong> start：在 TextDirection.ltr （从左到右）时对应 left，在 TextDirection.rtl （从右到左）时对应 right。end：在 TextDirection.ltr 时对应 right，在 TextDirection.rtl 时对应 left。top 和 bottom 保持固定方向，不受文本方向影响</p>
</li>
<li><p><strong>注意：</strong> 必须作为 Stack 的直接子组件，否则会抛出错误，支持 width 和 height 属性，但需注意与 start&#x2F;end 和 top&#x2F;bottom 的组合规则</p>
</li>
<li><p><strong>推荐：</strong> 可通过 AnimatedPositionedDirectional 实现位置变化的动画效果，适配不同语言方向的布局（如阿拉伯语、希伯来语）</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Directionality(</span><br><span class="line">  // 设置文本方向（ltr 或 rtl）</span><br><span class="line">  textDirection: TextDirection.rtl,</span><br><span class="line">  child: Stack(</span><br><span class="line">    children: [</span><br><span class="line">      PositionedDirectional(</span><br><span class="line">        start: 20.0, // 在 rtl 环境下对应 right=20</span><br><span class="line">        top: 50.0,</span><br><span class="line">        child: Container(</span><br><span class="line">          width: 100,</span><br><span class="line">          height: 100,</span><br><span class="line">          color: Colors.blue,</span><br><span class="line">          child: const Center(child: Text(&#x27;动态定位&#x27;)),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      // 其他子组件...</span><br><span class="line">    ],</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-1fa3d07137ff4111.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="PositionedDirectional"></p>
<h1 id="滚动布局相关控件"><a href="#滚动布局相关控件" class="headerlink" title="滚动布局相关控件"></a>滚动布局相关控件</h1><h2 id="1-SingleChildScrollView"><a href="#1-SingleChildScrollView" class="headerlink" title="1. SingleChildScrollView"></a>1. SingleChildScrollView</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 为单个子控件添加滚动功能，支持垂直或水平滚动，类似于 Android 中的 ScrollView 或 iOS 中的 UIScrollView</p>
</li>
<li><p><strong>规则：</strong></p>
</li>
</ul>
</blockquote>
<ol>
<li><strong>scrollDirection：</strong> 滚动方向，默认为垂直方向（Axis.vertical）。</li>
<li><strong>reverse：</strong> 是否反转滚动方向，默认为 false。</li>
<li><strong>padding：</strong> 子组件的内边距。</li>
<li><strong>primary：</strong> 是否为主滚动视图，用于判断是否自动生成控制器。</li>
<li><strong>physics：</strong> 控制滚动行为，如滑动速度和边缘效应。</li>
<li><strong>controller：</strong> 用于控制滚动位置的对象。</li>
<li><strong>child：</strong> 要包含在 SingleChildScrollView 中的子组件。</li>
<li><strong>dragStartBehavior：</strong> 拖动开始行为，默认为 DragStartBehavior.start。</li>
<li><strong>clipBehavior：</strong> 裁剪行为，默认为 Clip.hardEdge。</li>
<li><strong>restorationId：</strong> 恢复标识。</li>
<li><strong>keyboardDismissBehavior：</strong> 键盘关闭行为，默认为<br>ScrollViewKeyboardDismissBehavior.manual。<blockquote>
<ul>
<li><p><strong>注意：</strong> 不支持 Sliver 延迟加载，内容过多时性能较差，建议改用 ListView，适用于内容不会超过屏幕尺寸太多的情况，因为当内容超出屏幕尺寸较多时，性能会受到影响</p>
</li>
<li><p><strong>推荐：</strong> 单个子组件的滚动（如表单、文章详情页），内容量较小，无需动态加载的场景</p>
</li>
</ul>
</blockquote>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Scrollbar(</span><br><span class="line">  child: SingleChildScrollView(</span><br><span class="line">    scrollDirection: Axis.vertical,</span><br><span class="line">    child: Center(</span><br><span class="line">      child: Column(</span><br><span class="line">        children: &#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span><br><span class="line">            .split(&#x27;&#x27;)</span><br><span class="line">            .map((c) =&gt; Container(</span><br><span class="line">                  margin: const EdgeInsets.all(8.0),</span><br><span class="line">                  padding: const EdgeInsets.all(16.0),</span><br><span class="line">                  decoration: BoxDecoration(</span><br><span class="line">                    color: Colors.red,</span><br><span class="line">                    borderRadius: BorderRadius.circular(8.0),</span><br><span class="line">                    boxShadow: [</span><br><span class="line">                      BoxShadow(</span><br><span class="line">                        color: Colors.black.withOpacity(0.5),</span><br><span class="line">                        blurRadius: 4.0,</span><br><span class="line">                        offset: const Offset(2.0, 2.0),</span><br><span class="line">                      ),</span><br><span class="line">                    ],</span><br><span class="line">                  ),</span><br><span class="line">                  child: Text(</span><br><span class="line">                    c,</span><br><span class="line">                    style: const TextStyle(</span><br><span class="line">                        color: Colors.white, fontSize: 24.0),</span><br><span class="line">                  ),</span><br><span class="line">                ))</span><br><span class="line">            .toList(),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-49419b2a0ccc31e5.gif?imageMogr2/auto-orient/strip" alt="SingleChildScrollView"></p>
<h2 id="2-PageView"><a href="#2-PageView" class="headerlink" title="2. PageView"></a>2. PageView</h2><blockquote>
<ul>
<li><strong>说明：</strong> 是一个分页滚动视图，用于实现可滑动的页面切换（水平&#x2F;垂直）</li>
</ul>
</blockquote>
<ol>
<li>PageView()：静态页面列表</li>
<li>PageView.builder() ：动态懒加载（大数据量优化）</li>
<li>PageView.custom() ：高度自定义子组件<blockquote>
<ul>
<li><strong>规则：</strong></li>
</ul>
</blockquote>
</li>
<li><strong>scrollDirection：</strong> 视图滚动方向，默认为水平方向（Axis.horizontal）。</li>
<li><strong>reverse：</strong> 是否反转方向，默认为 false。</li>
<li><strong>controller：</strong> 用于监听视图滚动情况的控制器。</li>
<li><strong>onPageChanged：</strong> 索引改变时的回调函数。</li>
<li><strong>physics：</strong> 滚动逻辑，可以设置为不滚动、滚动或滚动到边缘是否反弹等。</li>
<li><strong>pageSnapping：</strong> 是否启用页面对齐，默认为 true。</li>
<li><strong>allowImplicitScrolling：</strong> 是否允许隐式滚动，默认为 false。<blockquote>
<ul>
<li><p><strong>注意：</strong> 使用 PageView.builder 避免一次性构建所有页面，搭配 AutomaticKeepAliveClientMixin 缓存页面状态，嵌套 ListView 时设置 physics: NeverScrollableScrollPhysics() 禁用父级滑动，避免垂直滑动冲突</p>
</li>
<li><p><strong>推荐：</strong> 适用于引导页、轮播图、全屏滑动视图等场景</p>
</li>
</ul>
</blockquote>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PageView(</span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    Container(</span><br><span class="line">      alignment: Alignment.center,</span><br><span class="line">      decoration: const BoxDecoration(color: Colors.green),</span><br><span class="line">      child: const Text(&quot;页面 0&quot;,</span><br><span class="line">          style: TextStyle(fontSize: 20, color: Colors.black)),</span><br><span class="line">    ),</span><br><span class="line">    Container(</span><br><span class="line">      alignment: Alignment.center,</span><br><span class="line">      decoration: const BoxDecoration(color: Colors.red),</span><br><span class="line">      child: const Text(&quot;页面 1&quot;,</span><br><span class="line">          style: TextStyle(fontSize: 20, color: Colors.white)),</span><br><span class="line">    ),</span><br><span class="line">    Container(</span><br><span class="line">      alignment: Alignment.center,</span><br><span class="line">      decoration: const BoxDecoration(color: Colors.blue),</span><br><span class="line">      child: const Text(&quot;页面 2&quot;,</span><br><span class="line">          style: TextStyle(fontSize: 20, color: Colors.white)),</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-105ffc0ea9ac9933.gif?imageMogr2/auto-orient/strip" alt="PageView"></p>
<h2 id="3-Scrollbar"><a href="#3-Scrollbar" class="headerlink" title="3. Scrollbar"></a>3. Scrollbar</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 一个 Material 风格的滚动指示器，Flutter 的滚动视图（如 ListView、GridView 等）没有滚动条，但可以通过将滚动视图包裹在 Scrollbar 组件中来添加滚动条</p>
</li>
<li><p><strong>规则：</strong></p>
</li>
</ul>
</blockquote>
<ol>
<li><strong>child：</strong> 必需属性，用于指定需要滚动的内容。</li>
<li><strong>controller：</strong> 可选属性，用于控制滚动行为。</li>
<li><strong>isAlwaysShown：</strong> 布尔值，表示是否始终显示滚动条。默认为 false，需要设置 controller 才能显示。</li>
<li><strong>thickness：</strong> 滚动条的宽度。</li>
<li><strong>radius：</strong> 滚动条的圆角半径。</li>
<li><strong>showTrackOnHover：</strong> 布尔值，表示当鼠标悬停在滚动条上时是否显示轨道。</li>
<li><strong>hoverThickness：</strong> 鼠标悬停时滚动条的宽度。</li>
<li><strong>notificationPredicate：</strong> 用于过滤滚动通知的谓词。</li>
<li><strong>interactive：</strong> 布尔值，表示滚动条是否可以交互。</li>
<li><strong>scrollbarOrientation：</strong> 滚动条的方向。<blockquote>
<ul>
<li><p><strong>注意：</strong> Scrollbar 需要包裹可滚动组件（如 ListView），但不要求直接作为父级，只要在组件树中存在即可</p>
</li>
<li><p><strong>推荐：</strong> 自定义滚动条样式 、显示滚动条</p>
</li>
</ul>
</blockquote>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Scrollbar(</span><br><span class="line">  child: ListView.builder(</span><br><span class="line">    itemCount: 40,</span><br><span class="line">    itemBuilder: (context, index) &#123;</span><br><span class="line">      return Card(</span><br><span class="line">        child: Container(</span><br><span class="line">          height: 45,</span><br><span class="line">          alignment: Alignment.center,</span><br><span class="line">          child: Text(&#x27;$index&#x27;),</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-7fb3930b1c3ee34f.gif?imageMogr2/auto-orient/strip" alt="Scrollbar"></p>
<h2 id="4-RefreshIndicator"><a href="#4-RefreshIndicator" class="headerlink" title="4. RefreshIndicator"></a>4. RefreshIndicator</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 实现 Material 风格下拉刷新功能的组件，通常包裹在可滚动的子组件（如 ListView、CustomScrollView）外层。当用户下拉超过一定距离时，会触发回调函数执行刷新操作，并显示加载动画</p>
</li>
<li><p><strong>规则：</strong></p>
</li>
</ul>
</blockquote>
<ol>
<li><strong>child：</strong> 必需参数，通常为 ListView 或 CustomScrollView。</li>
<li><strong>displacement：</strong> 可选参数，从子组件的顶部或底部边缘到刷新指示符所在位置的距离。</li>
<li><strong>onRefresh：</strong> 必需参数，当用户将刷新指示器拖到足够远以表明他们希望应用刷新时调用的函数。</li>
<li><strong>color：</strong> 可选参数，进度指示器前景色。</li>
<li><strong>backgroundColor：</strong> 可选参数，进度指示器背景色。</li>
<li><strong>notificationPredicate：</strong> 可选参数，用于过滤滚动通知。</li>
<li><strong>semanticsLabel：</strong> 可选参数，语义标签。</li>
<li><strong>semanticsValue：</strong> 可选参数，语义值。<blockquote>
<ul>
<li><p><strong>注意：</strong> 上拉加载：需结合 <code>ScrollController</code> 监听滚动位置，实现 <code>LoadMore</code> 功能，<code>onRefresh</code> 必须返回 <code>Future</code>，且需在数据加载完成后完成该 <code>Future</code>，否则刷新动画不会停止</p>
</li>
<li><p><strong>推荐：</strong> 列表数据刷新</p>
</li>
</ul>
</blockquote>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; _items = List.generate(20, (index) =&gt; &quot;Item $index&quot;);</span><br><span class="line"></span><br><span class="line">Future&lt;void&gt; _refresh() async &#123;</span><br><span class="line">  await Future.delayed(Duration(seconds: 2));</span><br><span class="line">  setState(() &#123;</span><br><span class="line">    _items = List.generate(20, (index) =&gt; &quot;Refreshed Item $index&quot;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"> RefreshIndicator(</span><br><span class="line">  onRefresh: _refresh,</span><br><span class="line">  child: ListView.builder(</span><br><span class="line">    itemCount: _items.length,</span><br><span class="line">    itemBuilder: (context, index) &#123;</span><br><span class="line">      return ListTile(</span><br><span class="line">        title: Text(_items[index]),</span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">  ),</span><br><span class="line">) </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-4b56b92150f6a399.gif?imageMogr2/auto-orient/strip" alt="RefreshIndicator"></p>
<h2 id="5-DraggableScrollableSheet"><a href="#5-DraggableScrollableSheet" class="headerlink" title="5. DraggableScrollableSheet"></a>5. DraggableScrollableSheet</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 允许用户通过手势操作来拖动一个可滚动的区域。它常用于创建底部弹出式面板或可拖动的控件，类似于高德地图首页从底部滑动向上的效果。该组件继承自 StatefulWidget，通过调整滚动区域的大小来响应拖动手势，直到达到限制，然后开始滚动</p>
</li>
<li><p><strong>规则：</strong></p>
</li>
</ul>
</blockquote>
<p><strong>1. initialChildSize：</strong> 设置初始高度占屏幕的比例，范围为 0 到 1，默认为 0.5。</p>
<p><strong>2. minChildSize：</strong> 指定最小高度占屏幕的比例，默认为 0.25。</p>
<p><strong>3. maxChildSize：</strong> 指定最大高度占屏幕的比例，默认为 1.0。</p>
<p><strong>4. expand：</strong> 控制是否允许在内容小于屏幕高度时扩展以填充屏幕，默认为 true。</p>
<p><strong>5. snap：</strong> 布尔值，用于控制滚动停止时是否自动捕捉到接近的最小或最大值，默认为 false。</p>
<p><strong>6. builder：</strong> 构建函数，用于构建 DraggableScrollableSheet 的内容，接受两个参数：<br>BuildContext 和 ScrollController，返回一个 Widget，通常是 SingleChildScrollView 或 ListView。</p>
<blockquote>
<ul>
<li><p><strong>注意：</strong> 确保 maxChildSize &gt;&#x3D; initialChildSize &gt;&#x3D; minChildSize，否则会抛出异常</p>
</li>
<li><p><strong>推荐：</strong> 底部弹出式面板评论区、详细信息展示</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Stack(</span><br><span class="line">  children: [</span><br><span class="line">    Positioned(</span><br><span class="line">      top: 0,</span><br><span class="line">      bottom: 0,</span><br><span class="line">      left: 0,</span><br><span class="line">      right: 0,</span><br><span class="line">      child: Container(</span><br><span class="line">        color: Colors.grey[300],</span><br><span class="line">        child: Center(</span><br><span class="line">          child: Text(&#x27;背景内容&#x27;),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">    DraggableScrollableSheet(</span><br><span class="line">      initialChildSize: 0.5,</span><br><span class="line">      minChildSize: 0.3,</span><br><span class="line">      maxChildSize: 1.0,</span><br><span class="line">      builder: (_, controller) &#123;</span><br><span class="line">        return Container(</span><br><span class="line">          color: Theme.of(context).cardColor,</span><br><span class="line">          child: Scrollbar(</span><br><span class="line">            child: ListView.builder(</span><br><span class="line">              controller: controller,</span><br><span class="line">              itemCount: 20,</span><br><span class="line">              itemBuilder: (context, index) &#123;</span><br><span class="line">                return ListTile(</span><br><span class="line">                  title: Text(&#x27;Item $index&#x27;),</span><br><span class="line">                );</span><br><span class="line">              &#125;,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-7ea2aba6755849b2.gif?imageMogr2/auto-orient/strip" alt="DraggableScrollableSheet"></p>
<h2 id="6-NestedScrollView"><a href="#6-NestedScrollView" class="headerlink" title="6. NestedScrollView"></a>6. NestedScrollView</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 用于协调多个独立滚动区域的容器组件。它通过 NestedScrollViewCoordinator 协调两个滚动控制器：外层滚动（Header）和内层滚动（Body）。外层滚动由 headerSliverBuilder 定义的 Sliver 组件组成（如 SliverAppBar），受 PrimaryScrollController 控制；内层滚动由 body 定义的普通滚动组件（如 ListView），拥有独立的 ScrollController</p>
</li>
<li><p><strong>规则：</strong></p>
</li>
</ul>
<p><strong>1.外层滚动优先：</strong> 当用户向下滑动时，外层滚动先消耗滚动事件，直到外层完全折叠后，内层滚动接管。<br><strong>2.内层反向优先：</strong> 当内层滚动到达顶部且用户继续上滑时，外层滚动会展开</p>
<ul>
<li><p><strong>注意：</strong> 确保内部可滚动组件（body）的 physics 属性设置正确，以避免滚动冲突</p>
</li>
<li><p><strong>推荐：</strong> 折叠头部图片效果</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NestedScrollView(</span><br><span class="line">          headerSliverBuilder: (BuildContext context, bool innerBoxIsScrolled) &#123;</span><br><span class="line">    return &lt;Widget&gt;[</span><br><span class="line">      SliverAppBar(</span><br><span class="line">        title: const Text(&#x27;NestedScrollView Example&#x27;),</span><br><span class="line">        pinned: true,</span><br><span class="line">        floating: true,</span><br><span class="line">        forceElevated: innerBoxIsScrolled,</span><br><span class="line">        expandedHeight: 160.0,</span><br><span class="line">        flexibleSpace: FlexibleSpaceBar(</span><br><span class="line">          background: Image.network(</span><br><span class="line">            &quot;https://miaobi-lite.bj.bcebos.com/miaobi/5mao/b%275aS05YOPYXBwXzE3MzM3NjcxODMuODQyNDgz%27/0.png&quot;,</span><br><span class="line">            fit: BoxFit.cover,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    ];</span><br><span class="line">  &#125;,</span><br><span class="line">  body: ListView.builder(</span><br><span class="line">    itemCount: 50,</span><br><span class="line">    itemBuilder: (BuildContext context, int index) &#123;</span><br><span class="line">      return ListTile(</span><br><span class="line">        title: Text(&#x27;List Item $index&#x27;),</span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">  ),</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-52f9c772406edf5f.gif?imageMogr2/auto-orient/strip" alt="NestedScrollView"></p>
<h2 id="7-ScrollConfiguration"><a href="#7-ScrollConfiguration" class="headerlink" title="7. ScrollConfiguration"></a>7. ScrollConfiguration</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 用于统一控制子组件树的滚动行为（如滚动条样式、拖拽反馈等），尤其适用于定制不同平台的滚动体验</p>
</li>
<li><p><strong>规则：</strong> ScrollConfiguration 应该直接放置在列表组件的父组件下，以避免与其他列表组件发生冲突，若需要全局设置整个应用程序的所有列表默认样式，则可将 ScrollConfiguration 组件插入接近组件树根部的位置</p>
</li>
<li><p><strong>注意：</strong> 由于 ScrollConfiguration 的子组件可能为 null，因此在使用时需要进行 null 检查，以避免潜在的错误</p>
</li>
<li><p><strong>推荐：</strong> 自定义滚动条的样式，如颜色、厚度</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ScrollConfiguration(</span><br><span class="line">  behavior: MyCustomBehavior(),</span><br><span class="line">  child: ListView.separated(</span><br><span class="line">    itemCount: 20,</span><br><span class="line">    separatorBuilder: (_, __) =&gt; Divider(),</span><br><span class="line">    itemBuilder: (_, index) &#123;</span><br><span class="line">      return Container(</span><br><span class="line">        height: 56,</span><br><span class="line">        alignment: Alignment.center,</span><br><span class="line">        child: Text(&quot;这是第 $&#123;index + 1&#125; 项&quot;),</span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">  ),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">class MyCustomBehavior extends ScrollBehavior &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget buildViewportChrome(BuildContext context, Widget child, AxisDirection axisDirection) &#123;</span><br><span class="line">    // 自定义滚动条样式</span><br><span class="line">    return GlowingOverscrollIndicator(</span><br><span class="line">      axisDirection: axisDirection,</span><br><span class="line">      color: Colors.grey, // 设置滚动条颜色为灰色</span><br><span class="line">      child: child,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  ScrollPhysics getScrollPhysics(BuildContext context) &#123;</span><br><span class="line">    // 使用 ClampingScrollPhysics 防止过度滚动</span><br><span class="line">    return ClampingScrollPhysics();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-286ad153ba6dc757.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ScrollConfiguration"></p>
<h1 id="Sliver-系列控件-用于-CustomScrollView"><a href="#Sliver-系列控件-用于-CustomScrollView" class="headerlink" title="Sliver 系列控件 (用于 CustomScrollView)"></a>Sliver 系列控件 (用于 CustomScrollView)</h1><h2 id="1-SliverList"><a href="#1-SliverList" class="headerlink" title="1. SliverList"></a>1. SliverList</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 创建线性可滚动列表的组件，它属于 Sliver 家族的一部分，SliverList 需要与 CustomScrollView 结合使用，以实现复杂的滚动效果</p>
</li>
<li><p><strong>规则：</strong> 使用 SliverChildDelegate 来构建子组件。常用的实现是 SliverChildBuilderDelegate 和 SliverChildListDelegate。SliverChildListDelegate: （静态列表）适用于已知数量的子组件，一次性全部渲染。<br>SliverChildBuilderDelegate: （动态构建列表项）适用于未知数量的子组件，按需加载和销毁列表项，提升性能。</p>
</li>
<li><p><strong>注意：</strong> 必须通过代理生成子项，其核心特点是支持统一滚动、避免滑动冲突</p>
</li>
<li><p><strong>推荐：</strong> 滚动时两个列表无缝衔接，无滑动冲突，实现吸顶 AppBar 和列表联动</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CustomScrollView(</span><br><span class="line">  slivers: &lt;Widget&gt;[</span><br><span class="line">    const SliverAppBar(</span><br><span class="line">      expandedHeight: 250,</span><br><span class="line">      flexibleSpace: FlexibleSpaceBar(</span><br><span class="line">        title: Text(&#x27;SliverList 示例&#x27;),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">    SliverList(</span><br><span class="line">      delegate: SliverChildBuilderDelegate(</span><br><span class="line">        (BuildContext context, int index) &#123;</span><br><span class="line">          return ListTile(</span><br><span class="line">            title: Text(&#x27;Item #$index&#x27;),</span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">        childCount: 20, // 列表项数目</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">    SliverFixedExtentList(</span><br><span class="line">      itemExtent: 50.0,</span><br><span class="line">      delegate: SliverChildBuilderDelegate(</span><br><span class="line">        (BuildContext context, int index) &#123;</span><br><span class="line">          return Container(</span><br><span class="line">            alignment: Alignment.center,</span><br><span class="line">            color: Colors.blue[100 * (index % 9)],</span><br><span class="line">            child: Text(&quot;list item $index&quot;),</span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">        childCount: 50,</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-5a49215fabf128ae.gif?imageMogr2/auto-orient/strip" alt="SliverList"></p>
<h2 id="2-SliverGrid"><a href="#2-SliverGrid" class="headerlink" title="2. SliverGrid"></a>2. SliverGrid</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 创建网格布局的 Sliver 组件，它非常适合与其他 Sliver 组件结合使用，以构建复杂的可滚动布局，</p>
</li>
<li><p><strong>规则：</strong> SliverGrid 需要指定 gridDelegate 和 delegate 属性。gridDelegate 控制网格布局，而 delegate 用于构建每个网格单元的内容，SliverGrid 提供了三种主要的构造方法：1.SliverGrid：适用于动态显示内容（从数据库或 API 获取）。2.SliverGrid.extent：允许指定子项的最大跨轴范围。3.SliverGrid.count：用于指定跨轴上固定数量的子项</p>
</li>
</ul>
</blockquote>
<ol>
<li><strong>delegate：</strong> 控制子项生成，常用：</li>
</ol>
<ul>
<li><strong>SliverChildListDelegate：</strong> 静态子项列表</li>
<li><strong>SliverChildBuilderDelegate：</strong> 动态懒加载子项</li>
</ul>
<ol start="4">
<li><strong>gridDelegate：</strong> 控制网格布局，两种实现：</li>
</ol>
<ul>
<li><strong>SliverGridDelegateWithFixedCrossAxisCount：</strong> 固定列数</li>
<li><strong>SliverGridDelegateWithMaxCrossAxisExtent：</strong> 限制子项最大宽度<blockquote>
<ul>
<li><p><strong>注意：</strong> 按需加载子项，性能优于一次性构建所有子项的 GridView，与普通的网格布局组件（如 GridView）不同，SliverGrid 不会提前渲染所有网格项，而是在滚动时动态渲染当前可见的部分，从而节省内存和渲染时间</p>
</li>
<li><p><strong>推荐：</strong> 下拉刷新、嵌套滚动</p>
</li>
</ul>
</blockquote>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CustomScrollView(</span><br><span class="line">  slivers: [</span><br><span class="line">    SliverAppBar(</span><br><span class="line">      // 可折叠标题栏</span><br><span class="line">      expandedHeight: 200,</span><br><span class="line">      flexibleSpace: FlexibleSpaceBar(</span><br><span class="line">          background: Image.network(</span><br><span class="line">              &#x27;https://miaobi-lite.bj.bcebos.com/miaobi/5mao/b%275aS05YOPYXBwXzE3MzM3NjcxODMuODQyNDgz%27/0.png&#x27;,</span><br><span class="line">              fit: BoxFit.cover)),</span><br><span class="line">    ),</span><br><span class="line">    SliverGrid(</span><br><span class="line">      // 网格区域</span><br><span class="line">      delegate: SliverChildBuilderDelegate((ctx, i) =&gt; Container(</span><br><span class="line">            color: [</span><br><span class="line">              Colors.red,</span><br><span class="line">              Colors.blue,</span><br><span class="line">              Colors.black,</span><br><span class="line">              Colors.yellow,</span><br><span class="line">              Colors.green</span><br><span class="line">            ][i % 5],</span><br><span class="line">          )),</span><br><span class="line">      gridDelegate: const SliverGridDelegateWithMaxCrossAxisExtent(</span><br><span class="line">        maxCrossAxisExtent: 150, // 自适应宽度</span><br><span class="line">        mainAxisSpacing: 10,</span><br><span class="line">        crossAxisSpacing: 10,</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-3edae1a2e0488831.gif?imageMogr2/auto-orient/strip" alt="SliverGrid"></p>
<h2 id="3-SliverAppBar"><a href="#3-SliverAppBar" class="headerlink" title="3. SliverAppBar"></a>3. SliverAppBar</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 创建可滚动应用栏的组件，它可以在滚动过程中动态变化，如展开、收缩或固定在顶部。SliverAppBar 通常与 CustomScrollView 搭配使用，可以实现复杂的滚动效果，类似于 Android 中的 CollapsingToolbarLayout</p>
</li>
<li><p><strong>规则：</strong></p>
</li>
</ul>
</blockquote>
<ol>
<li><strong>expandedHeight：</strong> 指定 SliverAppBar 展开时的高度。</li>
<li><strong>pinned：</strong> 设置为 true 时，AppBar 将在滚动到顶部时固定在屏幕顶部。</li>
<li><strong>floating：</strong> 设置为 true 时，当向下滚动时，AppBar 会重新出现。</li>
<li><strong>snap：</strong> 配合 floating 属性使用，当设置为 true 时，SliverAppBar 会在滑动过程中自动“吸附”到顶部或消失。</li>
<li><strong>flexibleSpace：</strong> 用于定义可伸缩的空间，通常使用 FlexibleSpaceBar。</li>
<li><strong>backgroundColor：</strong> 设置 AppBar 的背景色。</li>
<li><strong>title：</strong> 设置 AppBar 的标题。</li>
<li><strong>leading：</strong> 设置 AppBar 前面显示的一个控件。</li>
<li><strong>actions：</strong> 设置 AppBar 的操作按钮。</li>
<li><strong>bottom：</strong> 设置 AppBar 的底部区域，通常用于添加 TabBar。<blockquote>
<ul>
<li><p><strong>注意：</strong> pinned 和 floating 不可同时为 true，否则引发布局冲突，必须嵌套在 Sliver 容器，避免在 flexibleSpace 中使用复杂动画，可能导致滚动卡顿，如果需要实现滚动折叠效果，flexibleSpace 必须包含 FlexibleSpaceBar</p>
</li>
<li><p><strong>推荐：</strong> 折叠式图片标题、快速展开的搜索栏、带悬浮 Tab 的分页布局</p>
</li>
</ul>
</blockquote>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DefaultTabController(</span><br><span class="line">  length: 2,</span><br><span class="line">  child: Scaffold(</span><br><span class="line">    body: NestedScrollView(</span><br><span class="line">      headerSliverBuilder:</span><br><span class="line">          (BuildContext context, bool innerBoxIsScrolled) &#123;</span><br><span class="line">        return &lt;Widget&gt;[</span><br><span class="line">          SliverAppBar(</span><br><span class="line">            expandedHeight: 200.0,</span><br><span class="line">            floating: false,</span><br><span class="line">            pinned: true,</span><br><span class="line">            flexibleSpace: FlexibleSpaceBar(</span><br><span class="line">              title: const Text(&#x27;SliverAppBar Example&#x27;),</span><br><span class="line">              background: Image.network(</span><br><span class="line">                &#x27;https://img.win3000.com/m00/76/6a/3fb7a5729f51fedf4261cb02addbd133.jpg&#x27;,</span><br><span class="line">                fit: BoxFit.cover,</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            bottom: const TabBar(</span><br><span class="line">              tabs: [</span><br><span class="line">                Tab(icon: Icon(Icons.home), text: &#x27;Home&#x27;),</span><br><span class="line">                Tab(icon: Icon(Icons.settings), text: &#x27;Settings&#x27;),</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ];</span><br><span class="line">      &#125;,</span><br><span class="line">      body: TabBarView(</span><br><span class="line">        children: [</span><br><span class="line">          CustomScrollView(</span><br><span class="line">            slivers: [</span><br><span class="line">              SliverList(</span><br><span class="line">                delegate: SliverChildBuilderDelegate(</span><br><span class="line">                  (BuildContext context, int index) &#123;</span><br><span class="line">                    return Container(</span><br><span class="line">                      height: 85,</span><br><span class="line">                      alignment: Alignment.center,</span><br><span class="line">                      color: Colors</span><br><span class="line">                          .primaries[index % Colors.primaries.length],</span><br><span class="line">                      child: Text(</span><br><span class="line">                        &#x27;$index&#x27;,</span><br><span class="line">                        style: const TextStyle(</span><br><span class="line">                            color: Colors.white, fontSize: 20.0),</span><br><span class="line">                      ),</span><br><span class="line">                    );</span><br><span class="line">                  &#125;,</span><br><span class="line">                  childCount: 25,</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">          CustomScrollView(</span><br><span class="line">            slivers: [</span><br><span class="line">              SliverList(</span><br><span class="line">                delegate: SliverChildBuilderDelegate(</span><br><span class="line">                  (BuildContext context, int index) &#123;</span><br><span class="line">                    return Container(</span><br><span class="line">                      height: 85,</span><br><span class="line">                      alignment: Alignment.center,</span><br><span class="line">                      color: Colors</span><br><span class="line">                          .primaries[index % Colors.primaries.length],</span><br><span class="line">                      child: Text(</span><br><span class="line">                        &#x27;$index&#x27;,</span><br><span class="line">                        style: const TextStyle(</span><br><span class="line">                            color: Colors.white, fontSize: 20.0),</span><br><span class="line">                      ),</span><br><span class="line">                    );</span><br><span class="line">                  &#125;,</span><br><span class="line">                  childCount: 25,</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-381c79d850c5f7c6.gif?imageMogr2/auto-orient/strip" alt="SliverAppBar"></p>
<h2 id="4-SliverPadding"><a href="#4-SliverPadding" class="headerlink" title="4. SliverPadding"></a>4. SliverPadding</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 专门用于在 滚动布局（如 CustomScrollView）中为子 Sliver 组件添加内边距的组件。它属于 Sliver 家族，适用于需要精细控制滚动区域间距的场景，例如在 SliverList、SliverGrid 等组件外部包裹边距</p>
</li>
<li><p><strong>规则：</strong> 仅能作为 CustomScrollView 的 slivers 数组的直接子组件使用，不可单独用于普通布局。SliverPadding 的 sliver 属性必须是一个 Sliver 类型的组件，否则会导致运行时错误</p>
</li>
</ul>
<p>核心参数：<br>padding（必填）：通过 EdgeInsets 设置边距（上、下、左、右或对称边距）。<br>sliver（必填）：接受任意 Sliver 组件（如 SliverList、SliverGrid）</p>
<ul>
<li><p><strong>注意：</strong> 普通 Padding 用于静态布局，而 SliverPadding 专为滚动视图优化，能正确计算滚动区域和视口边界，避免在 SliverPadding 内嵌套多层 Sliver 组件，推荐直接包裹目标组件，如需避开刘海屏或底部导航栏，优先使用 SliverSafeArea 而非 SliverPadding</p>
</li>
<li><p><strong>推荐：</strong> 列表&#x2F;网格的全局边距、复杂滚动布局的间隔控制</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CustomScrollView(</span><br><span class="line">  slivers: [</span><br><span class="line">    const SliverAppBar(title: Text(&#x27;SliverPadding 示例&#x27;)),</span><br><span class="line">    SliverPadding(</span><br><span class="line">      padding: const EdgeInsets.all(20), // 全局边距</span><br><span class="line">      sliver: SliverList(</span><br><span class="line">        delegate: SliverChildBuilderDelegate(</span><br><span class="line">          (context, index) =&gt; ListTile(</span><br><span class="line">            title: Text(&quot;列表项 $index&quot;),</span><br><span class="line">          ),</span><br><span class="line">          childCount: 20,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">    SliverPadding(</span><br><span class="line">      padding: const EdgeInsets.only(top: 30, bottom: 50), // 仅上下边距</span><br><span class="line">      sliver: SliverGrid(</span><br><span class="line">        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(</span><br><span class="line">          crossAxisCount: 2,</span><br><span class="line">          crossAxisSpacing: 10,</span><br><span class="line">          mainAxisSpacing: 10,</span><br><span class="line">        ),</span><br><span class="line">        delegate: SliverChildBuilderDelegate(</span><br><span class="line">          (context, index) =&gt; Container(</span><br><span class="line">            color: Colors.blue,</span><br><span class="line">            child: Center(child: Text(&quot;网格 $index&quot;)),</span><br><span class="line">          ),</span><br><span class="line">          childCount: 6,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-702f268897f0da9b.gif?imageMogr2/auto-orient/strip" alt="SliverPadding"></p>
<h2 id="5-SliverToBoxAdapter"><a href="#5-SliverToBoxAdapter" class="headerlink" title="5. SliverToBoxAdapter"></a>5. SliverToBoxAdapter</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 将普通 盒模型布局组件（如 Container、Text 等）嵌入到 Sliver 滚动布局（如 CustomScrollView）中的适配器。它允许非 Sliver 组件（即非滚动专用组件）作为 Sliver 列表的一部分参与滚动，在 CustomScrollView 的 slivers 列表中混合使用常规 Widget 与 Sliver 组件（如 SliverList、SliverGrid）</p>
</li>
<li><p><strong>规则：</strong> 只能用于 CustomScrollView.slivers 或嵌套的 Sliver 容器（如 SliverPadding），非 Sliver 组件（如 Container）必须指定高度或宽度，否则会因无限空间约束导致布局错误，若子组件包含 ListView 等自身可滚动的 Widget，需禁用其滚动行为（如 physics: NeverScrollableScrollPhysics()）</p>
</li>
<li><p><strong>注意：</strong> 尽量避免在 SliverToBoxAdapter 中嵌套过多的复杂布局，这可能会导致布局计算变慢，虽然 SliverToBoxAdapter 提供了便利性，但在大量使用时需要注意性能问题，尽量减少不必要的包裹，如果 child 的高度没有明确设置，可能会导致布局问题或渲染错误</p>
</li>
<li><p><strong>推荐：</strong> 列表头部&#x2F;尾部添加独立 Widget（如 Banner、标题、按钮）</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CustomScrollView(</span><br><span class="line">  slivers: [</span><br><span class="line">    // 1. 顶部 Banner</span><br><span class="line">    SliverToBoxAdapter(</span><br><span class="line">      child: Container(</span><br><span class="line">        height: 200,</span><br><span class="line">        decoration: const BoxDecoration(</span><br><span class="line">          gradient: LinearGradient(colors: [Colors.blue, Colors.green]),</span><br><span class="line">        ),</span><br><span class="line">        child: const Center(</span><br><span class="line">            child: Text(&#x27;欢迎页&#x27;, style: TextStyle(fontSize: 24))),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line"></span><br><span class="line">    // 2. 分隔标题</span><br><span class="line">    SliverToBoxAdapter(</span><br><span class="line">      child: Padding(</span><br><span class="line">        padding: const EdgeInsets.all(16),</span><br><span class="line">        child: Text(&#x27;产品列表&#x27;,</span><br><span class="line">            style: Theme.of(context).textTheme.headlineSmall),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line"></span><br><span class="line">    // 3. 网格布局</span><br><span class="line">    SliverGrid(</span><br><span class="line">      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(</span><br><span class="line">        crossAxisCount: 2,</span><br><span class="line">        childAspectRatio: 1.5,</span><br><span class="line">      ),</span><br><span class="line">      delegate: SliverChildBuilderDelegate(</span><br><span class="line">        (context, index) =&gt;</span><br><span class="line">            Card(child: Center(child: Text(&#x27;产品 $index&#x27;))),</span><br><span class="line">        childCount: 6,</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line"></span><br><span class="line">    // 4. 底部按钮</span><br><span class="line">    SliverToBoxAdapter(</span><br><span class="line">      child: Padding(</span><br><span class="line">        padding: const EdgeInsets.symmetric(vertical: 20),</span><br><span class="line">        child: ElevatedButton(</span><br><span class="line">          onPressed: () &#123;&#125;,</span><br><span class="line">          child: const Text(&#x27;加载更多&#x27;),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-01d7b324eb8d37e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="SliverToBoxAdapter"></p>
<h2 id="6-SliverFillRemaining"><a href="#6-SliverFillRemaining" class="headerlink" title="6. SliverFillRemaining"></a>6. SliverFillRemaining</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 用于 填充滚动视图剩余空间 的 Sliver 布局组件。它会根据父容器的剩余高度或宽度自动调整自身大小，确保内容区域占满屏幕可视区域。适用于需要动态适配剩余空间的场景</p>
</li>
<li><p><strong>规则：</strong> 作为 CustomScrollView 的 slivers 列表中的最后一个组件，用于填充剩余空间，允许组件自适应地填充剩余空间，无论剩余空间如何变化</p>
</li>
</ul>
<p><strong>关键参数</strong><br><strong>1. child：</strong> 必填，用于填充剩余空间的子组件。<br><strong>2. hasScrollBody：</strong></p>
</blockquote>
<ul>
<li>默认 true：子组件可滚动（如 ListView），适用于内容超出剩余空间的情况。</li>
<li>false：子组件不可滚动（如 Column），内容高度不超过剩余空间 710。<br><strong>3. fillOverscroll：</strong></li>
<li>true：在过度滚动时继续填充（如 iOS 回弹效果）。</li>
<li>false：仅填充未滚动区域（默认值）<blockquote>
<ul>
<li><p><strong>注意：</strong> 当 hasScrollBody: true 时，子组件必须是可滚动的（如 ListView），否则会抛出布局错误，SliverFillRemaining 在滚动视图中动态填充剩余空间，而 SingleChildScrollView 会尝试包裹整个内容，可能导致布局溢出，在长列表底部使用 SliverFillRemaining 时，避免在 child 中嵌套复杂布局，防止重复构建</p>
</li>
<li><p><strong>推荐：</strong> 表单底部固定按钮、分页加载占位、全屏内容适配</p>
</li>
</ul>
</blockquote>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CustomScrollView(</span><br><span class="line">  slivers: &lt;Widget&gt;[</span><br><span class="line">    const SliverAppBar(</span><br><span class="line">      expandedHeight: 200.0,</span><br><span class="line">      flexibleSpace: FlexibleSpaceBar(</span><br><span class="line">        title: Text(&#x27;Flexible Space&#x27;),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">    SliverList(</span><br><span class="line">      delegate: SliverChildListDelegate(</span><br><span class="line">        [</span><br><span class="line">          Container(</span><br><span class="line">            height: 500,</span><br><span class="line">            color: Colors.amber,</span><br><span class="line">            alignment: Alignment.center,</span><br><span class="line">            child: const Text(&#x27;List Item&#x27;),</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">    SliverFillRemaining(</span><br><span class="line">      hasScrollBody: false,</span><br><span class="line">      child: Container(</span><br><span class="line">        color: Colors.blue,</span><br><span class="line">        alignment: Alignment.center,</span><br><span class="line">        child: const Text(&#x27;Fill Remaining Space&#x27;,</span><br><span class="line">            style: TextStyle(color: Colors.white)),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-fd770d6ba2b08b9d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="SliverFillRemaining"></p>
<h2 id="7-SliverPersistentHeader"><a href="#7-SliverPersistentHeader" class="headerlink" title="7. SliverPersistentHeader"></a>7. SliverPersistentHeader</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 创建可折叠&#x2F;悬浮的头部的Sliver组件，在滚动视图中创建一个持久化的头部组件，该头部组件可以根据滚动位置自动调整大小、透明度或其他属性。可以固定在页面顶部或底部，也可以随着滚动而动态变化，从而实现更加灵活的布局效果</p>
</li>
<li><p><strong>规则：</strong></p>
</li>
</ul>
</blockquote>
<p><strong>1. delegate：</strong> 必需属性，用于定义头部组件的构建逻辑。<br><strong>2. pinned：</strong> 布尔值，默认为 false，当设置为 true 时，头部组件会在滚动到顶部时固定在视图中。<br><strong>3. floating：</strong> 布尔值，默认为 false，当设置为 true 时，头部组件会在滚动到顶部时短暂显示，然后隐藏。</p>
<blockquote>
<ul>
<li><p><strong>注意：</strong> pinned 和 floating 属性不能同时为 true，避免在build()方法中执行耗时操作，推荐使用const组件或StatelessWidget。若内容复杂，用AutoDispose混合Riverpod管理状态，不可直接嵌套ListView等滚动组件，需通过SliverToBoxAdapter，确保minExtent和maxExtent精确计算，避免小数精度误差。必须显式指定头部组件的高度范围（minExtent 和 maxExtent）。如果依赖 overlapsContent 参数构建子组件，则必须保证之前至少还有一个 SliverPersistentHeader 或 SliverAppBar</p>
</li>
<li><p><strong>推荐：</strong> 电商分类导航、渐变收缩的Banner图</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CustomScrollView(</span><br><span class="line">  slivers: &lt;Widget&gt;[</span><br><span class="line">    // 创建一个固定在页面顶部的 SliverPersistentHeader</span><br><span class="line">    SliverPersistentHeader(</span><br><span class="line">      pinned: true, // 固定在页面顶部</span><br><span class="line">      delegate: _MyHeaderDelegate(),</span><br><span class="line">    ),</span><br><span class="line">    // 添加一个普通的 SliverList</span><br><span class="line">    SliverList(</span><br><span class="line">      delegate: SliverChildBuilderDelegate(</span><br><span class="line">        (BuildContext context, int index) &#123;</span><br><span class="line">          return ListTile(</span><br><span class="line">            title: Text(&#x27;Item $index&#x27;),</span><br><span class="line">            leading: CircleAvatar(child: Text(&#x27;$index&#x27;)),</span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">        childCount: 50,</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">class _MyHeaderDelegate extends SliverPersistentHeaderDelegate &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(</span><br><span class="line">      BuildContext context, double shrinkOffset, bool overlapsContent) &#123;</span><br><span class="line">    // 获取状态栏高度</span><br><span class="line">    final double statusBarHeight = MediaQuery.of(context).padding.top;</span><br><span class="line">    // 构建头部组件</span><br><span class="line">    return Container(</span><br><span class="line">      padding: EdgeInsets.only(top: statusBarHeight),</span><br><span class="line">      color: Colors.blue,</span><br><span class="line">      alignment: Alignment.center,</span><br><span class="line">      child: const Text(&#x27;Header&#x27;),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  double get maxExtent =&gt; 120; // 最大高度</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  double get minExtent =&gt; 40; // 最小高度</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  bool shouldRebuild(covariant SliverPersistentHeaderDelegate oldDelegate) =&gt;</span><br><span class="line">      false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-e01779df913a06ea.gif?imageMogr2/auto-orient/strip" alt="SliverPersistentHeader"></p>
<h2 id="还有其他的一些Sliver布局控件"><a href="#还有其他的一些Sliver布局控件" class="headerlink" title="还有其他的一些Sliver布局控件"></a>还有其他的一些Sliver布局控件</h2><blockquote>
<p><strong>SliverFillViewport：填充视口</strong></p>
<p><strong>SliverAnimatedList：动画列表</strong></p>
<p><strong>SliverAnimatedOpacity：动画透明度</strong></p>
<p><strong>SliverIgnorePointer：忽略指针事件</strong></p>
<p><strong>SliverOpacity：透明度效果</strong></p>
<p><strong>SliverSafeArea：安全区域</strong></p>
<p><strong>SliverOverlapInjector：处理重叠</strong></p>
<p><strong>SliverOverlapAbsorber：吸收重叠</strong></p>
</blockquote>
<h1 id="响应式布局控件"><a href="#响应式布局控件" class="headerlink" title="响应式布局控件"></a>响应式布局控件</h1><h2 id="1-LayoutBuilder"><a href="#1-LayoutBuilder" class="headerlink" title="1. LayoutBuilder"></a>1. LayoutBuilder</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 用于根据父容器的约束对其子组件进行布局。它在布局过程中获取父组件传递的约束信息，从而动态构建布局。这使得开发者可以根据父容器的尺寸来调整子组件的布局，非常适合实现响应式布局</p>
</li>
<li><p><strong>规则：</strong> 根据设备尺寸动态调整布局，在开发过程中获取和调试约束信息，便于排查问题，如果是 Sliver 布局，可以使用 SliverLayoutBuilder</p>
</li>
</ul>
</blockquote>
<ol>
<li>constraints.maxWidth&#x2F;constraints.maxHeight ：父容器要求的最大尺寸</li>
<li>constraints.minWidth&#x2F;minHeight ：父容器要求的最小尺寸<blockquote>
<ul>
<li><p><strong>注意：</strong> 如果子组件超出显示大小，可能会导致频繁的 rebuild。解决方案是将 constraints 保存为成员变量，避免每次 build 都通过 LayoutBuilder 获取 constraints，当父容器的约束变化（如屏幕旋转、父容器尺寸调整）时，builder 会重新调用，考虑布局的复杂度和动画效果，避免过重的计算和不必要的重绘</p>
</li>
<li><p><strong>推荐：</strong> 要根据屏幕尺寸调整布局、获取约束信息，帮助调试布局问题</p>
</li>
</ul>
</blockquote>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Center(</span><br><span class="line">  child: Container(</span><br><span class="line">    width: 300, // 父容器宽度</span><br><span class="line">    height: 200, // 父容器高度</span><br><span class="line">    color: Colors.blue,</span><br><span class="line">    child: LayoutBuilder(</span><br><span class="line">      builder: (context, constraints) &#123;</span><br><span class="line">        // 根据父容器宽度动态切换布局</span><br><span class="line">        if (constraints.maxWidth &gt; 200) &#123;</span><br><span class="line">          return _buildWideLayout(constraints);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          return _buildNarrowLayout(constraints);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 宽布局：水平排列</span><br><span class="line">Widget _buildWideLayout(BoxConstraints constraints) &#123;</span><br><span class="line">return Row(</span><br><span class="line">  mainAxisAlignment: MainAxisAlignment.spaceEvenly,</span><br><span class="line">  children: [</span><br><span class="line">    Container(</span><br><span class="line">      width: constraints.maxWidth * 0.3, // 宽度占父级30%</span><br><span class="line">      height: 50,</span><br><span class="line">      color: Colors.red,</span><br><span class="line">    ),</span><br><span class="line">    Container(</span><br><span class="line">      width: constraints.maxWidth * 0.5, // 宽度占父级50%</span><br><span class="line">      height: 80,</span><br><span class="line">      color: Colors.green,</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  // 窄布局：垂直排列</span><br><span class="line">Widget _buildNarrowLayout(BoxConstraints constraints) &#123;</span><br><span class="line">return Column(</span><br><span class="line">  mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">  children: [</span><br><span class="line">    Container(</span><br><span class="line">      width: constraints.maxWidth * 0.8, // 宽度占父级80%</span><br><span class="line">      height: 40,</span><br><span class="line">      color: Colors.orange,</span><br><span class="line">    ),</span><br><span class="line">    const SizedBox(height: 20),</span><br><span class="line">    Container(</span><br><span class="line">      width: constraints.maxWidth * 0.6, // 宽度占父级60%</span><br><span class="line">      height: 60,</span><br><span class="line">      color: Colors.purple,</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">);</span><br><span class="line">&#125;     </span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-4db845824eabcc78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="LayoutBuilder"></p>
<h2 id="2-OrientationBuilder"><a href="#2-OrientationBuilder" class="headerlink" title="2. OrientationBuilder"></a>2. OrientationBuilder</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 根据设备的方向（纵向或横向）动态构建布局。它提供了一个回调函数，当设备方向发生变化时，会调用该回调函数来重建布局。这使得开发者可以根据不同的屏幕方向提供不同的用户界面布局</p>
</li>
<li><p><strong>规则：</strong> 依赖于父组件的尺寸来判断当前的方向，而不是直接依赖于设备的方向。因此，在某些情况下，可能需要结合 MediaQuery 来获取更准确的方向信息</p>
</li>
<li><p><strong>注意：</strong> 由于 OrientationBuilder 依赖于父组件的尺寸，因此在某些情况下可能无法准确检测到设备的方向。建议在需要高精度方向检测时，结合 MediaQuery.of(context).orientation 使用</p>
</li>
<li><p><strong>推荐：</strong> 横竖屏显示不同排列的网格、列表，在多设备适配方案中作为基础工具</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OrientationBuilder(</span><br><span class="line">  builder: (context, orientation) &#123;</span><br><span class="line">    return orientation == Orientation.portrait</span><br><span class="line">        ? _buildVerticalLayout()</span><br><span class="line">        : _buildHorizontalLayout();</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">Widget _buildVerticalLayout() &#123;</span><br><span class="line">  return ListView(</span><br><span class="line">    children: const &lt;Widget&gt;[</span><br><span class="line">      ListTile(title: Text(&#x27;项目 1&#x27;)),</span><br><span class="line">      ListTile(title: Text(&#x27;项目 2&#x27;)),</span><br><span class="line">      ListTile(title: Text(&#x27;项目 3&#x27;)),</span><br><span class="line">    ],</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget _buildHorizontalLayout() &#123;</span><br><span class="line">  return GridView.count(</span><br><span class="line">    crossAxisCount: 3,</span><br><span class="line">    children: &lt;Widget&gt;[</span><br><span class="line">      Container(</span><br><span class="line">        color: Colors.red,</span><br><span class="line">        child: const Center(child: Text(&#x27;项目 1&#x27;)),</span><br><span class="line">      ),</span><br><span class="line">      Container(</span><br><span class="line">        color: Colors.green,</span><br><span class="line">        child: const Center(child: Text(&#x27;项目 2&#x27;)),</span><br><span class="line">      ),</span><br><span class="line">      Container(</span><br><span class="line">        color: Colors.blue,</span><br><span class="line">        child: const Center(child: Text(&#x27;项目 3&#x27;)),</span><br><span class="line">      ),</span><br><span class="line">    ],</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-ddec17f776412266.gif?imageMogr2/auto-orient/strip" alt="OrientationBuilder"></p>
<h2 id="3-MediaQuery"><a href="#3-MediaQuery" class="headerlink" title="3. MediaQuery"></a>3. MediaQuery</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 用于获取设备的屏幕尺寸、方向、像素密度等信息。它可以帮助开发者创建响应式布局，以适应不同设备和屏幕尺寸</p>
</li>
<li><p><strong>规则：</strong><br><strong>1. 获取屏幕尺寸：</strong> 使用 MediaQuery.of(context).size 可以获取屏幕的宽度和高度。<br><strong>2. 获取方向：</strong> 使用 MediaQuery.of(context).orientation 可以获取设备的方向（竖屏或横屏）。<br><strong>3. 获取文本缩放因子：</strong> 使用 MediaQuery.of(context).textScaleFactor 可以获取用户的文本缩放设置。<br><strong>4. 获取系统亮度：</strong> 使用 MediaQuery.of(context).platformBrightness 可以获取系统的亮度模式（亮色或暗色）。<br><strong>5. 获取系统遮挡区域：</strong> 使用 MediaQuery.of(context).padding 可以获取系统遮挡区域的信息，如状态栏和导航栏的高度。</p>
</li>
<li><p><strong>注意：</strong> 频繁使用 MediaQuery.of(context).size 可能会导致不必要的小部件重建，影响性能。建议仅在需要的地方使用 MediaQuery，键盘弹出时，MediaQuery 的 viewInsets 属性会变化，开发者需要处理这种情况以避免布局问题</p>
</li>
<li><p><strong>推荐：</strong> 根据用户的文本缩放设置调整字体大小</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var screenSize = MediaQuery.of(context).size;</span><br><span class="line">var textScaleFactor = MediaQuery.of(context).textScaleFactor;</span><br><span class="line">var orientation = MediaQuery.of(context).orientation;</span><br><span class="line">    </span><br><span class="line">Column(</span><br><span class="line">  mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">  children: [</span><br><span class="line">    Text(</span><br><span class="line">      &#x27;Screen Size: $&#123;screenSize.width&#125; x $&#123;screenSize.height&#125;&#x27;,</span><br><span class="line">      style: TextStyle(fontSize: 24),</span><br><span class="line">    ),</span><br><span class="line">    SizedBox(height: 10),</span><br><span class="line">    Text(</span><br><span class="line">      &#x27;Text Scale Factor: $textScaleFactor&#x27;,</span><br><span class="line">      style: TextStyle(fontSize: 24),</span><br><span class="line">    ),</span><br><span class="line">    SizedBox(height: 10),</span><br><span class="line">    Text(</span><br><span class="line">      &#x27;Orientation: $orientation&#x27;,</span><br><span class="line">      style: TextStyle(fontSize: 24),</span><br><span class="line">    ),</span><br><span class="line">    SizedBox(height: 20),</span><br><span class="line">    if (orientation == Orientation.portrait)</span><br><span class="line">      FilledButton(</span><br><span class="line">        onPressed: () &#123;&#125;,</span><br><span class="line">        child: Text(&#x27;Button for Portrait Mode&#x27;),</span><br><span class="line">      )</span><br><span class="line">    else</span><br><span class="line">      FilledButton(</span><br><span class="line">        onPressed: () &#123;&#125;,</span><br><span class="line">        child: Text(&#x27;Button for Landscape Mode&#x27;),</span><br><span class="line">      ),</span><br><span class="line">    SizedBox(height: 20),</span><br><span class="line">    FilledButton(</span><br><span class="line">      onPressed: () &#123;&#125;,</span><br><span class="line">      child: Text(</span><br><span class="line">        &#x27;Custom Font Size Button&#x27;,</span><br><span class="line">        style: TextStyle(fontSize: 16 * textScaleFactor),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-df8089c55264499f.gif?imageMogr2/auto-orient/strip" alt="MediaQuery"></p>
<h2 id="4-AspectRatio"><a href="#4-AspectRatio" class="headerlink" title="4. AspectRatio"></a>4. AspectRatio</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 根据设备的方向（纵向或横向）动态构建不同的 UI 布局。当设备的方向发生变化时，OrientationBuilder 会重新构建其子组件树，以适应新的方向。这使得开发者能够轻松地实现横竖屏适配，它通过回调函数返回当前屏幕方向，无需依赖全局 MediaQuery</p>
</li>
<li><p><strong>规则：</strong> 根据设备的方向返回不同的布局组件，builder: 一个回调函数，接收两个参数：BuildContext 和 Orientation。Orientation 是一个枚举类型，包含两个值：Orientation.portrait 和 Orientation.landscape</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OrientationBuilder(</span><br><span class="line">  builder: (BuildContext context, Orientation orientation) &#123;</span><br><span class="line">    // 根据 orientation 的值返回不同的布局</span><br><span class="line">    return YourWidget();</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><p><strong>注意：</strong> 避免在 builder 函数中执行耗时操作（如网络请求），因其在屏幕旋转时可能频繁触发，直接通过回调提供方向，更适合布局构建阶段，仅监听方向变化，若需响应尺寸变化（如分屏模式），应结合 LayoutBuilder</p>
</li>
<li><p><strong>推荐：</strong> 视频播放器、表单输入</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AspectRatio(</span><br><span class="line">  aspectRatio: 16 / 9,</span><br><span class="line">  child: Container(color: Colors.blue),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-7818e3aebfcf1e62.gif?imageMogr2/auto-orient/strip" alt="AspectRatio"></p>
<h1 id="平台适配布局控件"><a href="#平台适配布局控件" class="headerlink" title="平台适配布局控件"></a>平台适配布局控件</h1><h2 id="1-SafeArea"><a href="#1-SafeArea" class="headerlink" title="1. SafeArea"></a>1. SafeArea</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 用于规避系统 UI（如状态栏、刘海屏、底部导航栏）的遮挡。它会根据设备屏幕的“安全区域”自动添加内边距（padding），确保内容不被系统控件覆盖，使 UI 动态且适应各种设备。在设计组件布局时，我们考虑了不同设备及其屏幕占用的约束，如状态栏、刘海屏、导航栏等。然而，新设备不断推出，设计各异，有时你的应用可能会覆盖这些占用的约束。因此，为了使 UI 适应性强且无错误，我们使用 SafeArea 组件。SafeArea 实际上是一个填充组件，根据设备运行时的情况，为你的应用添加必要的填充。如果应用的组件覆盖了系统特征，如刘海屏、状态栏、相机孔等，SafeArea 会根据需要在周围添加填充。SafeArea 内部使用 MediaQuery 检查屏幕尺寸，并在必要时包含额外填充。构造函数允许你决定是否在特定方向上避免侵入，通过布尔值 true 或 false 来实现</p>
</li>
<li><p><strong>规则：</strong> 在需要避免系统侵入的区域包裹 SafeArea 组件，通过 left、top、right、bottom 属性控制是否在相应方向上避免系统侵入；通过 minimum 属性设置最小填充；通过 maintainBottomViewPadding 属性决定是否保持底部填充不变，将需要保护的子组件放在 SafeArea 的 child 属性中</p>
</li>
<li><p><strong>注意：</strong> 当软键盘弹出时，底部填充可能会消失。可以通过设置 maintainBottomViewPadding 为 true 来保持底部填充不变，在页面骨架中直接应用，避免全局遮挡，在沉浸式全屏（如视频播放页）中需关闭 SafeArea，否则顶部留白，若父容器已设置 padding（如 ListView），SafeArea 可能造成双重边距。此时需手动调整，强制取消安全边距（如 padding: EdgeInsets.zero ）可能导致内容被遮挡</p>
</li>
<li><p><strong>推荐：</strong> 顶部状态栏区域、底部导航栏区域、刘海屏&#x2F;挖孔屏设备、弹窗&#x2F;浮层内容</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SafeArea(</span><br><span class="line">  // 2. 关闭底部安全区域（自定义底部栏时使用）</span><br><span class="line">  bottom: false,</span><br><span class="line">  child: Column(</span><br><span class="line">    children: [</span><br><span class="line">      // 3. 顶部标题栏（自动避开状态栏）</span><br><span class="line">      const AppHeader(),</span><br><span class="line">      // 4. 内容区域（使用Expanded填充剩余空间）</span><br><span class="line">      Expanded(</span><br><span class="line">        child: ListView(</span><br><span class="line">          children: List.generate(</span><br><span class="line">              20, (i) =&gt; ListTile(title: Text(&quot;Item $i&quot;))),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      // 5. 自定义底部导航栏（需手动避开系统栏）</span><br><span class="line">      const CustomBottomBar(),</span><br><span class="line">    ],</span><br><span class="line">  ),</span><br><span class="line">)</span><br><span class="line">        </span><br><span class="line">// 自定义顶部组件 </span><br><span class="line">class AppHeader extends StatelessWidget &#123;</span><br><span class="line">  const AppHeader(&#123;super.key&#125;); </span><br><span class="line"> </span><br><span class="line">  @override </span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Container(</span><br><span class="line">      color: Colors.blue, </span><br><span class="line">      padding: const EdgeInsets.all(16), </span><br><span class="line">      child: const Text(&quot;SafeArea Demo&quot;, style: TextStyle(color: Colors.white)), </span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// 自定义底部组件（需单独处理安全边距）</span><br><span class="line">class CustomBottomBar extends StatelessWidget &#123;</span><br><span class="line">  const CustomBottomBar(&#123;super.key&#125;); </span><br><span class="line"> </span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    // 6. 为底部栏单独添加SafeArea </span><br><span class="line">    return SafeArea(</span><br><span class="line">      top: false, // 关闭顶部边距</span><br><span class="line">      minimum: const EdgeInsets.only(bottom:  10), // 追加额外外边距</span><br><span class="line">      child: Container(</span><br><span class="line">        height: 50,</span><br><span class="line">        color: Colors.green, </span><br><span class="line">        child: const Center(child: Text(&quot;Bottom Bar&quot;)),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-1a1e4d38633b59e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="SafeArea"></p>
<h2 id="2-PlatformView"><a href="#2-PlatformView" class="headerlink" title="2. PlatformView"></a>2. PlatformView</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 允许在 Flutter 应用中嵌入原生的 UI 组件，如 Android 的 View 或 iOS 的 UIView</p>
</li>
<li><p><strong>规则：</strong></p>
</li>
</ul>
<ol>
<li>首先需要在原生代码中创建一个自定义的 PlatformView。</li>
<li>创建一个 PlatformViewFactory 来创建 PlatformView 实例，并将其与 Flutter 应用关联</li>
<li>通过 PlatformView Widget 将原生视图嵌入到 Flutter 应用中</li>
<li>通过 MethodChannel 实现 Dart 与原生代码的双向通信</li>
</ol>
<ul>
<li><p><strong>注意：</strong> 由于 PlatformView 是原生视图，频繁的交互可能会影响性能，因此应尽量减少不必要的原生视图嵌入，确保正确管理原生视图的生命周期，避免内存泄漏，不同平台的原生视图实现方式不同，需要分别处理 Android 和 iOS 的实现，Dart 的 viewType（native_text_view）需与原生注册的 ID 匹配</p>
</li>
<li><p><strong>推荐：</strong> 嵌入地图、视频播放、相机、文件选择器、WebView、条形码扫描</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// dart</span><br><span class="line">Column(</span><br><span class="line">  mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">  children: [</span><br><span class="line">    // Flutter 文本显示原生视图传回的时间</span><br><span class="line">    Text(&#x27;Flutter 显示: $_currentTime&#x27;,</span><br><span class="line">        style: const TextStyle(fontSize: 20)),</span><br><span class="line">    const SizedBox(height: 30),</span><br><span class="line">    // 原生视图容器</span><br><span class="line">    Container(</span><br><span class="line">      width: 300,</span><br><span class="line">      height: 200,</span><br><span class="line">      decoration: BoxDecoration(</span><br><span class="line">        border: Border.all(color: Colors.blue, width: 2),</span><br><span class="line">        borderRadius: BorderRadius.circular(10),</span><br><span class="line">      ),</span><br><span class="line">      child: Platform.isAndroid</span><br><span class="line">          ? const AndroidView(</span><br><span class="line">              viewType: _viewType,</span><br><span class="line">              creationParams: &#123;&#x27;textColor&#x27;: &#x27;#FF0000&#x27;&#125;, // 红色文本</span><br><span class="line">              creationParamsCodec: StandardMessageCodec(),</span><br><span class="line">            )</span><br><span class="line">          : const UiKitView(</span><br><span class="line">              viewType: _viewType,</span><br><span class="line">              creationParams: &#123;&#x27;textSize&#x27;: 24.0&#125;, // iOS 文本大小</span><br><span class="line">              creationParamsCodec: StandardMessageCodec(),</span><br><span class="line">            ),</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// swift</span><br><span class="line">// TimeView.swift</span><br><span class="line">class TimeView: NSObject, FlutterPlatformView &#123;</span><br><span class="line">    private var label: UILabel</span><br><span class="line">    private var methodChannel: FlutterMethodChannel?</span><br><span class="line">    </span><br><span class="line">    init(frame: CGRect, viewIdentifier viewId: Int64, arguments args: Any?, messenger: FlutterBinaryMessenger) &#123;</span><br><span class="line">        label = UILabel(frame: frame)</span><br><span class="line">        label.textAlignment = .center</span><br><span class="line">        label.text = &quot;iOS原生时间视图&quot;</span><br><span class="line">        </span><br><span class="line">        super.init()</span><br><span class="line">        </span><br><span class="line">        // 解析Flutter传递的参数</span><br><span class="line">        if let params = args as? [String: Any], </span><br><span class="line">           let textSize = params[&quot;textSize&quot;] as? Double &#123;</span><br><span class="line">            label.font = UIFont.systemFont(ofSize: CGFloat(textSize))</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            label.font = UIFont.systemFont(ofSize: 20)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        label.textColor = .blue</span><br><span class="line">        </span><br><span class="line">        // 创建方法通道</span><br><span class="line">        methodChannel = FlutterMethodChannel(</span><br><span class="line">            name: &quot;com.example/time_channel&quot;, </span><br><span class="line">            binaryMessenger: messenger</span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        methodChannel?.setMethodCallHandler(handleMethodCall)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func view() -&gt; UIView &#123;</span><br><span class="line">        return label</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func handleMethodCall(call: FlutterMethodCall, result: @escaping FlutterResult) &#123;</span><br><span class="line">        switch call.method &#123;</span><br><span class="line">        case &quot;getCurrentTime&quot;:</span><br><span class="line">            // 返回当前时间给Flutter</span><br><span class="line">            let formatter = DateFormatter()</span><br><span class="line">            formatter.dateFormat = &quot;HH:mm:ss&quot;</span><br><span class="line">            result(formatter.string(from: Date()))</span><br><span class="line">        default:</span><br><span class="line">            result(FlutterMethodNotImplemented)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// TimeViewFactory.swift</span><br><span class="line">class TimeViewFactory: NSObject, FlutterPlatformViewFactory &#123;</span><br><span class="line">    private var messenger: FlutterBinaryMessenger</span><br><span class="line"></span><br><span class="line">    init(messenger: FlutterBinaryMessenger) &#123;</span><br><span class="line">        self.messenger = messenger</span><br><span class="line">        super.init()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    func createArgsCodec() -&gt; FlutterMessageCodec &amp; NSObjectProtocol &#123;</span><br><span class="line">        return FlutterStandardMessageCodec.sharedInstance()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    func create(</span><br><span class="line">        withFrame frame: CGRect,</span><br><span class="line">        viewIdentifier viewId: Int64,</span><br><span class="line">        arguments args: Any?</span><br><span class="line">    ) -&gt; FlutterPlatformView &#123;</span><br><span class="line">        return TimeView(</span><br><span class="line">            frame: frame,</span><br><span class="line">            viewIdentifier: viewId,</span><br><span class="line">            arguments: args,</span><br><span class="line">            messenger: messenger</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// AppDelegate.swift (添加部分)</span><br><span class="line"></span><br><span class="line">import UIKit</span><br><span class="line">import Flutter</span><br><span class="line"></span><br><span class="line">@UIApplicationMain</span><br><span class="line">@objc class AppDelegate: FlutterAppDelegate &#123;</span><br><span class="line">    override func application(</span><br><span class="line">        _ application: UIApplication,</span><br><span class="line">        didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?</span><br><span class="line">    ) -&gt; Bool &#123;</span><br><span class="line">        </span><br><span class="line">        let controller: FlutterViewController = window?.rootViewController as! FlutterViewController</span><br><span class="line">        </span><br><span class="line">        // 注册PlatformView</span><br><span class="line">        let factory = TimeViewFactory(messenger: controller.binaryMessenger)</span><br><span class="line">        registrar(forPlugin: &quot;TimeViewPlugin&quot;)?.register(</span><br><span class="line">            factory,</span><br><span class="line">            withId: &quot;com.example/NativeTimeView&quot;</span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        GeneratedPluginRegistrant.register(with: self)</span><br><span class="line">        return super.application(application, didFinishLaunchingWithOptions: launchOptions)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// ios 配置</span><br><span class="line">&lt;!-- ios/Runner/Info.plist --&gt;</span><br><span class="line">&lt;key&gt;io.flutter.embedded_views_preview&lt;/key&gt;</span><br><span class="line">&lt;true/&gt;</span><br><span class="line"></span><br><span class="line">// android</span><br><span class="line"></span><br><span class="line">// TimeView.kt</span><br><span class="line">package com.example.platformviewdemo;</span><br><span class="line"></span><br><span class="line">import android.content.Context;</span><br><span class="line">import android.graphics.Color;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.widget.TextView;</span><br><span class="line">import androidx.annotation.NonNull;</span><br><span class="line">import androidx.annotation.Nullable;</span><br><span class="line">import io.flutter.plugin.common.BinaryMessenger;</span><br><span class="line">import io.flutter.plugin.common.MethodCall;</span><br><span class="line">import io.flutter.plugin.common.MethodChannel;</span><br><span class="line">import io.flutter.plugin.platform.PlatformView;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.Locale;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">class TimeView implements PlatformView, MethodChannel.MethodCallHandler &#123;</span><br><span class="line">    private final TextView textView;</span><br><span class="line">    private final MethodChannel methodChannel;</span><br><span class="line"></span><br><span class="line">    TimeView(Context context, BinaryMessenger messenger, int id, Map&lt;String, Object&gt; params) &#123;</span><br><span class="line">        textView = new TextView(context);</span><br><span class="line">        </span><br><span class="line">        // 解析Flutter传递的参数</span><br><span class="line">        if (params != null &amp;&amp; params.containsKey(&quot;textColor&quot;)) &#123;</span><br><span class="line">            String color = (String) params.get(&quot;textColor&quot;);</span><br><span class="line">            textView.setTextColor(Color.parseColor(color));</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            textView.setTextColor(Color.BLUE);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        textView.setTextSize(20);</span><br><span class="line">        textView.setText(&quot;Android原生时间视图&quot;);</span><br><span class="line">        </span><br><span class="line">        // 创建方法通道</span><br><span class="line">        methodChannel = new MethodChannel(messenger, &quot;com.example/time_channel&quot;);</span><br><span class="line">        methodChannel.setMethodCallHandler(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public View getView() &#123;</span><br><span class="line">        return textView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onMethodCall(@NonNull MethodCall call, @NonNull MethodChannel.Result result) &#123;</span><br><span class="line">        if (call.method.equals(&quot;getCurrentTime&quot;)) &#123;</span><br><span class="line">            // 返回当前时间给Flutter</span><br><span class="line">            SimpleDateFormat sdf = new SimpleDateFormat(&quot;HH:mm:ss&quot;, Locale.getDefault());</span><br><span class="line">            result.success(sdf.format(new Date()));</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            result.notImplemented();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void dispose() &#123;</span><br><span class="line">        methodChannel.setMethodCallHandler(null);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// TimeViewFactory.kt</span><br><span class="line">package com.example.platformviewdemo;</span><br><span class="line"></span><br><span class="line">import android.content.Context;</span><br><span class="line">import io.flutter.plugin.common.BinaryMessenger;</span><br><span class="line">import io.flutter.plugin.common.StandardMessageCodec;</span><br><span class="line">import io.flutter.plugin.platform.PlatformView;</span><br><span class="line">import io.flutter.plugin.platform.PlatformViewFactory;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class TimeViewFactory extends PlatformViewFactory &#123;</span><br><span class="line">    private final BinaryMessenger messenger;</span><br><span class="line"></span><br><span class="line">    public TimeViewFactory(BinaryMessenger messenger) &#123;</span><br><span class="line">        super(StandardMessageCodec.INSTANCE);</span><br><span class="line">        this.messenger = messenger;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public PlatformView create(Context context, int viewId, Object args) &#123;</span><br><span class="line">        Map&lt;String, Object&gt; params = (Map&lt;String, Object&gt;) args;</span><br><span class="line">        return new TimeView(context, messenger, viewId, params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// android/app/src/main/java/com/example/platformviewdemo/MainActivity.kt</span><br><span class="line">package com.example.platformviewdemo;</span><br><span class="line"></span><br><span class="line">import androidx.annotation.NonNull;</span><br><span class="line">import io.flutter.embedding.android.FlutterActivity;</span><br><span class="line">import io.flutter.embedding.engine.FlutterEngine;</span><br><span class="line">import io.flutter.plugin.common.MethodChannel;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends FlutterActivity &#123;</span><br><span class="line">    private static final String CHANNEL = &quot;com.example/time_channel&quot;;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configureFlutterEngine(@NonNull FlutterEngine flutterEngine) &#123;</span><br><span class="line">        super.configureFlutterEngine(flutterEngine);</span><br><span class="line">        </span><br><span class="line">        // 注册PlatformView</span><br><span class="line">        flutterEngine</span><br><span class="line">            .getPlatformViewsController()</span><br><span class="line">            .getRegistry()</span><br><span class="line">            .registerViewFactory(</span><br><span class="line">                &quot;com.example/NativeTimeView&quot;, </span><br><span class="line">                new TimeViewFactory(flutterEngine.getDartExecutor())</span><br><span class="line">            );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>AndroidView：</strong> 嵌入Android原生视图</p>
<p><strong>UiKitView：</strong> 嵌入iOS原生视图</p>
<p><strong>平台适配：</strong></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Platform.isIOS</span><br><span class="line">  ? CupertinoButton(onPressed: () &#123;&#125;, child: Text(&#x27;iOS&#x27;))</span><br><span class="line">  : ElevatedButton(onPressed: () &#123;&#125;, child: Text(&#x27;Android&#x27;));</span><br></pre></td></tr></table></figure>
<blockquote>
</blockquote>
<p><img src="https://upload-images.jianshu.io/upload_images/1976231-a65a119896d825b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="PlatformView"></p>
<h1 id="特殊布局控件"><a href="#特殊布局控件" class="headerlink" title="特殊布局控件"></a>特殊布局控件</h1><h2 id="1-Offstage"><a href="#1-Offstage" class="headerlink" title="1. Offstage"></a>1. Offstage</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 用于控制子组件是否参与布局和渲染的一个小部件，其核心功能是通过offstage属性切换子组件的可见状态</p>
</li>
<li><p><strong>规则：</strong> 当 offstage 属性设置为 true 时，子组件会被隐藏，并且不会参与布局或渲染，也不会占用任何空间，当 offstage 为 false 时，子组件正常显示</p>
</li>
<li><p><strong>注意：</strong> 如果子组件有动画，应该手动停止动画，因为 Offstage 不会停止动画，Offstage 不会从渲染树中移除子组件，只是不绘制和不响应点击事件，因此在需要频繁切换显示状态的场景中，Offstage 是一个高效的选择，隐藏状态的子组件不占用空间，可能导致父布局重新计算尺寸（如Column中的子组件隐藏后，其他子组件会向上移动）。需注意布局的稳定性，避免频繁切换导致界面抖动</p>
</li>
<li><p><strong>推荐：</strong> 实现平滑的显示&#x2F;隐藏动画（如淡入淡出、滑动入场）</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bool _isHidden = false; // 控制文本是否隐藏</span><br><span class="line"></span><br><span class="line">Column(</span><br><span class="line">  mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">  children: [</span><br><span class="line">    // 使用 Offstage 控制文本显示</span><br><span class="line">    Offstage(</span><br><span class="line">      offstage: _isHidden,</span><br><span class="line">      child: const Text(</span><br><span class="line">        &#x27;Hello, Offstage!&#x27;,</span><br><span class="line">        style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">    const SizedBox(height: 20),</span><br><span class="line">    // 切换按钮</span><br><span class="line">    ElevatedButton(</span><br><span class="line">      onPressed: () &#123;</span><br><span class="line">        setState(() =&gt; _isHidden = !_isHidden);</span><br><span class="line">      &#125;,</span><br><span class="line">      child: Text(_isHidden ? &#x27;显示文本&#x27; : &#x27;隐藏文本&#x27;),</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-2c858bd813c5b102.gif?imageMogr2/auto-orient/strip" alt="Offstage"></p>
<h2 id="2-Visibility"><a href="#2-Visibility" class="headerlink" title="2. Visibility"></a>2. Visibility</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 用于控制子组件的可见性。当设置为“可见”时，子组件将显示；设置为“隐藏”时，子组件将被隐藏。该组件还提供了多个可选属性来控制子组件的状态和行为，例如是否维持状态、动画、大小和交互性</p>
</li>
<li><p><strong>规则：</strong></p>
</li>
</ul>
</blockquote>
<ol>
<li><strong>child：</strong> 必填属性，指定要控制可见性的子组件。</li>
<li><strong>visible：</strong> 可选属性，布尔值，控制子组件的显示或隐藏，默认为true。</li>
<li><strong>replacement：</strong> 可选属性，当子组件不可见时显示的替代小部件。</li>
<li><strong>maintainState：</strong> 可选属性，布尔值，控制子组件状态是否保持不变，默认为false。</li>
<li><strong>maintainAnimation：</strong> 可选属性，布尔值，控制子组件动画是否保持不变，默认为false。</li>
<li><strong>maintainSize：</strong> 可选属性，布尔值，控制子组件空间是否保持不变，默认为false。</li>
<li><strong>maintainInteractivity：</strong> 可选属性，布尔值，控制子组件在不可见时是否仍可交互，默认为false。</li>
<li><strong>maintainSemantics：</strong> 可选属性，布尔值，控制子组件语义是否保持不变，默认为false。<blockquote>
<ul>
<li><p><strong>注意：</strong> 即使子组件被隐藏，其状态也会被维持，这在需要保留用户输入或状态的情况下非常有用，对高频切换显隐的组件（如列表项），避免启用 maintainState，防止内存泄漏，</p>
</li>
<li><p><strong>推荐：</strong> 表单动态字段、Tab 切换内容、配合 AnimatedSwitcher 实现渐变&#x2F;缩放效果</p>
</li>
</ul>
</blockquote>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Center(</span><br><span class="line">  child: Column(</span><br><span class="line">    mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">    children: &lt;Widget&gt;[</span><br><span class="line">      Visibility(</span><br><span class="line">        visible: _isShown,</span><br><span class="line">        child: Container(</span><br><span class="line">          width: 100,</span><br><span class="line">          height: 100,</span><br><span class="line">          color: Colors.amber,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      const SizedBox(height: 20),</span><br><span class="line">      ElevatedButton(</span><br><span class="line">        onPressed: _toggleVisibility,</span><br><span class="line">        child: Text(_isShown ? &#x27;隐藏盒子&#x27; : &#x27;显示盒子&#x27;),</span><br><span class="line">      ),</span><br><span class="line">    ],</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-831a3fd594b06b28.gif?imageMogr2/auto-orient/strip" alt="Visibility"></p>
<h2 id="3-IgnorePointer"><a href="#3-IgnorePointer" class="headerlink" title="3. IgnorePointer"></a>3. IgnorePointer</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 用于忽略其子组件的指针事件（如点击、拖动等）。这意味着包裹在 IgnorePointer 中的子组件将不会响应用户的交互操作，但仍然会显示在界面上。IgnorePointer 与 AbsorbPointer 类似，但 IgnorePointer 不会终止指针事件，而是让这些事件传递到其下方的组件</p>
</li>
<li><p><strong>规则：</strong> ignoring: 布尔值，决定是否忽略指针事件。默认为 true，ignoringSemantics: 布尔值，决定是否忽略语义信息。默认为 null，即不忽略，可以嵌套在任何布局组件（如 Stack、Column）中。<br>若多个 IgnorePointer 嵌套，外层 ignoring 为 true 时，内层设置无效，事件穿透：当 ignoring 为 true 时，子组件的点击事件会穿透到父级组件。适用于需要隐藏交互但保留显示效果的场景（如背景图、装饰元素）</p>
</li>
<li><p><strong>注意：</strong> 避免在复杂嵌套结构中滥用，可能导致不必要的渲染开销。优先结合 Stack 和 Positioned 实现局部交互控制，需动态控制 ignoring 时，建议通过 StatefulWidget 管理状态，配合 setState 更新，与 GestureDetector 结合使用时，需注意事件优先级。例如，外层 IgnorePointer 为 true 时，内层 GestureDetector 无法触发事件</p>
</li>
<li><p><strong>推荐：</strong> 背景图片、水印等无需交互的组件、表单提交时禁用按钮点击，防止重复提交、在 Stack 中叠加多个组件时，控制特定层的交互优先级</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Column(</span><br><span class="line">  mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">  children: [</span><br><span class="line">    // 使用 IgnorePointer 包裹按钮</span><br><span class="line">    IgnorePointer(</span><br><span class="line">      ignoring: _isIgnoring,</span><br><span class="line">      child: ElevatedButton(</span><br><span class="line">        onPressed: () &#123;</span><br><span class="line">          print(&#x27;按钮被点击&#x27;);</span><br><span class="line">        &#125;,</span><br><span class="line">        child: const Text(&#x27;可点击按钮&#x27;),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">    const SizedBox(height: 20),</span><br><span class="line">    // 切换开关</span><br><span class="line">    Switch(</span><br><span class="line">      value: _isIgnoring,</span><br><span class="line">      onChanged: (value) &#123;</span><br><span class="line">        setState(() &#123;</span><br><span class="line">          _isIgnoring = value;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">      activeTrackColor: Colors.blueGrey,</span><br><span class="line">      activeColor: Colors.blue,</span><br><span class="line">    ),</span><br><span class="line">    const Text(&#x27;开关开启时按钮不可点击&#x27;),</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-078c8668ce079a84.gif?imageMogr2/auto-orient/strip" alt="IgnorePointer"></p>
<h2 id="4-AbsorbPointer"><a href="#4-AbsorbPointer" class="headerlink" title="4. AbsorbPointer"></a>4. AbsorbPointer</h2><blockquote>
<ul>
<li><p><strong>说明：</strong> 用于阻止子组件接收指针事件的布局组件，其核心功能是通过终止命中测试（HitTest）来禁用子树的交互能力。它不会影响布局和绘制，仅控制事件传递</p>
</li>
<li><p><strong>规则：</strong> absorbing：布尔值，默认为 true。当设置为 true 时，子组件将无法接收用户输入事件，必须直接包裹需要禁用的子组件，且不影响父级或外部组件的交互</p>
</li>
<li><p><strong>注意：</strong> 虽然 AbsorbPointer 的使用不会显著影响性能，但在复杂的布局中应谨慎使用，避免不必要的嵌套，需配合状态管理（如 setState）动态控制 absorbing 属性，实现交互开关，即使 AbsorbPointer 设置为吸收模式，它仍然会将点击事件传递给其父组件。这意味着父组件的 GestureDetector 仍然能够捕获点击事件</p>
</li>
<li><p><strong>推荐：</strong> 临时禁用交互、批量禁用组件</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Center(</span><br><span class="line">  child: Column(</span><br><span class="line">    mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">    children: [</span><br><span class="line">      // 外层可点击区域</span><br><span class="line">      GestureDetector(</span><br><span class="line">        // ignore: avoid_print</span><br><span class="line">        onTap: () =&gt; print(&#x27;外层点击&#x27;),</span><br><span class="line">        child: Container(</span><br><span class="line">          color: Colors.grey,</span><br><span class="line">          padding: const EdgeInsets.all(16),</span><br><span class="line">          child: AbsorbPointer(</span><br><span class="line">            absorbing: true, // 禁用子组件交互</span><br><span class="line">            child: Row(</span><br><span class="line">              children: [</span><br><span class="line">                ElevatedButton(</span><br><span class="line">                  // ignore: avoid_print</span><br><span class="line">                  onPressed: () =&gt; print(&#x27;按钮点击&#x27;),</span><br><span class="line">                  child: const Text(&#x27;禁用按钮&#x27;),</span><br><span class="line">                ),</span><br><span class="line">                const SizedBox(width: 16),</span><br><span class="line">                const Text(&#x27;不可点击区域&#x27;),</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      const SizedBox(height: 20),</span><br><span class="line">      // 对比示例（交互正常）</span><br><span class="line">      GestureDetector(</span><br><span class="line">        // ignore: avoid_print</span><br><span class="line">        onTap: () =&gt; print(&#x27;外层点击&#x27;),</span><br><span class="line">        child: Container(</span><br><span class="line">          color: Colors.grey,</span><br><span class="line">          padding: const EdgeInsets.all(16),</span><br><span class="line">          child: AbsorbPointer(</span><br><span class="line">            absorbing: false, // 启用子组件交互</span><br><span class="line">            child: ElevatedButton(</span><br><span class="line">              // ignore: avoid_print</span><br><span class="line">              onPressed: () =&gt; print(&#x27;正常按钮&#x27;),</span><br><span class="line">              child: const Text(&#x27;可点击按钮&#x27;),</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    ],</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-8dd7fec9bf947ef9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="AbsorbPointer"></p>
<blockquote>
<p><strong>Overlay  覆盖层</strong></p>
<p><strong>Opacity 透明度效果</strong></p>
<p><strong>AnimatedOpacity 动画透明度</strong></p>
<p><strong>ClipRRect 圆角裁剪</strong></p>
<p><strong>ClipOval  椭圆裁剪</strong></p>
<p><strong>ClipPath  路径裁剪</strong></p>
<p><strong>ClipRect  矩形裁剪</strong></p>
<p><strong>BackdropFilter  背景滤镜</strong></p>
<p><strong>DecoratedBox  装饰盒子</strong></p>
<p><strong>RotatedBox  旋转盒子</strong></p>
</blockquote>
<h1 id="平台特定布局控件"><a href="#平台特定布局控件" class="headerlink" title="平台特定布局控件"></a>平台特定布局控件</h1><blockquote>
<p><strong>CupertinoPageScaffold  iOS风格页面脚手架</strong></p>
<p><strong>CupertinoTabScaffold  iOS风格标签栏脚手架</strong></p>
<p><strong>CupertinoNavigationBar   iOS风格导航栏</strong></p>
<p><strong>CupertinoTabBar  iOS风格标签栏</strong></p>
<p><strong>CupertinoActionSheet  iOS风格操作表</strong></p>
<p><strong>CupertinoAlertDialog  iOS风格警告对话框</strong></p>
<p><strong>CupertinoContextMenu  iOS风格上下文菜单</strong></p>
<p><strong>MaterialApp	Material Design    应用容器</strong></p>
<p><strong>Scaffold	  Material Design   页面脚手架</strong></p>
<p><strong>AppBar	Material Design   应用栏</strong></p>
<p><strong>BottomAppBar   Material Design   底部应用栏</strong></p>
<p><strong>TabBar  Material Design   标签栏</strong></p>
<p><strong>Drawer  Material Design   抽屉</strong></p>
<p><strong>SnackBar  Material Design  底部消息条</strong></p>
<p><strong>BottomSheet  Material Design   底部表单</strong></p>
<p><strong>Material	Material Design   表面</strong></p>
<p><strong>Card  Material Design   卡片</strong></p>
<p><strong>Chip  Material Design  标签</strong></p>
<p><strong>Divider   Material Design 分割线：</strong> 水平分割线组件，常见于列表项、板块划分等场景</p>
<p><strong>ListTile   Material Design 列表项：</strong> 主要用于创建列表项（List Item），通常用于 ListView、Card 或 Drawer 等布局中</p>
</blockquote>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote>
<p>虽然 Flutter 提供了超过 100+ 个布局相关控件，以上列举覆盖了几乎所有官方核心布局控件，实际开发中最常用的约只有 15 个。掌握 <strong>Row&#x2F;Column&#x2F;Stack&#x2F;Expanded&#x2F;ListView</strong>这五个核心组件即可解决绝大多数布局需求。</p>
<p><strong>基础布局三巨头：</strong> Row&#x2F;Column（线性布局）、Stack（层叠布局）、ListView&#x2F;GridView（滚动布局）满足 80% 场景</p>
<p><strong>弹性布局必用：</strong> Expanded 和 Flexible 是自适应布局的核心</p>
<p><strong>性能关键：</strong> 长列表必用 ListView.builder，避免滥用 IntrinsicWidth&#x2F;Height，复杂动画使用 CustomMultiChildLayout</p>
<p><strong>响应式最佳实践：</strong> LayoutBuilder + MediaQuery + 约束条件判断</p>
</blockquote>
<p><a href="https://github.com/GavinCarter1991/flutter-layout-demo">DEMO</a></p>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>“Flutter”</tag>
        <tag>“Layout”</tag>
        <tag>布局</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS-发布代码到cocoapods上详细步骤</title>
    <url>/2025/06/18/iOS-%E5%8F%91%E5%B8%83%E4%BB%A3%E7%A0%81%E5%88%B0cocoapods%E4%B8%8A%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/</url>
    <content><![CDATA[<h2 id="完整步骤："><a href="#完整步骤：" class="headerlink" title="完整步骤："></a>完整步骤：</h2><blockquote>
<ol>
<li><p>把你需要发布到CocoaPods的代码写好。</p>
</li>
<li><p>用Xcode创建一个Framework项目，将你写好的代码拖入Framework，进行相关配置，根据需求打包Framework。</p>
</li>
<li><p>注册CocoaPods账号，检查库名是否已被占用，没有被占用就创建Podspec文件，拖入通用Framework。</p>
</li>
<li><p>创建git仓库，修改xxx.podspec配置，将代码推送到远程仓库并进行版本控制，验证Podspec文件。</p>
</li>
<li><p>验证通过，发布到 CocoaPods。</p>
</li>
</ol>
</blockquote>
<h2 id="1-创建Framework项目"><a href="#1-创建Framework项目" class="headerlink" title="1. 创建Framework项目"></a>1. 创建Framework项目</h2><p><strong>1. 在Xcode中，选择File -&gt; New -&gt; Project</strong></p>
<p><strong>2. 选择iOS -&gt; Framework &amp; Library -&gt; Framework，然后点击Next</strong></p>
<p><img src="https://upload-images.jianshu.io/upload_images/1976231-be0160ff8d3afd2a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建Framework"></p>
<p><strong>3. 输入产品名称（例如：<code>LanguageSet</code>），选择语言（Objective-C或Swift），点击Next并保存。</strong></p>
<p><img src="https://upload-images.jianshu.io/upload_images/1976231-83b4887d1f953d7e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建cocoapodsDemo"></p>
<h2 id="2-配置Framework"><a href="#2-配置Framework" class="headerlink" title="2. 配置Framework"></a>2. 配置Framework</h2><ul>
<li><strong>添加代码文件</strong>：将你的源代码文件拖入项目，确保在Build Phases -&gt; Headers中设置好公开头文件（Public Headers）。</li>
</ul>
<p><img src="https://upload-images.jianshu.io/upload_images/1976231-ae2a853b2b80c1ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加代码文件"></p>
<ul>
<li><strong>将需要公开的头文件拖到public：</strong></li>
</ul>
<p><img src="https://upload-images.jianshu.io/upload_images/1976231-d9a8a7555487533e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="设置好公开头文件"></p>
<p><strong>添加第三方库</strong></p>
<blockquote>
<p>1.使用cocoapod是可以自动管理第三方库，在Link Binary With Libraries 中找到Pod_的framwork 选择Optional</p>
</blockquote>
<blockquote>
<p>2.手动添加第三方库和文件时，不要选择target</p>
</blockquote>
<ul>
<li><p><strong>设置Build Settings</strong>:</p>
</li>
<li><p><strong>Mach-O Type</strong>: 默认为Dynamic Library，也可以选择Static Library（但Framework通常指动态库）。<br><img src="https://upload-images.jianshu.io/upload_images/1976231-4ec8c2a6b6993b23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Mach-O Type"></p>
</li>
<li><p><strong>Build Active Architecture Only</strong>: 设置为NO，以支持所有架构。<br><img src="https://upload-images.jianshu.io/upload_images/1976231-c68f41b1eae65414.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Build Active Architecture Only"></p>
</li>
<li><p><strong>iOS Deployment Target</strong>: 选择你希望支持的最低iOS版本。<br><img src="https://upload-images.jianshu.io/upload_images/1976231-7f6fb03188cbd741.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="iOS Deployment Target"></p>
</li>
<li><p><strong>Swift版本</strong>：如果是Swift项目，确保设置正确的Swift版本。</p>
</li>
<li><p><strong>Enable Bitcode</strong>: 如果需要，设置为YES。</p>
</li>
</ul>
<h2 id="3-打包Framework（支持真机和模拟器）"><a href="#3-打包Framework（支持真机和模拟器）" class="headerlink" title="3. 打包Framework（支持真机和模拟器）"></a>3. 打包Framework（支持真机和模拟器）</h2><blockquote>
<p>我们需要同时支持真机和模拟器架构（arm64, x86_64），并最终合并为一个通用Framework。</p>
</blockquote>
<p><strong>1. 分别编译真机和模拟器版本</strong></p>
<p><strong>1. 真机Release</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xcodebuild archive </span><br><span class="line"></span><br><span class="line">-scheme LanguageSet </span><br><span class="line"></span><br><span class="line">-configuration Release </span><br><span class="line"></span><br><span class="line">-destination &quot;generic/platform=iOS&quot; </span><br><span class="line"></span><br><span class="line">-archivePath &quot;build/LanguageSet-iOS&quot; </span><br><span class="line"></span><br><span class="line">SKIP_INSTALL=NO </span><br><span class="line"></span><br><span class="line">BUILD_LIBRARY_FOR_DISTRIBUTION=YES</span><br></pre></td></tr></table></figure>

<p><strong>2. 模拟器Release</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xcodebuild archive </span><br><span class="line"></span><br><span class="line">-scheme LanguageSet </span><br><span class="line"></span><br><span class="line">-configuration Release </span><br><span class="line"></span><br><span class="line">-destination &quot;generic/platform=iOS Simulator&quot; </span><br><span class="line"></span><br><span class="line">-archivePath &quot;build/LanguageSet-Simulator&quot; </span><br><span class="line"></span><br><span class="line">SKIP_INSTALL=NO </span><br><span class="line"></span><br><span class="line">BUILD_LIBRARY_FOR_DISTRIBUTION=YES</span><br></pre></td></tr></table></figure>

<p><strong>2. 合并两个Framework-打包通用Framework（支持真机+模拟器）</strong></p>
<blockquote>
<p>使用<code>lipo</code>工具合并二进制文件，并复制模拟器的swiftmodule（如果有）到真机Framework中。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 创建通用Framework目录</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p build/LanguageSet-Universal</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制真机Framework到通用目录</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> -R build/LanguageSet-iOS.xcarchive/Products/Library/Frameworks/LanguageSet build/LanguageSet-Universal/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并二进制文件</span></span><br><span class="line"></span><br><span class="line">lipo -create </span><br><span class="line"></span><br><span class="line">build/LanguageSet-iOS.xcarchive/Products/Library/Frameworks/LanguageSet.framework/LanguageSet </span><br><span class="line"></span><br><span class="line">build/LanguageSet-Simulator.xcarchive/Products/Library/Frameworks/LanguageSetframework/LanguageSet </span><br><span class="line"></span><br><span class="line">-output build/LanguageSet-Universal/LanguageSet.framework/LanguageSet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果使用Swift，需要合并swiftmodule</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="string">&quot;build/LanguageSet-Simulator.xcarchive/Products/Library/Frameworks/LanguageSet.framework/Modules/LanguageSet.swiftmodule&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> -R build/LanguageSet-Simulator.xcarchive/Products/Library/Frameworks/LanguageSet.framework/Modules/LanguageSet.swiftmodule/* \</span><br><span class="line"></span><br><span class="line">build/LanguageSet-Universal/LanguageSet.framework/Modules/LanguageSet.swiftmodule/</span><br><span class="line"></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>将上面的合并起来：</strong></p>
<p><strong>创建一个打包脚本 build_framework.sh</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line"># 1. 定义基础变量</span><br><span class="line">SCHEME_NAME=&quot;LanguageSet&quot;   # 替换为实际Scheme名</span><br><span class="line">PROJECT_NAME=&quot;LanguageSet&quot;    # 替换为实际工程名</span><br><span class="line">CONFIGURATION=&quot;Release&quot;           # 建议使用Release模式</span><br><span class="line">OUTPUT_DIR=&quot;$&#123;PWD&#125;/Output&quot;        # 输出目录</span><br><span class="line"></span><br><span class="line"># 2. 清理旧构建</span><br><span class="line">rm -rf &quot;$&#123;OUTPUT_DIR&#125;&quot;</span><br><span class="line">mkdir -p &quot;$&#123;OUTPUT_DIR&#125;&quot;</span><br><span class="line"></span><br><span class="line"># 3. 编译真机版本 (arm64, armv7)</span><br><span class="line">xcodebuild archive \</span><br><span class="line">  -project &quot;$&#123;PROJECT_NAME&#125;.xcodeproj&quot; \</span><br><span class="line">  -scheme &quot;$&#123;SCHEME_NAME&#125;&quot; \</span><br><span class="line">  -configuration &quot;$&#123;CONFIGURATION&#125;&quot; \</span><br><span class="line">  -sdk iphoneos \</span><br><span class="line">  -archivePath &quot;$&#123;OUTPUT_DIR&#125;/iphoneos.xcarchive&quot; \</span><br><span class="line">  SKIP_INSTALL=NO \</span><br><span class="line">  BUILD_LIBRARIES_FOR_DISTRIBUTION=YES  # 支持多架构 [[6]]</span><br><span class="line"></span><br><span class="line"># 4. 编译模拟器版本 (x86_64, arm64)</span><br><span class="line">xcodebuild archive \</span><br><span class="line">  -project &quot;$&#123;PROJECT_NAME&#125;.xcodeproj&quot; \</span><br><span class="line">  -scheme &quot;$&#123;SCHEME_NAME&#125;&quot; \</span><br><span class="line">  -configuration &quot;$&#123;CONFIGURATION&#125;&quot; \</span><br><span class="line">  -sdk iphonesimulator \</span><br><span class="line">  -archivePath &quot;$&#123;OUTPUT_DIR&#125;/iphonesimulator.xcarchive&quot; \</span><br><span class="line">  SKIP_INSTALL=NO \</span><br><span class="line">  BUILD_LIBRARIES_FOR_DISTRIBUTION=YES  # M1芯片需包含arm64 [[3, 6]]</span><br><span class="line"></span><br><span class="line"># 5. 合并为XCFramework (官方推荐方式)</span><br><span class="line">xcodebuild -create-xcframework \</span><br><span class="line">  -framework &quot;$&#123;OUTPUT_DIR&#125;/iphoneos.xcarchive/Products/Library/Frameworks/$&#123;SCHEME_NAME&#125;.framework&quot; \</span><br><span class="line">  -framework &quot;$&#123;OUTPUT_DIR&#125;/iphonesimulator.xcarchive/Products/Library/Frameworks/$&#123;SCHEME_NAME&#125;.framework&quot; \</span><br><span class="line">  -output &quot;$&#123;OUTPUT_DIR&#125;/$&#123;SCHEME_NAME&#125;.xcframework&quot;  # 生成多平台兼容包 [[2, 6, 12, 16]]</span><br><span class="line"></span><br><span class="line"># 6. 可选：生成Fat Framework (传统合并方式)</span><br><span class="line"># lipo -create \</span><br><span class="line">#   &quot;$&#123;OUTPUT_DIR&#125;/iphoneos.xcarchive/Products/Library/Frameworks/$&#123;SCHEME_NAME&#125;.framework/$&#123;SCHEME_NAME&#125;&quot; \</span><br><span class="line">#   &quot;$&#123;OUTPUT_DIR&#125;/iphonesimulator.xcarchive/Products/Library/Frameworks/$&#123;SCHEME_NAME&#125;.framework/$&#123;SCHEME_NAME&#125;&quot; \</span><br><span class="line">#   -output &quot;$&#123;OUTPUT_DIR&#125;/$&#123;SCHEME_NAME&#125;.framework/$&#123;SCHEME_NAME&#125;&quot;  # 需手动处理头文件 [[11, 15, 20]]</span><br><span class="line"></span><br><span class="line"># 7. 打开输出目录</span><br><span class="line">open &quot;$&#123;OUTPUT_DIR&#125;&quot;</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-909a8b6bfe8a86bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="build_framework.sh 存放"></p>
<p><strong>运行脚本</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x build_framework.sh</span><br><span class="line">./build_framework.sh</span><br></pre></td></tr></table></figure>

<p><strong>生成文件夹：</strong></p>
<p><img src="https://upload-images.jianshu.io/upload_images/1976231-b9c853f304e38d24.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="XCFramework"></p>
<h2 id="注册CocoaPods的Trunk"><a href="#注册CocoaPods的Trunk" class="headerlink" title="注册CocoaPods的Trunk"></a>注册CocoaPods的Trunk</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 注册CocoaPods账号（仅首次）</span><br><span class="line">pod trunk register your-email@example.com &quot;Your Name&quot; --description=&#x27;MacBook Pro&#x27;</span><br></pre></td></tr></table></figure>

<p><code>CocoaPods会向你提供的邮箱发送一个验证链接，点击链接完成验证。 </code></p>
<p><strong>验证CocoaPods的Trunk注册结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod trunk me</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-5235e92f3f02d89f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Trunk创建验证"></p>
<h2 id="创建Podspec文件"><a href="#创建Podspec文件" class="headerlink" title="创建Podspec文件"></a>创建Podspec文件</h2><blockquote>
<p> <strong>pod lib create LanguageSet</strong></p>
</blockquote>
<p><img src="https://upload-images.jianshu.io/upload_images/1976231-e39b370605e72821.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建Podspec文件"></p>
<p><strong>生成Podspec文件夹</strong></p>
<p><img src="https://upload-images.jianshu.io/upload_images/1976231-086200ce38c70fe4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="生成Podspec文件夹"></p>
<blockquote>
<p> <strong>Example:</strong> 放demo应用</p>
<p> <strong>LanguageSet:</strong> &#x2F;Classes主代码 &#x2F;Assets图片资源文件</p>
</blockquote>
<p><strong>将之前生成的XCFramework拖入新建Podspec文件夹中的LanguageSet中</strong></p>
<p><img src="https://upload-images.jianshu.io/upload_images/1976231-60eec0705967d61c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="XCFramework拖入后"></p>
<h2 id="创建Git仓库"><a href="#创建Git仓库" class="headerlink" title="创建Git仓库"></a>创建Git仓库</h2><p><img src="https://upload-images.jianshu.io/upload_images/1976231-efca2c60c3794fd4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建Git仓库"></p>
<p><strong>修改LanguageSet.podspec配置</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Pod::Spec.new do |s|</span><br><span class="line">  s.name             = &#x27;LanguageSet&#x27;</span><br><span class="line">  s.version          = &#x27;0.0.1&#x27;</span><br><span class="line">  s.summary          = &#x27;multilingual processing.&#x27;</span><br><span class="line"></span><br><span class="line">  s.description      = &lt;&lt;-DESC</span><br><span class="line">  A few simple lines of code can handle multiple languages</span><br><span class="line">  DESC</span><br><span class="line"></span><br><span class="line">  s.homepage         = &#x27;https://github.com/GavinCarter1991/LanguageSet&#x27;</span><br><span class="line">  s.license          = &#123; :type =&gt; &#x27;MIT&#x27;, :file =&gt; &#x27;LICENSE&#x27; &#125;</span><br><span class="line">  s.author           = &#123; &#x27;gavin&#x27; =&gt; &#x27;kindyourself@163.com&#x27; &#125;</span><br><span class="line">  s.source           = &#123; :git =&gt; &#x27;https://github.com/GavinCarter1991/LanguageSet.git&#x27;, :tag =&gt; s.version.to_s &#125;</span><br><span class="line"></span><br><span class="line">  s.ios.deployment_target = &#x27;12.0&#x27;</span><br><span class="line">  s.vendored_frameworks = &#x27;LanguageSet/Classes/LanguageSet.xcframework&#x27;</span><br><span class="line">  # 添加模块映射</span><br><span class="line">  s.preserve_paths = &#x27;LanguageSet/Classes/LanguageSet.xcframework&#x27;</span><br><span class="line">  </span><br><span class="line">  # 添加资源处理排除规则</span><br><span class="line">  s.pod_target_xcconfig = &#123;</span><br><span class="line">    &#x27;EXCLUDED_FILE_GROUP_PATTERNS&#x27; =&gt; [</span><br><span class="line">      &#x27;**/LanguageSet.xcframework/**/_CodeSignature/**&#x27;,</span><br><span class="line">      &#x27;**/LanguageSet.xcframework/**/Modules/**&#x27;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  # 禁用模块验证（针对 xcframework）</span><br><span class="line">  s.user_target_xcconfig = &#123; &#x27;VALIDATE_WORKSPACE&#x27; =&gt; &#x27;NO&#x27; &#125;</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p><strong>设置Git仓库</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建本地仓库</span><br><span class="line">cd LanguageSet 进入文件夹</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line"></span><br><span class="line"># 创建远程仓库（在Gitee/GitHub上创建）</span><br><span class="line">git remote add origin https://github.com/GavinCarter1991/LanguageSet.git // 关联仓库</span><br><span class="line">git push -u origin main</span><br><span class="line"></span><br><span class="line"># 添加版本标签</span><br><span class="line">git tag 0.0.1</span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-abf0ebb55afd72eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="tags"></p>
<h2 id="发布到CocoaPods"><a href="#发布到CocoaPods" class="headerlink" title="发布到CocoaPods"></a>发布到CocoaPods</h2><p><strong>1. 首次发布</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 验证podspec</span><br><span class="line">pod lib lint --allow-warnings</span><br><span class="line"></span><br><span class="line"># 发布到CocoaPods</span><br><span class="line">pod trunk push CocoaPodsDemo.podspec --allow-warnings</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-6524cd38c321ead0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="发布到CocoaPods"></p>
<p><strong>2. 更新版本</strong></p>
<blockquote>
<p>更新podspec中的版本号</p>
</blockquote>
<blockquote>
<p>推送新代码到你的库的 Git 仓库，创建新的Git标签(tag)</p>
</blockquote>
<blockquote>
<p>重复推送和发布的步骤</p>
</blockquote>
<p><a href="https://github.com/GavinCarter1991/LanguageSet">Demo</a></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>“iOS”</tag>
        <tag>“cocoapods”</tag>
        <tag>Github</tag>
        <tag>发布</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS-自定义带抽屉效果的tabBar</title>
    <url>/2016/07/15/iOS-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B8%A6%E6%8A%BD%E5%B1%89%E6%95%88%E6%9E%9C%E7%9A%84tabBar/</url>
    <content><![CDATA[<p>demo地址：<a href="https://github.com/GavinCarter1991/-tarBar">gitHub</a></p>
<h3 id="一、先来个效果"><a href="#一、先来个效果" class="headerlink" title="一、先来个效果"></a>一、先来个效果</h3><p><img src="https://i-blog.csdnimg.cn/blog_migrate/05244727e176525fc66016280b6309d6.webp?x-image-process=image/format,png" alt="tabBar.gif"></p>
<h3 id="二、代码示例"><a href="#二、代码示例" class="headerlink" title="二、代码示例"></a>二、代码示例</h3><p><strong>1.抽屉页作为根视图：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@interface DrawerViewController ()</span><br><span class="line">&#123;</span><br><span class="line">    UITapGestureRecognizer *tapGesture;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建左边的抽屉</span><br><span class="line">@property (nonatomic, strong) LeftViewController *leftViewController;</span><br><span class="line"></span><br><span class="line">//创建右边的标签控制器</span><br><span class="line">@property (nonatomic, strong) MTabBarViewController *mainViewController;</span><br><span class="line">//抽屉是否显示的标示</span><br><span class="line"></span><br><span class="line">@property (nonatomic, assign) BOOL isOpen;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation DrawerViewController</span><br><span class="line"></span><br><span class="line">- (void)dealloc</span><br><span class="line">&#123;</span><br><span class="line">    //移除通知</span><br><span class="line">    [[NSNotificationCenter defaultCenter]removeObserver:self name:@&quot;buttonTap&quot; object:nil];</span><br><span class="line">&#125;</span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    [self createTabBarController];</span><br><span class="line">    [self createLeftVc];</span><br><span class="line">    </span><br><span class="line">    self.view.backgroundColor = [UIColor grayColor];</span><br><span class="line">    </span><br><span class="line">    //添加通知，监听TabBar的点击事件 隐藏左边抽屉</span><br><span class="line">    [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(buttonTap) name:@&quot;buttonTap&quot; object:nil];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">- (void)buttonTap</span><br><span class="line">&#123;</span><br><span class="line">    //抽屉展开时则隐藏</span><br><span class="line">    if (self.isOpen == YES) &#123;</span><br><span class="line">        [self openOrHidden];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建左边抽屉</span><br><span class="line">- (void)createLeftVc</span><br><span class="line">&#123;</span><br><span class="line">    self.leftViewController = [[LeftViewController alloc]init];</span><br><span class="line">    </span><br><span class="line">    //抽屉控制器添加到父控制器中</span><br><span class="line">    [self addChildViewController:self.leftViewController];</span><br><span class="line">    self.leftViewController.view.frame = LeftViewStartFrame();</span><br><span class="line">    [self.view addSubview:self.leftViewController.view];</span><br><span class="line">    [self.leftViewController didMoveToParentViewController:self];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建右边的标签控制器</span><br><span class="line">- (void)createTabBarController&#123;</span><br><span class="line">    //</span><br><span class="line">    NSArray *classNames = @[@&quot;ProductViewController&quot;,@&quot;MessageViewController&quot;,@&quot;OrderViewController&quot;];</span><br><span class="line">    </span><br><span class="line">    //保存viewControllers</span><br><span class="line">    NSMutableArray *viewControllers = [NSMutableArray array];</span><br><span class="line">    [classNames enumerateObjectsUsingBlock:^(NSString *  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) &#123;</span><br><span class="line">        //先把字符串转化为类名</span><br><span class="line">        Class class = NSClassFromString(obj);</span><br><span class="line">        </span><br><span class="line">        //创建ViewController</span><br><span class="line">        UIViewController *vc = [[class alloc]init];</span><br><span class="line">        UINavigationController *aNav = [[UINavigationController alloc]initWithRootViewController:vc];</span><br><span class="line">        </span><br><span class="line">        [viewControllers addObject:aNav];</span><br><span class="line">        </span><br><span class="line">    &#125;];</span><br><span class="line">    //TabBarController 创建</span><br><span class="line">    _mainViewController = [[MTabBarViewController alloc]initWithViewControllers:viewControllers];</span><br><span class="line">    _mainViewController.view.backgroundColor = [UIColor brownColor];</span><br><span class="line">    </span><br><span class="line">    //添加标签控制器到父控制器</span><br><span class="line">    [self addChildViewController:self.mainViewController];</span><br><span class="line">    self.mainViewController.view.frame = BOUNDS;</span><br><span class="line">    [self.view addSubview:self.mainViewController.view];</span><br><span class="line">    [self.mainViewController didMoveToParentViewController:self];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//标签控制器显示的vc的根控制器的view往右边移动</span><br><span class="line">//tabBar -&gt; Nav (ViewControllers[selectedIndex]) -&gt; Nav.rootViewController.view</span><br><span class="line">- (void)tabBar_Nav_RootViewController_viewMoveRight</span><br><span class="line">&#123;</span><br><span class="line">    //标签控制器当中 当前显示的控制器</span><br><span class="line">    UINavigationController *nav = self.mainViewController.viewControllers[self.mainViewController.selectedIndex];</span><br><span class="line">    //取出导航控制器的根控制器</span><br><span class="line">    UIViewController *rootVc = nav.childViewControllers[0];</span><br><span class="line">    rootVc.view.frame = RightContentEndFrame();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)tabBar_Nav_RootViewController_viewMoveLeft</span><br><span class="line">&#123;</span><br><span class="line">    //标签控制器当中 当前显示的控制器</span><br><span class="line">    UINavigationController *nav = self.mainViewController.viewControllers[self.mainViewController.selectedIndex];</span><br><span class="line">    //取出导航控制器的根控制器</span><br><span class="line">    UIViewController *rootVc = nav.childViewControllers[0];</span><br><span class="line">    rootVc.view.frame = RigntContentStartFrame();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//显示左边抽屉</span><br><span class="line">- (void)open</span><br><span class="line">&#123;</span><br><span class="line">    [UIView animateWithDuration:0.48 animations:^&#123;</span><br><span class="line">        self.leftViewController.view.frame = LeftViewEndFrame();</span><br><span class="line">        [self tabBar_Nav_RootViewController_viewMoveRight];</span><br><span class="line">    &#125; completion:nil];</span><br><span class="line">    </span><br><span class="line">    //添加点击手势，点击某些区域的隐藏抽屉</span><br><span class="line">    tapGesture = [[UITapGestureRecognizer alloc]initWithTarget:self action:@selector(tap:)];</span><br><span class="line">    tapGesture.numberOfTapsRequired = 1;</span><br><span class="line">    tapGesture.numberOfTouchesRequired = 1;</span><br><span class="line">    [self.view addGestureRecognizer:tapGesture];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)tap:(UITapGestureRecognizer *)gesturer</span><br><span class="line">&#123;</span><br><span class="line">    //获取点击的位置</span><br><span class="line">    CGPoint point = [gesturer locationInView:self.view];</span><br><span class="line">    if (CGRectContainsPoint(self.leftViewController.view.frame, point) == YES) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [self hidden];</span><br><span class="line">    self.isOpen = NO;</span><br><span class="line">    //移除手势</span><br><span class="line">    [self.view removeGestureRecognizer:tapGesture];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//隐藏左边抽屉</span><br><span class="line">- (void)hidden</span><br><span class="line">&#123;</span><br><span class="line">    [UIView animateWithDuration:0.48 animations:^&#123;</span><br><span class="line">        self.leftViewController.view.frame = LeftViewStartFrame();</span><br><span class="line">        [self tabBar_Nav_RootViewController_viewMoveLeft];</span><br><span class="line">    &#125; completion:nil];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)openOrHidden</span><br><span class="line">&#123;</span><br><span class="line">    //当前如果是隐藏，则显示</span><br><span class="line">    if (self.isOpen == NO) &#123;</span><br><span class="line">        [self open];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //当前如果是显示的，则隐藏</span><br><span class="line">    if (self.isOpen == YES) &#123;</span><br><span class="line">        [self hidden];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //改变隐藏标记</span><br><span class="line">    self.isOpen = !self.isOpen;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>2.标签视图 修改方法 <code>- (void)selectBtn:(UIButton *)sender</code>中的切换效果可以实现不同的切换动画与效果。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@implementation MTabBar</span><br><span class="line">- (instancetype)initWithTitles:(NSArray *)titles imageNames:(NSArray *)imageNames</span><br><span class="line">&#123;</span><br><span class="line">    self = [super initWithFrame:TabBarFrame()];</span><br><span class="line">    if (self) &#123;</span><br><span class="line">        </span><br><span class="line">        //标题数组不为空，图片名字个数 ＝ 标题个数</span><br><span class="line">        self.buttonBack = [[UIView alloc]initWithFrame:CGRM(0, 0, BUTTON_W, 64)];</span><br><span class="line">        self.buttonBack.backgroundColor = BUTTON_BACK_COLOR;</span><br><span class="line">        [self addSubview:self.buttonBack];</span><br><span class="line">        </span><br><span class="line">        self.backgroundColor = TABBAR_BACK_COLOR;</span><br><span class="line">        </span><br><span class="line">        if ([titles count] &amp;&amp; [titles count] == [imageNames count]) &#123;</span><br><span class="line">            [titles enumerateObjectsUsingBlock:^(NSString *  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) &#123;</span><br><span class="line">                UIButton *button = [[UIButton alloc]initWithFrame:CGRM(BUTTON_W*idx, 0, BUTTON_W, 64)];</span><br><span class="line">                button.tag = 1000 + idx;</span><br><span class="line">                [self addSubview:button];</span><br><span class="line">                //默认选中第一个</span><br><span class="line">                if (idx == 0) &#123;</span><br><span class="line">                    button.selected = YES;</span><br><span class="line">                    self.selectedButton = button;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                [button addSubview:MakeLabel(CGRM(0, 30, BUTTON_W, 34), obj)];</span><br><span class="line">//                // 图片宽 高分别为 44 24</span><br><span class="line">                CGFloat x = (BUTTON_W - 44)/2;</span><br><span class="line">                [button addSubview:MakeImageView(CGRM(x, 5, 44, 24),[imageNames objectAtIndex:idx])];</span><br><span class="line">                //添加点击方法</span><br><span class="line">                [button addTarget:self action:@selector(selectBtn:) forControlEvents:UIControlEventTouchUpInside];</span><br><span class="line">            &#125;];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//button 点击方法</span><br><span class="line">- (void)selectBtn:(UIButton *)sender</span><br><span class="line">&#123;</span><br><span class="line">    //让抽屉隐藏，发出通知</span><br><span class="line">    [[NSNotificationCenter defaultCenter]postNotificationName:@&quot;buttonTap&quot; object:nil];</span><br><span class="line">    </span><br><span class="line">    //选中的button 已经是选中状态 不用处理</span><br><span class="line">    if (self.selectedButton == sender) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //改变之前选中button的状态  为非选中状态</span><br><span class="line">    self.selectedButton.selected = NO;</span><br><span class="line">    </span><br><span class="line">    //改变当前选中button的状态</span><br><span class="line">    sender.selected = YES;</span><br><span class="line">    self.selectedButton = sender;</span><br><span class="line">    //通知标签控制器显示当前button对应的viewController</span><br><span class="line">    if (self.callBack) &#123;</span><br><span class="line">        self.callBack(sender.tag - 1000);</span><br><span class="line">    &#125;</span><br><span class="line">    [UIView animateWithDuration:0.5 animations:^&#123;</span><br><span class="line">        self.buttonBack.center = CGPointMake(BUTTON_W/2+(sender.tag - 1000) * BUTTON_W, 32);</span><br><span class="line">    &#125; completion:nil];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">UILabel *MakeLabel(CGRect frame, NSString *title)</span><br><span class="line">&#123;</span><br><span class="line">    UILabel *label = [[UILabel alloc]initWithFrame:frame];</span><br><span class="line">//    label.userInteractionEnabled = YES;</span><br><span class="line">    label.backgroundColor = [UIColor clearColor];</span><br><span class="line">    label.textColor = [UIColor whiteColor];</span><br><span class="line">    label.textAlignment = NSTextAlignmentCenter;</span><br><span class="line">    label.text = title;</span><br><span class="line">    return label;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//根据 frame和 imageName 创建UIImageView</span><br><span class="line">UIImageView *MakeImageView(CGRect frame, NSString *imageName)</span><br><span class="line">&#123;</span><br><span class="line">    UIImageView *imageV = [[UIImageView alloc]initWithFrame:frame];</span><br><span class="line">//    imageV.userInteractionEnabled = YES;</span><br><span class="line">    imageV.backgroundColor = [UIColor clearColor];</span><br><span class="line">    imageV.image = [UIImage imageNamed:imageName];</span><br><span class="line">    return imageV;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<p><strong>3.标签控制器</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@interface MTabBarViewController ()</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation MTabBarViewController</span><br><span class="line"></span><br><span class="line">- (instancetype)initWithViewControllers:(NSArray *)viewControllers</span><br><span class="line">&#123;</span><br><span class="line">    self = [super init];</span><br><span class="line">    if (self) &#123;</span><br><span class="line">        </span><br><span class="line">        _viewControllers = viewControllers;</span><br><span class="line">        //遍历数组，添加子控制器</span><br><span class="line">        [_viewControllers enumerateObjectsUsingBlock:^(UIViewController *  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) &#123;</span><br><span class="line">            [self addChild:obj];</span><br><span class="line">        &#125;];</span><br><span class="line">        /*</span><br><span class="line">         @[@&quot;商品.png&quot;,@&quot;消息.png&quot;,@&quot;订单.png&quot;]</span><br><span class="line">         @[@&quot;商品浏览&quot;,@&quot;我的消息&quot;,@&quot;我的订单&quot;]</span><br><span class="line">         */</span><br><span class="line">        _tabBar = [[MTabBar alloc]initWithTitles:@[@&quot;商品浏览&quot;,@&quot;我的消息&quot;,@&quot;我的订单&quot;] imageNames:@[@&quot;商品.png&quot;,@&quot;消息.png&quot;,@&quot;订单.png&quot;]];</span><br><span class="line">        [self.view addSubview:self.tabBar];</span><br><span class="line">        __weak typeof(self) weakSelf = self;</span><br><span class="line">        self.tabBar.callBack = ^(NSInteger index)&#123;</span><br><span class="line">            weakSelf.selectedIndex = index;</span><br><span class="line">        &#125;;</span><br><span class="line">        //默认选中第0个</span><br><span class="line">        self.selectedIndex = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)setSelectedIndex:(NSInteger)selectedIndex</span><br><span class="line">&#123;</span><br><span class="line">    //取出当前控制器 oldVc</span><br><span class="line">    UIViewController *oldVc = self.viewControllers[self.selectedIndex];</span><br><span class="line">    //取出将要显示的 控制器 newVc</span><br><span class="line">    UIViewController *newVc = self.viewControllers[selectedIndex];</span><br><span class="line">    //动画 向左边移动</span><br><span class="line">    newVc.view.frame = CGRectMake(S_W, 0, S_W, S_H);</span><br><span class="line">    //改变 newVc 的视图层次</span><br><span class="line">    </span><br><span class="line">    //把newVc.view 的视图放在 self.tabBar 的下面</span><br><span class="line">    [self.view insertSubview:newVc.view belowSubview:self.tabBar];</span><br><span class="line">    [UIView animateWithDuration:0.5 animations:^&#123;</span><br><span class="line">        oldVc.view.frame = CGRectMake(-S_W, 0, S_W, S_H);</span><br><span class="line">        newVc.view.frame = BOUNDS;</span><br><span class="line">    &#125;];</span><br><span class="line">    _selectedIndex = selectedIndex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//添加子控制器具体步骤</span><br><span class="line">- (void)addChild:(UIViewController *)viewController</span><br><span class="line">&#123;</span><br><span class="line">    [self addChildViewController:viewController];</span><br><span class="line">    viewController.view.frame = BOUNDS;</span><br><span class="line">    //将viewContoller.view 放在最底层</span><br><span class="line">    [self.view insertSubview:viewController.view atIndex:0];</span><br><span class="line">    [viewController didMoveToParentViewController:self];</span><br><span class="line">    </span><br><span class="line">//    self.view.subviews 数组 下标越小，视图层次越在下面，下标越大，视图层次越在上面</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<p><strong>4.视图位置控制 修改对应的视图的frame可以实现不同的视图效果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CGRect TabBarFrame()</span><br><span class="line">&#123;</span><br><span class="line">    return CGRectMake(0, S_H-64, S_W, 64);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//左边抽屉隐藏（开始）的位置</span><br><span class="line">CGRect LeftViewStartFrame()</span><br><span class="line">&#123;</span><br><span class="line">    return CGRectMake(-S_W*0.75, 67,S_W*0.75 , S_H-64-64-6);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//左边抽屉显示（结束）的位置</span><br><span class="line">CGRect LeftViewEndFrame()</span><br><span class="line">&#123;</span><br><span class="line">    return CGRectMake(0, 67, S_W*0.75, S_H-64-64-6);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//右边内容开始（抽屉隐藏时）的位置</span><br><span class="line">CGRect RigntContentStartFrame()</span><br><span class="line">&#123;</span><br><span class="line">    return CGRectMake(0, 0, S_W, S_H);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//右边内容结束（抽屉显示时）的位置</span><br><span class="line">CGRect RightContentEndFrame()</span><br><span class="line">&#123;</span><br><span class="line">    return CGRectMake(S_W*0.75, 0, S_W, S_H);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CGRect CGRM(CGFloat x, CGFloat y,CGFloat w,CGFloat h)</span><br><span class="line">&#123;</span><br><span class="line">    return CGRectMake(x, y, w, h);</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<blockquote>
<p>欢迎下载</p>
</blockquote>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>“iOS”</tag>
        <tag>“抽屉”</tag>
        <tag>“tabBar”</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS-解压zip</title>
    <url>/2016/07/09/iOS-%E8%A7%A3%E5%8E%8Bzip/</url>
    <content><![CDATA[<blockquote>
<p>最近的项目中涉及到了将zip文件从服务上下载下来，然后解压使用。搜索了一下发现有一个压缩与解压zip文件的第三方“SSZipArchive”：<a href="https://github.com/ZipArchive/ZipArchive">https://github.com/ZipArchive/ZipArchive</a> 是用C语言实现的，包装用于OC与swift.</p>
</blockquote>
<h5 id="一、在使用过程中遇到过几个坑："><a href="#一、在使用过程中遇到过几个坑：" class="headerlink" title="一、在使用过程中遇到过几个坑："></a>一、在使用过程中遇到过几个坑：</h5><ol>
<li><p>导入头文件冲突，我在pch文件里面导入了一些OC的头文件，而SSZipArchive是由C语言实现的，所以报了很多的系统错误。解决办法：将pch里面的导入头文件代码放在<br>“#ifdef <strong>OBJC</strong><br>&#x2F;&#x2F;导入头文件<br>“#endif 里面”<br>  或者删除里面导入头文件的代码，去具体需要的文件里面导入，有一点暴力哈。</p>
</li>
<li><p>我每一次下载的文件样式都是一样的，所以希望覆盖式的解压，一开始没有注意以为它只有解压方法：+ (BOOL)unzipFileAtPath:(NSString *)path toDestination:(NSString *)destination;<br>就自己去判定是否存在然后删除，后来去仔细的看源码才发现它是有带是否覆盖式解压的方法：+ (BOOL)unzipFileAtPath:(NSString *)path toDestination:(NSString *)destination overwrite:(BOOL)overwrite password:(NSString *)password error:(NSError * *)error;<br>当然它还有很多方法，包括带有代理方法，带有密码，带有完成后的block回调方法，<br><a href="http://blog.csdn.net/zhengang007/article/details/51019479">http://blog.csdn.net/zhengang007/article/details/51019479</a><br>这里有每一个方法的详细说明。</p>
</li>
</ol>
<h5 id="二、我的实现："><a href="#二、我的实现：" class="headerlink" title="二、我的实现："></a>二、我的实现：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (void)downFileFromServer&#123;</span><br><span class="line">//远程地址</span><br><span class="line">NSURL *URL = [NSURL URLWithString:DOWN_URL];</span><br><span class="line">//默认配置</span><br><span class="line">NSURLSessionConfiguration *configuration = [NSURLSessionConfiguration defaultSessionConfiguration];</span><br><span class="line">//AFN3.0+基于封住URLSession的句柄</span><br><span class="line">AFURLSessionManager *manager = [[AFURLSessionManager alloc] initWithSessionConfiguration:configuration];</span><br><span class="line"></span><br><span class="line">//请求</span><br><span class="line">NSURLRequest *request = [NSURLRequest requestWithURL:URL];</span><br><span class="line"></span><br><span class="line">//下载Task操作</span><br><span class="line">_downloadTask = [manager downloadTaskWithRequest:request progress:^(NSProgress * _Nonnull downloadProgress) &#123;</span><br><span class="line">// 下载进度</span><br><span class="line"></span><br><span class="line">&#125; destination:^NSURL * _Nonnull(NSURL * _Nonnull targetPath, NSURLResponse * _Nonnull response) &#123;</span><br><span class="line"></span><br><span class="line">//- block的返回值, 要求返回一个URL, 返回的这个URL就是文件的位置的路径</span><br><span class="line">NSString *cachesPath = [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) lastObject];</span><br><span class="line"></span><br><span class="line">NSString *path = [cachesPath stringByAppendingPathComponent:response.suggestedFilename];</span><br><span class="line">return [NSURL fileURLWithPath:path];</span><br><span class="line">&#125; completionHandler:^(NSURLResponse * _Nonnull response, NSURL * _Nullable filePath, NSError * _Nullable error) &#123;</span><br><span class="line"></span><br><span class="line">//设置下载完成操作</span><br><span class="line">// filePath就是你下载文件的位置，你可以解压，也可以直接拿来使用</span><br><span class="line">NSString *imgFilePath = [filePath path];// 将NSURL转成NSString</span><br><span class="line">MyLog(@&quot;imgFilePath = %@&quot;,imgFilePath);</span><br><span class="line">NSArray *documentArray =  NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, NSUserDomainMask, YES);</span><br><span class="line">NSString *path = [[documentArray lastObject] stringByAppendingPathComponent:@&quot;Preferences&quot;];</span><br><span class="line">[self releaseZipFilesWithUnzipFileAtPath:imgFilePath Destination:path];</span><br><span class="line">&#125;];</span><br><span class="line">[_downloadTask resume];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 解压</span><br><span class="line">- (void)releaseZipFilesWithUnzipFileAtPath:(NSString *)zipPath Destination:(NSString *)unzipPath&#123;</span><br><span class="line">NSError *error;</span><br><span class="line">if ([SSZipArchive unzipFileAtPath:zipPath toDestination:unzipPath overwrite:YES password:nil error:&amp;error delegate:self]) &#123;</span><br><span class="line">MyLog(@&quot;success&quot;);</span><br><span class="line">MyLog(@&quot;unzipPath = %@&quot;,unzipPath);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">MyLog(@&quot;%@&quot;,error);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - SSZipArchiveDelegate</span><br><span class="line">- (void)zipArchiveWillUnzipArchiveAtPath:(NSString *)path zipInfo:(unz_global_info)zipInfo &#123;</span><br><span class="line">MyLog(@&quot;将要解压。&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)zipArchiveDidUnzipArchiveAtPath:(NSString *)path zipInfo:(unz_global_info)zipInfo unzippedPath:(NSString *)unzippedPat uniqueId:(NSString *)uniqueId &#123;</span><br><span class="line">MyLog(@&quot;解压完成！&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>当然还得遵守协议：SSZipArchiveDelegate<br>以上就是我使用SSZipArchive的体会，欢迎各位指正。</p>
</blockquote>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>“iOS”</tag>
        <tag>“解压zip”</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS-高德地图</title>
    <url>/2016/07/09/iOS-%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE/</url>
    <content><![CDATA[<blockquote>
<p>一直以来在简书上学习了不少的知识，自己也想分享一些知识供大家指点，最近正好在研究高德地图API，所以分享一下自己最近捣鼓的。<br>要使用高德API，首先要去高德API官网注册开发者账号，创建应用，获得key值。然后在本地创建自己的项目pod高德SDK，在pod时要提前思考清楚是否需要导航，我在这里就被坑过，因为导航的SDK包含搜索的SDK，如果将搜索SDK与导航SDK都pod了会报链接错误，所以如果需要导航就可以不用pod搜索SDK了。最后就是本地导入相应头文件，然后配置key。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const static NSString *APIKey = @&quot;你申请的key&quot;;</span><br><span class="line"></span><br><span class="line">// 配置用户Key</span><br><span class="line"></span><br><span class="line">[MAMapServices sharedServices].apiKey = (NSString *)APIKey;</span><br><span class="line"></span><br><span class="line">// 搜索</span><br><span class="line"></span><br><span class="line">[AMapSearchServices sharedServices].apiKey = (NSString *)APIKey;</span><br><span class="line"></span><br><span class="line">// 导航</span><br><span class="line"></span><br><span class="line">[AMapNaviServices sharedServices].apiKey = (NSString *)APIKey;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>后面的就可以按照它的开发指南写，要注意的是路径规划是建立在路径搜索之上的，要路径规划先得完成路径搜索。导航的语音合成，我是用的讯飞的在线语音合成，离线的好像要收费，在下穷猿一名。高德导航的demo好像也是用的讯飞的。去讯飞API官网注册账号，创建应用，获取key，然后配置语音。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//设置sdk的log等级，log保存在下面设置的工作路径中</span><br><span class="line">[IFlySetting setLogFile:LVL_ALL];</span><br><span class="line"></span><br><span class="line">//打开输出在console的log开关</span><br><span class="line">[IFlySetting showLogcat:YES];</span><br><span class="line"></span><br><span class="line">//设置sdk的工作路径</span><br><span class="line">NSArray *paths = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES);</span><br><span class="line">NSString *cachePath = [paths objectAtIndex:0];</span><br><span class="line">[IFlySetting setLogFilePath:cachePath];</span><br><span class="line"></span><br><span class="line">// 配置相关参数</span><br><span class="line">- (void)configIFlySpeech</span><br><span class="line">&#123;</span><br><span class="line">[IFlySpeechUtility createUtility:[NSString stringWithFormat:@&quot;appid=%@,timeout=%@&quot;,@&quot;5733feca&quot;,@&quot;20000&quot;]];</span><br><span class="line"></span><br><span class="line">[IFlySetting setLogFile:LVL_NONE];</span><br><span class="line"></span><br><span class="line">[IFlySetting showLogcat:NO];</span><br><span class="line"></span><br><span class="line">// 设置语音合成的参数</span><br><span class="line">[[IFlySpeechSynthesizer sharedInstance] setParameter:@&quot;50&quot; forKey:[IFlySpeechConstant SPEED]];//合成的语速,取值范围 0~100</span><br><span class="line"></span><br><span class="line">[[IFlySpeechSynthesizer sharedInstance] setParameter:@&quot;50&quot; forKey:[IFlySpeechConstant VOLUME]];//合成的音量;取值范围 0~100</span><br><span class="line"></span><br><span class="line">// 发音人,默认为”xiaoyan”;可以设置的参数列表可参考个 性化发音人列表;</span><br><span class="line">[[IFlySpeechSynthesizer sharedInstance] setParameter:@&quot;xiaowang&quot; forKey:[IFlySpeechConstant VOICE_NAME]];</span><br><span class="line"></span><br><span class="line">// 音频采样率,目前支持的采样率有 16000 和 8000;</span><br><span class="line">[[IFlySpeechSynthesizer sharedInstance] setParameter:@&quot;8000&quot; forKey:[IFlySpeechConstant SAMPLE_RATE]];</span><br><span class="line"></span><br><span class="line">// 当你再不需要保存音频时，请在必要的地方加上这行。</span><br><span class="line">[[IFlySpeechSynthesizer sharedInstance] setParameter:nil forKey:[IFlySpeechConstant TTS_AUDIO_PATH]];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">然后初始化和设置代理。</span><br><span class="line">- (void)initIFlySpeech &#123;</span><br><span class="line"></span><br><span class="line">if (self.iFlySpeechSynthesizer == nil)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">_iFlySpeechSynthesizer = [IFlySpeechSynthesizer sharedInstance];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_iFlySpeechSynthesizer.delegate = self;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 语音失败回调代理函数</span><br><span class="line">- (void)onCompleted:(IFlySpeechError *)error &#123;</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;Speak Error:&#123;%d:%@&#125;&quot;, error.errorCode, error.errorDesc);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>高德导航有一个回调函数，会传回导航语音的字符串，在回调函数里面创建异步线程，将字符串合成语音，并且播放，在高德导航点击关闭按钮的回调函数里面关闭播放并且关闭导航。</p>
</blockquote>
<p>####pragma mark – 语音调用（导航回调）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- (void)naviManager:(AMapNaviManager *)naviManager playNaviSoundString:(NSString *)soundString soundStringType:(AMapNaviSoundType)soundStringType &#123;</span><br><span class="line"></span><br><span class="line">if (soundStringType == AMapNaviSoundTypePassedReminder) &#123;</span><br><span class="line"></span><br><span class="line">// 系统语音</span><br><span class="line">AudioServicesPlaySystemSound(1009);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">// 开启异步线程（全局）</span><br><span class="line">dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0), ^&#123;</span><br><span class="line">[_iFlySpeechSynthesizer startSpeaking:soundString];</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 这是点击关闭按钮的回调函数（就是导航界面的叉叉）</span><br><span class="line">- (void)naviViewControllerCloseButtonClicked:(AMapNaviViewController *)naviViewController &#123;</span><br><span class="line"></span><br><span class="line">dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0), ^&#123;</span><br><span class="line"></span><br><span class="line">[self.iFlySpeechSynthesizer stopSpeaking];</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">[self.naviManager stopNavi];</span><br><span class="line"></span><br><span class="line">[self.naviManager dismissNaviViewControllerAnimated:YES];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>以上就是我最近研究的高德API，一是对最近学习的总结，二是希望帮助刚刚接触高德的人，希望对你们有帮助，文章写得有点乱，第一次啊，以后肯定会越来越好。如有错误欢迎各位指出。谢谢。</p>
</blockquote>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>“iOS”</tag>
        <tag>“高德地图”</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS-widget-Today 扩展</title>
    <url>/2016/07/25/iOS-widget-Today-%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<blockquote>
<p>今天要分享的是通知中心扩展中的-<a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/ExtensibilityPG/">Today</a>扩展（ios8推出），ios目前可以使用的扩展有：today扩展（widget-即通知栏的今天一栏）、键盘自定义、文件管理、照片编辑扩展、通知扩展（推送）、分享扩展等。扩展与拥有这个扩展主应用的生命周期是独立的。他们是两个独立的进程。</p>
</blockquote>
<h3 id="一、目标："><a href="#一、目标：" class="headerlink" title="一、目标："></a>一、目标：</h3><blockquote>
<p>我项目是希望在widget中添加一个H5的页面方便以后的自定义。点击对应按钮去到相应界面，我也不知道这样算不算滥用widget，因为之前看见过有人的应用被苹果拒绝就是因为滥用widget导致的。</p>
</blockquote>
<h3 id="二、实现："><a href="#二、实现：" class="headerlink" title="二、实现："></a>二、实现：</h3><blockquote>
<p>1.因为widget是一个单独的进程所以需要创建一个target：</p>
</blockquote>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/0b583421a35083363bf56d91148192dd.webp?x-image-process=image/format,png" alt="首先 2016-07-24 23.01.34.png"></p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/217a9594befa8d064b3f479abf1d92db.webp?x-image-process=image/format,png" alt="然后 2016-07-24 23.01.13.png"></p>
<blockquote>
<p>2.代码</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    // 调整Widget的高度</span><br><span class="line">    self.preferredContentSize = CGSizeMake(0, 200);</span><br><span class="line">    </span><br><span class="line">    // 1、创建UIWebView：</span><br><span class="line">    UIWebView *mWebView = [[UIWebView alloc]initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, 200)];</span><br><span class="line">    </span><br><span class="line">    // 2、设置属性：</span><br><span class="line">    mWebView.scalesPageToFit = YES;// 自动对页面进行缩放以适应屏幕</span><br><span class="line">    // 检测所有数据类型  设定电话号码、网址、电子邮件和日期等文字变为链接文字</span><br><span class="line">    </span><br><span class="line">    [mWebView setDataDetectorTypes:UIDataDetectorTypeAll];</span><br><span class="line">    mWebView.delegate = self;</span><br><span class="line">    </span><br><span class="line">    // 打开URL</span><br><span class="line">    NSURLRequest *request =[NSURLRequest requestWithURL:[NSURL URLWithString:@&quot;http://www.baidu.com&quot;]];</span><br><span class="line">    [mWebView loadRequest:request];</span><br><span class="line">    [self.view addSubview:mWebView];</span><br><span class="line">    </span><br><span class="line">    [self makeButtonWithTitle:@&quot;返回&quot; frame:CGRectMake(0, 0, 80, 64) button:_backBtn];</span><br><span class="line">    [self makeButtonWithTitle:@&quot;前进&quot; frame:CGRectMake(self.view.frame.size.width - 80, 0, 80, 64) button:_forWardBtn];</span><br><span class="line">    [self makeButtonWithTitle:@&quot;刷新&quot; frame:CGRectMake(100, 0, 80, 64) button:_refreshBtn];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 取消widget默认的inset，让应用靠左</span><br><span class="line">- (UIEdgeInsets)widgetMarginInsetsForProposedMarginInsets:(UIEdgeInsets)defaultMarginInsets &#123;</span><br><span class="line">    return UIEdgeInsetsZero;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)makeButtonWithTitle:(NSString *)title frame:(CGRect)frame button:(UIButton *)btn &#123;</span><br><span class="line">    btn = [UIButton buttonWithType:UIButtonTypeCustom];</span><br><span class="line">    [btn setTitle:title forState:UIControlStateNormal];</span><br><span class="line">    [btn setTitleColor:[UIColor redColor] forState:UIControlStateNormal];</span><br><span class="line">    [btn addTarget:self action:@selector(skip:) forControlEvents:UIControlEventTouchUpInside];</span><br><span class="line">    [btn setFrame:frame];</span><br><span class="line">    </span><br><span class="line">    if ([title isEqualToString:@&quot;返回&quot;]) &#123;</span><br><span class="line">        btn.tag = 101;</span><br><span class="line">    &#125; else if([title isEqualToString:@&quot;前进&quot;]) &#123;</span><br><span class="line">        btn.tag = 102;</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        btn.tag = 103;</span><br><span class="line">    &#125;</span><br><span class="line">    [self.view addSubview:btn];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)skip:(UIButton *)button</span><br><span class="line">&#123;</span><br><span class="line">    if (button.tag == 101) &#123;</span><br><span class="line">        [self.extensionContext openURL:[NSURL URLWithString:@&quot;iOSWidgetApp://action=GotoHomePage&quot;] completionHandler:^(BOOL success) &#123;</span><br><span class="line">            NSLog(@&quot;101   open url result:%d&quot;,success);</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">    else if(button.tag == 102) &#123;</span><br><span class="line">        [self.extensionContext openURL:[NSURL URLWithString:@&quot;iOSWidgetApp://action=GotoOtherPage&quot;] completionHandler:^(BOOL success) &#123;</span><br><span class="line">            NSLog(@&quot;102    open url result:%d&quot;,success);</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        [self.extensionContext openURL:[NSURL URLWithString:@&quot;iOSWidgetApp://action=GotoOtherPages&quot;] completionHandler:^(BOOL success) &#123;</span><br><span class="line">            NSLog(@&quot;102    open url result:%d&quot;,success);</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行与结果展示：</p>
</blockquote>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/d2078c3e20a8126af877649cb755bce1.webp?x-image-process=image/format,png" alt="运行 2016-07-24 23.02.28.png"></p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/d8e9254bab90d77597bda99215fded4b.webp?x-image-process=image/format,png" alt="效果图 2016-07-25 09.55.44.png"></p>
<h3 id="扩展与主程序的交互-数据共享"><a href="#扩展与主程序的交互-数据共享" class="headerlink" title="扩展与主程序的交互-数据共享"></a>扩展与主程序的交互-数据共享</h3><p><strong>这就要涉及扩展与应用之间的数据共享了-App Groups.</strong></p>
<blockquote>
<p>首先在主应用的target &gt; Capabilities下 打开App Groups 点击+ 在group.后面输入标识符，</p>
</blockquote>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/62f1aa6e7f4adbc919d563ca0a21bda6.webp?x-image-process=image/format,png" alt="Snip20160725_1.png"></p>
<p><strong>再去扩展的target下进行相同的操作，记得group.后的标识符要一致。</strong></p>
<p>#####代码：</p>
<blockquote>
<p>在上面的扩展代码里面已经定义了点击事件，这里主要是主应用接收到信息后进行判断和处理。</p>
<p>在这之前还需要先配置URL schems,在主程序的plist里面：</p>
</blockquote>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/b36fb85f5f7ece4451b9e5c8b160d604.webp?x-image-process=image/format,png" alt="plist 2016-07-25 10.40.15.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation &#123;</span><br><span class="line">    </span><br><span class="line">    NSString* prefix = @&quot;iOSWidgetApp://action=&quot;;</span><br><span class="line">    </span><br><span class="line">    UIWebView *webView = [[UIWebView alloc]initWithFrame:[UIScreen mainScreen].bounds];</span><br><span class="line">    webView.backgroundColor = [UIColor clearColor];</span><br><span class="line">    webView.delegate = self;</span><br><span class="line">    [webView setUserInteractionEnabled:YES];//是否支持交互</span><br><span class="line">    [webView setOpaque:NO];//opaque是不透明的意思</span><br><span class="line">    [webView setScalesPageToFit:YES];//自动缩放以适应屏幕</span><br><span class="line">    webView .scrollView.bounces = NO;// 禁止UIWebView下拉拖动效果</span><br><span class="line">    NSString *path;</span><br><span class="line">    if ([[url absoluteString] rangeOfString:prefix].location != NSNotFound) &#123;</span><br><span class="line">        NSString* action = [[url absoluteString] substringFromIndex:prefix.length];</span><br><span class="line">        if ([action isEqualToString:@&quot;GotoHomePage&quot;]) &#123;</span><br><span class="line">            path = [[NSBundle mainBundle] pathForResource:@&quot;help&quot; ofType:@&quot;html&quot;];</span><br><span class="line">        &#125;</span><br><span class="line">        else if([action isEqualToString:@&quot;GotoOtherPage&quot;]) &#123;</span><br><span class="line">            path = [[NSBundle mainBundle] pathForResource:@&quot;setting&quot; ofType:@&quot;html&quot;];</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            path = [[NSBundle mainBundle] pathForResource:@&quot;healthyArticle&quot; ofType:@&quot;html&quot;];</span><br><span class="line">        &#125;</span><br><span class="line">        NSURL *urll = [NSURL fileURLWithPath:path];</span><br><span class="line">        NSURLRequest* request = [NSURLRequest requestWithURL:urll] ;</span><br><span class="line">        [webView loadRequest:request];</span><br><span class="line">        [self.rootView.view addSubview:webView];</span><br><span class="line">        self.rootView.view.backgroundColor = [UIColor whiteColor];</span><br><span class="line">    &#125;</span><br><span class="line">    return  YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>因为我是需要到对应的H5页面所以是添加的H5页面。</strong></p>
<h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><blockquote>
<p>1.当程序内存不足时，苹果优先会杀死扩展，因此需要注意内存的管理。</p>
<p>2.在配置team是账号需要一致（我测试的时候免费账号好像还不行，需要付费的账号）</p>
<p>3.在iOS10上面还可以从左滑主页面和锁屏进入widget。</p>
<p>4.today只有在下拉的时候才会更新，通知栏两边的更新机制是不一样的。</p>
<p>5.一般更新路径：viewDidLoad-&gt;viewWillAppear，但是如果你下拉过于频繁就只会执行viewWillAppear里面的，因此更新代码最好放在viewWillAppear里面。</p>
</blockquote>
<h6 id="如有错误地方，万望指出，谢谢！"><a href="#如有错误地方，万望指出，谢谢！" class="headerlink" title="如有错误地方，万望指出，谢谢！"></a>如有错误地方，万望指出，谢谢！</h6>]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>“iOS”</tag>
        <tag>“widget”</tag>
        <tag>“扩展”</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS即时通讯发送图片消息内存暴涨优化</title>
    <url>/2025/06/16/iOS%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E5%8F%91%E9%80%81%E5%9B%BE%E7%89%87%E6%B6%88%E6%81%AF%E5%86%85%E5%AD%98%E6%9A%B4%E6%B6%A8%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><blockquote>
<p>即时通讯App在发送图片消息时内存暴涨导致网络请求初始化失败（内存不足OOM），发送消息失败。</p>
</blockquote>
<h3 id="可能原因分析："><a href="#可能原因分析：" class="headerlink" title="可能原因分析："></a>可能原因分析：</h3><ol>
<li>有内存泄漏。</li>
<li>发送的图片消息，可能包含大图，没有进行压缩处理，导致内存占用过高。</li>
<li>在发送过程中，可能同时进行了图片的读取和处理，如果图片很大，处理过程中会产生很大的内存峰值。</li>
</ol>
<h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><ol>
<li><strong>对于发送消息时的内存暴涨：</strong></li>
</ol>
<ul>
<li>检查是否有内存泄漏，使用Instruments工具检测。</li>
</ul>
<p><img src="https://upload-images.jianshu.io/upload_images/1976231-75e63fb317acf3a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Instruments工具检测结果"></p>
<p><strong>检测发现确实有内存泄漏，解决后发现问题还是存在。</strong></p>
<ul>
<li><p>在发送图片消息前，对图片进行压缩（包括压缩质量和尺寸），然后再发送压缩后的图片。</p>
</li>
<li><p>避免直接操作大图，可以使用后台线程进行处理，防止阻塞主线程。</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</span><br><span class="line">    // 1. 读取图片（避免使用imageNamed:）</span><br><span class="line">    UIImage *originalImage = [UIImage imageWithContentsOfFile:filePath];</span><br><span class="line">    </span><br><span class="line">    // 2. 尺寸压缩（限制最大边长为1024）</span><br><span class="line">    CGFloat maxSize = 1024.0;</span><br><span class="line">    CGSize scaledSize = [self scaledSizeForImage:originalImage maxLength:maxSize];</span><br><span class="line">    </span><br><span class="line">    // 3. 质量压缩（70%质量）</span><br><span class="line">    UIImage *compressedImage = [self resizeImage:originalImage toSize:scaledSize];</span><br><span class="line">    NSData *imageData = UIImageJPEGRepresentation(compressedImage, 0.7);</span><br><span class="line">    </span><br><span class="line">    // 4. 发送压缩后的数据（非原始图片）</span><br><span class="line">    [self sendImageData:imageData];</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 计算缩放尺寸</span><br><span class="line">- (CGSize)scaledSizeForImage:(UIImage *)image maxLength:(CGFloat)maxLength &#123;</span><br><span class="line">    CGFloat ratio = MIN(maxLength / image.size.width, maxLength / image.size.height);</span><br><span class="line">    return CGSizeMake(image.size.width * ratio, image.size.height * ratio);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 图片重绘</span><br><span class="line">- (UIImage *)resizeImage:(UIImage *)image toSize:(CGSize)targetSize &#123;</span><br><span class="line">    UIGraphicsBeginImageContextWithOptions(targetSize, NO, UIScreen.mainScreen.scale);</span><br><span class="line">    [image drawInRect:CGRectMake(0, 0, targetSize.width, targetSize.height)];</span><br><span class="line">    UIImage *resizedImage = UIGraphicsGetImageFromCurrentImageContext();</span><br><span class="line">    UIGraphicsEndImageContext();</span><br><span class="line">    return resizedImage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>压缩后的图片数据要及时释放不必要的资源，避免在内存中同时存在多张图片，比如在图片展示后，如果原图不再需要，可以将其置为nil，帮助内存回收。（@autoreleasepool）。</li>
</ul>
<p><strong>处理到此内存暴涨解决了，但是随着发送图片内存还是在持续增加，现在每发送一张图片内存还是要涨10M。（message.compressRatio &#x3D; 1.0 &#x2F;&#x2F; 设置压缩率），message.compressRatio &#x3D; 0.2，每发送一张图片内存也要涨5M。</strong></p>
<h3 id="新问题："><a href="#新问题：" class="headerlink" title="新问题："></a>新问题：</h3><blockquote>
<p>即时通讯App在发送图片消息时每次展示一张图片内存涨10M多。</p>
</blockquote>
<h3 id="可能原因分析：-1"><a href="#可能原因分析：-1" class="headerlink" title="可能原因分析："></a>可能原因分析：</h3><p>1.<strong>图片加载方法不对</strong> </p>
<p><img src="https://upload-images.jianshu.io/upload_images/1976231-6e9d4b44497cf943.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Cell图片展示"></p>
<p><strong>[UIImage imageNamed:]的内存缓存特性：</strong> </p>
<ul>
<li><p>系统级缓存无法自动释放</p>
</li>
<li><p>特别不适合大图和列表展示场景</p>
</li>
<li><p>会自动缓存图片到系统缓存</p>
</li>
<li><p>适合重复使用的小图标</p>
</li>
<li><p>不适合大图或单次使用的图片</p>
</li>
</ul>
<p>2.<strong>内存增长原因：</strong></p>
<p><code>为了支持 GIF/WebP 等动图格式，showImageView为SDAnimatedImageView，它解码后的帧缓存会增加内存占用。 </code></p>
<ul>
<li><p>大图被缓存且无法及时释放</p>
</li>
<li><p>图片解码后的位图数据占用内存</p>
</li>
</ul>
<p>3.<strong>Cell 复用机制</strong></p>
<p>快速滑动时可能同时加载多张大图，旧图片未及时释放</p>
<h3 id="优化方案："><a href="#优化方案：" class="headerlink" title="优化方案："></a>优化方案：</h3><blockquote>
<p>通过以下优化措施，图片展示内存问题应该能得到显著改善。核心要点是：</p>
</blockquote>
<ul>
<li><p>避免使用 imageNamed: 加载大图</p>
</li>
<li><p>合理配置 SDAnimatedImageView</p>
</li>
<li><p>完善 cell 复用机制</p>
</li>
<li><p>使用图片下采样技术</p>
</li>
<li><p>滑动时优化资源使用</p>
</li>
</ul>
<p><strong>1.使用正确的图片加载方式，用  [UIImage imageWithContentsOfFile:filePath]替代[UIImage imageNamed:filePath]</strong></p>
<p><strong>优点：</strong></p>
<ul>
<li><p>不会缓存图片</p>
</li>
<li><p>适合大图和单次使用的图片</p>
</li>
</ul>
<p><strong>后台线程解码 + 尺寸适配</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 后台线程处理图片</span><br><span class="line">dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        // 1. 从文件加载</span><br><span class="line">        UIImage *originalImage = [UIImage imageWithContentsOfFile:filePath];</span><br><span class="line">        </span><br><span class="line">        // 2. 压缩图片尺寸 (按需)</span><br><span class="line">        CGSize targetSize = CGSizeMake(800, 800); // 根据需求调整</span><br><span class="line">        UIGraphicsBeginImageContextWithOptions(targetSize, NO, [UIScreen mainScreen].scale);</span><br><span class="line">        [originalImage drawInRect:CGRectMake(0, 0, targetSize.width, targetSize.height)];</span><br><span class="line">        UIImage *scaledImage = UIGraphicsGetImageFromCurrentImageContext();</span><br><span class="line">        UIGraphicsEndImageContext();</span><br><span class="line">        </span><br><span class="line">        // 3. 主线程更新UI</span><br><span class="line">        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">            self.showImageView.image = scaledImage;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>2.使用 ImageIO 框架高效加载</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#import &lt;ImageIO/ImageIO.h&gt;</span><br><span class="line"></span><br><span class="line">NSURL *imageURL = [NSURL fileURLWithPath:filePath];</span><br><span class="line">NSDictionary *options = @&#123;(id)kCGImageSourceShouldCache: @NO&#125;; // 禁用解码缓存</span><br><span class="line">CGImageSourceRef source = CGImageSourceCreateWithURL((CFURLRef)imageURL, NULL);</span><br><span class="line">CGImageRef imageRef = CGImageSourceCreateImageAtIndex(source, 0, (CFDictionaryRef)options);</span><br><span class="line">UIImage *image = [UIImage imageWithCGImage:imageRef];</span><br><span class="line">CGImageRelease(imageRef);</span><br><span class="line">CFRelease(source);</span><br><span class="line"></span><br><span class="line">self.showImageView.image = image;</span><br></pre></td></tr></table></figure>

<p><strong>3.使用第三方图片加载库</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 使用SDWebImage示例</span><br><span class="line">#import &lt;SDWebImage/SDWebImage.h&gt;</span><br><span class="line"></span><br><span class="line">[self.showImageView sd_setImageWithURL:[NSURL fileURLWithPath:filePath]placeholderImage:nil</span><br><span class="line">                           completed:^(UIImage *image, NSError *error,</span><br><span class="line">                           SDImageCacheType cacheType, </span><br><span class="line">                           NSURL *imageURL) &#123;</span><br><span class="line">                               // 加载完成回调</span><br><span class="line"> &#125;];</span><br></pre></td></tr></table></figure>

<p><strong>4.优化 SDAnimatedImageView 配置</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (SDAnimatedImageView *)showImageView &#123;</span><br><span class="line">    if (!_showImageView) &#123;</span><br><span class="line">        _showImageView = [[SDAnimatedImageView alloc] init];</span><br><span class="line">        _showImageView.contentMode = UIViewContentModeScaleAspectFill;</span><br><span class="line">        _showImageView.userInteractionEnabled = YES;</span><br><span class="line">        </span><br><span class="line">        // 添加以下优化配置</span><br><span class="line">        _showImageView.shouldIncrementalLoad = YES; // 渐进式加载</span><br><span class="line">        _showImageView.maxBufferSize = 1024 * 1024; // 设置合理的缓冲区大小</span><br><span class="line">        _showImageView.runLoopMode = NSDefaultRunLoopMode; // 滑动时暂停动画</span><br><span class="line">    &#125;</span><br><span class="line">    return _showImageView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>5.Cell 复用时的内存管理</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 在 cell 的 prepareForReuse 中清理</span><br><span class="line">- (void)prepareForReuse &#123;</span><br><span class="line">    [super prepareForReuse];</span><br><span class="line">    </span><br><span class="line">    // 停止动画并释放资源</span><br><span class="line">    [self.showImageView stopAnimating];</span><br><span class="line">    self.showImageView.currentFrame = nil;</span><br><span class="line">    self.showImageView.animationImages = nil;</span><br><span class="line">    </span><br><span class="line">    // 取消未完成的图片加载</span><br><span class="line">    [self.showImageView sd_cancelCurrentImageLoad];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>6.图片尺寸优化（针对大图）</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 使用 ImageIO 进行下采样</span><br><span class="line">- (UIImage *)downsampleImageAtPath:(NSString *)path toSize:(CGSize)size &#123;</span><br><span class="line">    NSURL *url = [NSURL fileURLWithPath:path];</span><br><span class="line">    NSDictionary *options = @&#123;</span><br><span class="line">        (id)kCGImageSourceShouldCache: @NO,</span><br><span class="line">        (id)kCGImageSourceShouldAllowFloat: @YES</span><br><span class="line">    &#125;;</span><br><span class="line">    CGImageSourceRef source = CGImageSourceCreateWithURL((CFURLRef)url, NULL);</span><br><span class="line">    </span><br><span class="line">    CGFloat maxDimension = MAX(size.width, size.height) * [UIScreen mainScreen].scale;</span><br><span class="line">    NSDictionary *downsampleOptions = @&#123;</span><br><span class="line">        (id)kCGImageSourceCreateThumbnailFromImageAlways: @YES,</span><br><span class="line">        (id)kCGImageSourceShouldCacheImmediately: @YES,</span><br><span class="line">        (id)kCGImageSourceThumbnailMaxPixelSize: @(maxDimension)</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    CGImageRef imageRef = CGImageSourceCreateThumbnailAtIndex(source, 0, (CFDictionaryRef)downsampleOptions);</span><br><span class="line">    UIImage *image = [UIImage imageWithCGImage:imageRef];</span><br><span class="line">    </span><br><span class="line">    if (imageRef) CFRelease(imageRef);</span><br><span class="line">    if (source) CFRelease(source);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    return image;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>7.滑动性能优化</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 在 scrollView 代理中实现以下方法</span><br><span class="line">- (void)scrollViewDidScroll:(UIScrollView *)scrollView &#123;</span><br><span class="line">    // 暂停屏幕外 cell 的动画</span><br><span class="line">    for (UITableViewCell *cell in self.tableView.visibleCells) &#123;</span><br><span class="line">        if ([cell isKindOfClass:[YourCellClass class]]) &#123;</span><br><span class="line">            YourCellClass *yourCell = (YourCellClass *)cell;</span><br><span class="line">            [yourCell.showImageView startAnimating];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 暂停非可见 cell 的动画</span><br><span class="line">    NSArray *visiblePaths = [self.tableView indexPathsForVisibleRows];</span><br><span class="line">    for (NSIndexPath *indexPath in self.loadedIndexPaths) &#123;</span><br><span class="line">        if (![visiblePaths containsObject:indexPath]) &#123;</span><br><span class="line">            YourCellClass *cell = (YourCellClass *)[self.tableView cellForRowAtIndexPath:indexPath];</span><br><span class="line">            [cell.showImageView stopAnimating];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="其他优化建议："><a href="#其他优化建议：" class="headerlink" title="其他优化建议："></a>其他优化建议：</h3><p><strong>1.内存警告处理</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (void)didReceiveMemoryWarning &#123;</span><br><span class="line">    [super didReceiveMemoryWarning];</span><br><span class="line">    // 清除所有图片缓存</span><br><span class="line">    [[SDImageCache sharedImageCache] clearMemory];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>2.使用合适的 SDWebImage 选项：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[self.showImageView sd_setImageWithURL:imageURL</span><br><span class="line">                    placeholderImage:nil</span><br><span class="line">                           options:SDWebImageAvoidDecodeImage | </span><br><span class="line">                                   SDWebImageScaleDownLargeImages |</span><br><span class="line">                                   SDWebImageProgressiveLoad</span><br><span class="line">                          completed:nil];</span><br></pre></td></tr></table></figure>

<p><strong>3.监控内存使用：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (void)monitorMemoryUsage &#123;</span><br><span class="line">    struct task_basic_info info;</span><br><span class="line">    mach_msg_type_number_t size = sizeof(info);</span><br><span class="line">    kern_return_t kerr = task_info(mach_task_self(),</span><br><span class="line">                                 TASK_BASIC_INFO,</span><br><span class="line">                                 (task_info_t)&amp;info,</span><br><span class="line">                                 &amp;size);</span><br><span class="line">    if (kerr == KERN_SUCCESS) &#123;</span><br><span class="line">        NSLog(@&quot;Memory in use (in MB): %f&quot;, info.resident_size / 1024.0 / 1024.0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>4.配置 SDWebImage 全局参数（AppDelegate 中）</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 设置全局缓存策略</span><br><span class="line">SDImageCacheConfig *cacheConfig = [SDImageCacheConfig defaultCacheConfig];</span><br><span class="line">cacheConfig.maxMemoryCost = 100 * 1024 * 1024; // 100MB 内存缓存</span><br><span class="line">cacheConfig.maxMemoryCount = 50; // 最大缓存图片数量</span><br><span class="line">cacheConfig.shouldDecompressImages = NO; // 禁止自动解压</span><br><span class="line">[SDImageCache sharedImageCache].config = cacheConfig;</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-aabb2e60704bb072.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="性能对比"></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>“iOS”</tag>
        <tag>“IMSDK”</tag>
        <tag>UIImage</tag>
        <tag>优化内存</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS集成融云SDK即时通讯整理</title>
    <url>/2018/03/29/iOS%E9%9B%86%E6%88%90%E8%9E%8D%E4%BA%91SDK%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h2 id="iOS集成融云SDK即时通讯整理"><a href="#iOS集成融云SDK即时通讯整理" class="headerlink" title="iOS集成融云SDK即时通讯整理"></a>iOS集成融云SDK即时通讯整理</h2><blockquote>
<p>最近很少写一下项目总结了，最近项目虽然做了很多，但是都是一些外包项目，做下来也没有什么值得总结的。最近一个项目用到了融云即时通讯，以前基本都是用环信，所以还遇到了一些问题，在此总结一下记录一下。</p>
</blockquote>
<h3 id="头像、昵称等用户信息-融云对这个问题有两种处理方式"><a href="#头像、昵称等用户信息-融云对这个问题有两种处理方式" class="headerlink" title="头像、昵称等用户信息(融云对这个问题有两种处理方式)"></a>头像、昵称等用户信息(融云对这个问题有两种处理方式)</h3><p><strong>用户信息提供者</strong></p>
<blockquote>
<p>实现步骤(以下代码放在单例中，可以是AppDelegate，最好单独写一个单例)  </p>
<p>首先遵守RCIMUserInfoDataSource这个协议 </p>
</blockquote>
<p><strong>然后是要设置代理</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[[RCIM sharedRCIM] setUserInfoDataSource:self]; </span><br></pre></td></tr></table></figure>
<p><strong>最后实现代理方法：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (void)getUserInfoWithUserId:(NSString *)userId completion:(void (^)(RCUserInfo *))completion &#123;</span><br><span class="line">    NSLog(@&quot;getUserInfoWithUserId ----- %@&quot;, userId);</span><br><span class="line">    RCUserInfo *user = [RCUserInfo new];</span><br><span class="line">    if (userId == nil || [userId length] == 0) &#123;</span><br><span class="line">        user.userId = userId;</span><br><span class="line">        user.portraitUri = @&quot;&quot;;</span><br><span class="line">        user.name = @&quot;&quot;;</span><br><span class="line">        completion(user);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if ([userId isEqualToString:[UserInfo shareInstance].uid]) &#123;</span><br><span class="line">        NSString *urlSelf = [BASIC_URL_image stringByAppendingString:[UserInfo shareInstance].photo];</span><br><span class="line">        return completion([[RCUserInfo alloc] initWithUserId:userId name:[UserInfo shareInstance].nickname portrait:urlSelf]);</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">    </span><br><span class="line">  //根据存储联系人信息的模型，通过 userId 来取得对应的name和头像url，进行以下设置</span><br><span class="line">    [WTBaseHttpRequst postRequstWithURL:getUserHttp params:@&#123;@&quot;uid&quot;:[UserInfo shareInstance].uid, @&quot;api_token&quot;:[UserInfo shareInstance].api_token, @&quot;k_uid&quot;:userId&#125; successBlock:^(NSDictionary *returnData) &#123;</span><br><span class="line">        if ([returnData[@&quot;status&quot;] integerValue] == 1) &#123;</span><br><span class="line">            NSString *urlStr = [BASIC_URL_image stringByAppendingString:returnData[@&quot;data&quot;][@&quot;user&quot;][@&quot;photo&quot;]];</span><br><span class="line">            return completion([[RCUserInfo alloc] initWithUserId:userId name:returnData[@&quot;data&quot;][@&quot;user&quot;][@&quot;nickname&quot;] portrait:urlStr]);</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            completion(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; failureBlock:^(NSString *error) &#123;</span><br><span class="line">        completion(user);</span><br><span class="line">    &#125; showHUD:NO];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>这个方法不需要你自己手动调用，只是当你在修改用户信息时调用方法即可</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[[RCIM sharedRCIM] refreshUserInfoCache:user withUserId:[UserInfo shareInstance].uid]</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WS(weakSelf);</span><br><span class="line">// 修改用户信息调用</span><br><span class="line">[WTBaseHttpRequst postRequstWithURL:modifyInfoHttp params:dict successBlock:^(NSDictionary *returnData) &#123;</span><br><span class="line">    [weakSelf MBProgressHudShowWithTextOnlyWithText:returnData[@&quot;msg&quot;]];</span><br><span class="line">    if ([returnData[@&quot;status&quot;] integerValue] == 1) &#123;</span><br><span class="line">        RCUserInfo *user = [RCUserInfo new];</span><br><span class="line">        user.userId = [UserInfo shareInstance].uid;</span><br><span class="line">        user.portraitUri = [BASIC_URL_image stringByAppendingString:[UserInfo shareInstance].photo];</span><br><span class="line">        user.name = weakSelf.nickNameTextField.text;</span><br><span class="line">        [[RCIM sharedRCIM] refreshUserInfoCache:user withUserId:[UserInfo shareInstance].uid];</span><br><span class="line">        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1.5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">            [self.navigationController popViewControllerAnimated:YES];</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; failureBlock:^(NSString *error) &#123;</span><br><span class="line">    [weakSelf MBProgressHudShowWithTextOnlyWithText:error];</span><br><span class="line">&#125; showHUD:YES];</span><br></pre></td></tr></table></figure>

<p><strong>在扩展消息中携带用户信息</strong></p>
<blockquote>
<p>设置发送消息时在消息体中携带用户信息(从2.4.1 之后附加用户信息之后cell默认会显示附加的用户信息的头像，即用户信息不会取用户信息提供者里提供的用户信息)</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[RCIM sharedRCIM].enableMessageAttachUserInfo = YES; </span><br><span class="line">```  </span><br><span class="line">  </span><br><span class="line">**你设置了enableMessageAttachUserInfo之后，可以取到**</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>&#x2F;**  </p>
<ul>
<li>发送者信息</li>
<li>**&#x2F;<br>@property(nonatomic, strong) RCUserInfo *senderUserInfo; <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   </span><br><span class="line">**当然我觉得还可以从后台获取好友关系后，我们在每次登陆后，开一个线程把好友关系请求下来存起来然后根据环信ID查找好友的昵称和头像**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 给输入框添加提示语(这个我一直觉得环信应该给了方法修改，只是我一直没有找到这个方法，所以只有自己去写了)</span><br><span class="line">  </span><br><span class="line">**创建提示的label**</span><br><span class="line"></span><br></pre></td></tr></table></figure>
_lab &#x3D; [[UILabel alloc] initWithFrame:self.chatSessionInputBarControl.inputTextView.bounds];<br>_lab.text &#x3D; @”请输入文字信息…”;<br>_lab.textColor &#x3D; [UIColor colorWithHexColor:@”dddddd”];<br>_lab.font &#x3D; [UIFont systemFontOfSize:15];<br>_lab.center &#x3D; CGPointMake(_lab.center.x + 15, _lab.center.y);<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**判定是否有草稿来显示和隐藏提示的label**</span><br><span class="line"></span><br></pre></td></tr></table></figure>
[self.chatSessionInputBarControl.inputTextView addSubview:_lab];<br>if (self.chatSessionInputBarControl.draft &#x3D;&#x3D; nil || self.chatSessionInputBarControl.draft.length &#x3D;&#x3D; 0) {<br> _lab.hidden &#x3D; NO;<br>}else {<br> _lab.hidden &#x3D; YES;<br>}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**根据输入数据来判定显示隐藏提示label**</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li>(void)inputTextView:(UITextView *)inputTextView shouldChangeTextInRange:(NSRange)range replacementText:(NSString *)text {<br>  if (((inputTextView.text.length &#x3D;&#x3D; 1 &amp;&amp; [text isEqualToString:@””]) || (inputTextView.text.length &#x3D;&#x3D; 0 &amp;&amp; text.length &gt; 0))  &amp;&amp; range.length &#x3D;&#x3D; 1 &amp;&amp; range.location &#x3D;&#x3D; 0) {<br>  _lab.hidden &#x3D; NO;<br>  }else {<br>  _lab.hidden &#x3D; YES;<br>  }<br>}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 取消输入@弹出好友列表界面，保留长按头像@方法</span><br><span class="line"></span><br><span class="line">**首先在AppDelegate中开启消息@功能（只支持群聊和讨论组, App需要实现群成员数据源groupMemberDataSource）**</span><br><span class="line"></span><br></pre></td></tr></table></figure>
[RCIM sharedRCIM].enableMessageMentioned &#x3D; YES;</li>
</ul>
<p>然后在继承RCConversationViewController的控制器中调用<br>-(void)showChooseUserViewController:(void (^)(RCUserInfo *selectedUserInfo))selectedBlock<br>                         cancel:(void (^)())cancelBlock {<br>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### 在会话列表中添加一些固定的cell(继承RCConversationListViewController)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>&#x2F;&#x2F; 对自定义cell赋值</p>
<ul>
<li>(RCConversationBaseCell *)rcConversationListTableView:(UITableView *)tableView<br>                            cellForRowAtIndexPath:(NSIndexPath *)indexPath {<br>  RCCustomCell *cell &#x3D; (RCCustomCell *)[[RCCustomCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@”RCCustomCell”];<br>  RCConversationModel *model &#x3D; self.conversationListDataSource[indexPath.row];<br>  cell.nameLabel.text &#x3D; model.conversationTitle;<br>  return cell;<br>}</li>
</ul>
<p>&#x2F;&#x2F; 添加自定义cell的数据源</p>
<ul>
<li>(NSMutableArray *)willReloadTableData:(NSMutableArray *)dataSource{<br>  NSArray *arr &#x3D; @[@”论坛回复和@我的”, @”陌生人私信”, @”幸存者部落@我的”, @”问卷调查”];<br>  for (int i &#x3D; 0; i&lt;arr.count; i++) {<br>  RCConversationModel *model &#x3D; [[RCConversationModel alloc]init];<br>  model.conversationModelType &#x3D; RC_CONVERSATION_MODEL_TYPE_CUSTOMIZATION;<br>  model.conversationTitle &#x3D; arr[i];<br>  model.isTop &#x3D; YES;<br>  [dataSource insertObject:model atIndex:i];<br>  }<br>  return dataSource;<br>}</li>
</ul>
<p>&#x2F;&#x2F; 点击cell跳转</p>
<ul>
<li>(void)onSelectedTableRow:(RCConversationModelType)conversationModelType<br>   conversationModel:(RCConversationModel *)model<br>     atIndexPath:(NSIndexPath *)indexPath{<br>  if (indexPath.row &#x3D;&#x3D; 0) {<br>  WTForumAndConnectListViewController *chatList &#x3D; (WTForumAndConnectListViewController *)[WTStoryBoardSegment instantiateViewControllerWithStoryBoardName:@”Main” identifier:@”WTForumAndConnectListViewController”];<br>  chatList.title &#x3D; @”回复和@我的”;<br>  [self.navigationController pushViewController:chatList animated:YES];<br>  }else if (indexPath.row &#x3D;&#x3D; 1) {<br>  WTChatListViewController *chatList &#x3D; [[WTChatListViewController alloc] init];<br>  chatList.title &#x3D; @”陌生人私信”;<br>  chatList.isEnteredToCollectionViewController &#x3D; YES;<br>  chatList.type &#x3D; 1;<br>  chatList.friendArray &#x3D; self.friendArray;<br>  [self.navigationController pushViewController:chatList animated:YES];<br>  }else if (indexPath.row &#x3D;&#x3D; 2) {<br>  WTChatListViewController *chatList &#x3D; [[WTChatListViewController alloc] init];<br>  chatList.title &#x3D; @”幸存者部落@我的”;<br>  chatList.isEnteredToCollectionViewController &#x3D; YES;<br>  chatList.type &#x3D; 2;<br>  [self.navigationController pushViewController:chatList animated:YES];<br>  }else if (indexPath.row &#x3D;&#x3D; 3) {<br>  WTQuestionnaireViewController *questionnaire &#x3D; (WTQuestionnaireViewController *)[WTStoryBoardSegment instantiateViewControllerWithStoryBoardName:@”Main” identifier:@”WTQuestionnaireViewController”];<br>  [self.navigationController pushViewController:questionnaire animated:YES];<br>  }else {<br>  &#x2F;&#x2F;点击cell，拿到cell对应的model，然后从model中拿到对应的RCUserInfo，然后赋值会话属性，进入会话<br>  if (model.conversationType &#x3D;&#x3D; ConversationType_PRIVATE) {&#x2F;&#x2F;单聊<br>      WTMyConversationLisViewController *_conversationVC &#x3D; [[WTMyConversationLisViewController alloc]init];<br>      _conversationVC.conversationType &#x3D; model.conversationType;<br>      _conversationVC.targetId &#x3D; model.targetId;<br>      _conversationVC.title &#x3D; model.conversationTitle;<br>      [self.navigationController pushViewController:_conversationVC animated:YES];<br>  }else if (model.conversationType &#x3D;&#x3D; ConversationType_GROUP){&#x2F;&#x2F;群聊<br>      WTMyConversationLisViewController *_conversationVC &#x3D; [[WTMyConversationLisViewController alloc]init];<br>      _conversationVC.conversationType &#x3D; model.conversationType;<br>      _conversationVC.title &#x3D; model.conversationTitle;<br>      _conversationVC.targetId &#x3D; model.targetId;<br>      [self.navigationController pushViewController:_conversationVC animated:YES];<br>  }<br>  }<br>}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 在任意地方获取聊天列表数量及删除列表</span><br><span class="line"></span><br><span class="line">**获取聊天列表**   </span><br><span class="line"></span><br></pre></td></tr></table></figure>
NSArray *privateArr &#x3D; [[RCIMClient sharedRCIMClient] getConversationList:@[@(ConversationType_PRIVATE)]];<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**在ConversationList添加对应类型的聊天就可以获取对应类型的聊天列表删除方法类似**</span><br><span class="line"></span><br></pre></td></tr></table></figure>
[[RCIMClient sharedRCIMClient] clearConversations:@[@(ConversationType_PRIVATE)]];</li>
</ul>
<pre><code>
### 背景图

&gt; 融云聊天列表没有数据的默认图片下面有点击右上角加入聊天，可是不是所有的聊天都有这个功能(我的就没有)如何没有就可以在资源文件中找到 no\_message\_img 这张图片用ps去掉下面的那一行字

### 其它

&gt; 以上就是我在使用融云过程中遇到的一些问题及解决方法，如果有错误或者不足之处还望指正，谢谢！
</code></pre>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>“iOS”</tag>
        <tag>“融云”</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS-webView上加载HTML视频不显示缩略图</title>
    <url>/2016/08/08/iOS-webView%E4%B8%8A%E5%8A%A0%E8%BD%BDHTML%E8%A7%86%E9%A2%91%E4%B8%8D%E6%98%BE%E7%A4%BA%E7%BC%A9%E7%95%A5%E5%9B%BE/</url>
    <content><![CDATA[<blockquote>
<p>最近在项目中遇到了一个比较棘手的问题：在原生的iOS的webView上面加载HTML视频发现没有缩略图，在网上查了资料发现在HTML里面有个poster属性（添加一个图片）可以设置缩略图，但是我们的后台告诉我视频资源本来就是来自网络的，没有缩略图只能自己解决了。于是开始是Google模式。终于功夫不负有心人，在一个<a href="https://www.sitepoint.com/html5-video-fragments-captions-dynamic-thumbnails/">国外的网站</a>上面发现了一个折中的解决办法。</p>
</blockquote>
<h3 id="办法"><a href="#办法" class="headerlink" title="办法"></a>办法</h3><blockquote>
<p>其实结局的办法很简单，但是对我这个不是太懂前端的人来说还是……。</p>
</blockquote>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/4207318919c8a9ed74e9a03b62d18e6c.webp?x-image-process=image/format,png" alt="方法2016-08-08 00.29.36.png"></p>
<blockquote>
<p>这个方法就是在资源URL的后面（视频格式后面，有的时候视频格式后面还有其他的字符串，我是直接把.mp4后面的直接删除了，但是视频还是可以播放）加上#t&#x3D;xxx,其中的xxx代表的是时间（秒）。大概的思路是这样的：就是在加载视频的时候设置视频的起始时间让视频跳转到你设置的时间上，但是时间一定要足够的小，因为大了前面的视频就看不了了。</p>
</blockquote>
<p><strong>这个方法其实还有一个用法：</strong></p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/406035d5b21ac7d6e4ba0edbf0414389.webp?x-image-process=image/format,png" alt="用法 2016-08-08 00.50.52.png"></p>
<blockquote>
<p>视频会在0：06开始播放直到0：20停止播放。但是这不是自动播放，自动播放需要设置：autoplay&#x3D;”autoplay”。</p>
</blockquote>
<h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><blockquote>
<p>NOTE：对于web端我是一个菜鸟，也不知道用这个方法解决这个问题是不是太蠢了，希望谁有其他更好的解决办法可以不吝赐教，谢谢。</p>
</blockquote>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>“iOS”</tag>
        <tag>“webView”</tag>
        <tag>“视频不显示缩略图”</tag>
      </tags>
  </entry>
  <entry>
    <title>一台电脑管理多个cocoapods账号</title>
    <url>/2025/06/19/%E4%B8%80%E5%8F%B0%E7%94%B5%E8%84%91%E7%AE%A1%E7%90%86%E5%A4%9A%E4%B8%AAcocoapods%E8%B4%A6%E5%8F%B7/</url>
    <content><![CDATA[<h2 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h2><blockquote>
<p><strong>我的需求是：</strong>我需要在一个电脑上管理两个cocoapods账号，一个用于公司SDK的发布，一个用于自己平时测试用。</p>
<p><strong>我的问题是：</strong>当我创建第二个账号成功后(第二个账号的邮箱必须和第一个不同)，第一个账号的信息就查不到了。</p>
</blockquote>
<h2 id="问题分析："><a href="#问题分析：" class="headerlink" title="问题分析："></a>问题分析：</h2><blockquote>
<p>CocoaPods 默认只支持一个活跃 session，CocoaPods默认是使用**<code>~/.netrc</code><strong>文件来存储认证token。当我创建新的账号时，新的token就会被写入到</strong><code>~/.netrc</code>**文件中，但是会覆盖第一个账号的token，如何需要同时在一台电脑上存在两个及以上的CocoaPods账号就需要备份每一个token，我们需要使用不同的方式来管理多个账号的凭证。</p>
</blockquote>
<h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><p><em>由于CocoaPods本身并不支持多账号切换，我们需要手动管理多个账号的token。</em></p>
<p><strong>以下是几种方法：</strong></p>
<h3 id="方法1：使用环境变量"><a href="#方法1：使用环境变量" class="headerlink" title="方法1：使用环境变量"></a>方法1：使用环境变量</h3><blockquote>
<p>CocoaPods可以通过环境变量**<code>COCOAPODS_TRUNK_TOKEN</code>**来指定当前会话使用的token。这样我们可以为不同的账号设置不同的token，并在使用前设置相应的环境变量。</p>
</blockquote>
<p><strong>1.</strong> 注册CocoaPods账号，并保存注册时得到的token（注册时会发送邮件，邮件中有验证链接，点击验证后，token才有效）</p>
<p><code>注意：每个账号的token是唯一的，并且长期有效（除非在网页上重置）</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 注册第一个账号</span><br><span class="line">pod trunk register your-first-email@example.com &quot;First Name&quot; --description=&#x27;MacBook Pro&#x27;</span><br><span class="line"></span><br><span class="line"># 验证第一个账号邮箱：去邮箱点击邮件中的验证链接。未验证的 token 无法执行 pod trunk 命令</span><br><span class="line"></span><br><span class="line"># 查看当前登录状态</span><br><span class="line"># 如果报错 [!] Authentication token is invalid or unverified</span><br><span class="line"># 表示当前 token 无效或未验证</span><br><span class="line">pod trunk me</span><br><span class="line"></span><br><span class="line"># 验证成功后备份当前账号凭证</span><br><span class="line">cp ~/.netrc ~/.netrc_account1</span><br><span class="line"></span><br><span class="line"># 注册第二个账号</span><br><span class="line">pod trunk register your-second-email@example.com &quot;Second Name&quot; --description=&#x27;MacBook Pro&#x27;</span><br><span class="line"></span><br><span class="line"># 验证第二个账号邮箱</span><br><span class="line"># 备份第二个账号凭证</span><br><span class="line">cp ~/.netrc ~/.netrc_account2</span><br></pre></td></tr></table></figure>
<p>到此根目录就存在三个token文件了：**.netrc**  <strong>.netrc_account1</strong>   <strong>.netrc_account2</strong></p>
<p><strong>2.</strong> 使用环境变量管理会话</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建账号1的环境变量</span><br><span class="line">echo &quot;export COCOAPODS_TRUNK_TOKEN_ACCOUNT1=&#x27;your-token-here&#x27;&quot; &gt;&gt; ~/.bash_profile</span><br><span class="line"></span><br><span class="line"># 创建账号2的环境变量</span><br><span class="line">echo &quot;export COCOAPODS_TRUNK_TOKEN_ACCOUNT2=&#x27;your-other-token-here&#x27;&quot; &gt;&gt; ~/.bash_profile</span><br><span class="line"></span><br><span class="line"># 刷新环境</span><br><span class="line">source ~/.bash_profile</span><br><span class="line"></span><br><span class="line"># 使用特定账号</span><br><span class="line">function pod-account1() &#123;</span><br><span class="line">    export COCOAPODS_TRUNK_TOKEN=$COCOAPODS_TRUNK_TOKEN_ACCOUNT1</span><br><span class="line">    pod &quot;$@&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function pod-account2() &#123;</span><br><span class="line">    export COCOAPODS_TRUNK_TOKEN=$COCOAPODS_TRUNK_TOKEN_ACCOUNT2</span><br><span class="line">    pod &quot;$@&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3.</strong> 创建切换脚本（ cocoapods-switch.sh），移动脚本到PATH</p>
<p><strong>脚本内容：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if [ &quot;$1&quot; = &quot;account1&quot; ]; then</span><br><span class="line">    # 切换到账号1</span><br><span class="line">    cp ~/.netrc_account1 ~/.netrc</span><br><span class="line">    echo &quot;Switched to CocoaPods account: account1&quot;</span><br><span class="line">elif [ &quot;$1&quot; = &quot;account2&quot; ]; then</span><br><span class="line">    # 切换到账号2</span><br><span class="line">    cp ~/.netrc_account2 ~/.netrc</span><br><span class="line">    echo &quot;Switched to CocoaPods account: account2&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;Usage: cocoapods-switch [account1|account2]&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p><strong>在终端运行：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建切换脚本</span><br><span class="line">nano cocoapods-switch.sh</span><br><span class="line"></span><br><span class="line"># 粘贴上面的脚本内容</span><br><span class="line"></span><br><span class="line"># 设置权限</span><br><span class="line">chmod +x cocoapods-switch.sh</span><br><span class="line"></span><br><span class="line"># 移动脚本到 PATH</span><br><span class="line">sudo mv cocoapods-switch.sh /usr/local/bin/</span><br></pre></td></tr></table></figure>

<p><strong>4.</strong> 多账号操作流程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 切换到账号1</span><br><span class="line">cocoapods-switch account1</span><br><span class="line"></span><br><span class="line"># 验证账号1状态，可以看到账号1的信息</span><br><span class="line">pod trunk me</span><br><span class="line"></span><br><span class="line"># 发布到账号1的仓库</span><br><span class="line">pod trunk push MyPod.podspec</span><br><span class="line"></span><br><span class="line"># 切换到账号2</span><br><span class="line">cocoapods-switch account2</span><br><span class="line"></span><br><span class="line"># 验证账号2状态，可以看到账号2的信息</span><br><span class="line">pod trunk me</span><br><span class="line"></span><br><span class="line"># 发布到账号2的仓库</span><br><span class="line">pod trunk push OtherPod.podspec</span><br></pre></td></tr></table></figure>

<h3 id="方法2：使用脚本文件"><a href="#方法2：使用脚本文件" class="headerlink" title="方法2：使用脚本文件"></a>方法2：使用脚本文件</h3><blockquote>
<p>前面的账号创建和备份Token是相同的就不重复了。</p>
</blockquote>
<p><strong>创建和使用 pod-switch 脚本</strong></p>
<p>终端运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用 nano 编辑器创建文件</span><br><span class="line">nano pod-switch</span><br></pre></td></tr></table></figure>

<p>复制并粘贴以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 检查参数数量</span><br><span class="line">if [ $# -ne 1 ]; then</span><br><span class="line">    echo &quot;Usage: pod-switch [account1 | account2]&quot;</span><br><span class="line">    echo &quot;Current account:&quot;</span><br><span class="line">    pod trunk me | grep &quot;Email&quot; || echo &quot;No active account&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># 根据参数切换账号</span><br><span class="line">if [ &quot;$1&quot; = &quot;account1&quot; ]; then</span><br><span class="line">    cp ~/.netrc_ account1 ~/.netrc 2&gt;/dev/null</span><br><span class="line">    if [ $? -eq 0 ]; then</span><br><span class="line">        echo &quot;✅ Switched to Account1 CocoaPods account&quot;</span><br><span class="line">        pod trunk me | grep &quot;Email&quot;</span><br><span class="line">    else</span><br><span class="line">        echo &quot;❌ Error: Account1 credentials not found&quot;</span><br><span class="line">        echo &quot;Run &#x27;cp ~/.netrc ~/.netrc_ account1&#x27; to backup your account1&quot;</span><br><span class="line">    fi</span><br><span class="line">elif [ &quot;$1&quot; = &quot;account2&quot; ]; then</span><br><span class="line">    cp ~/.netrc_ account2 ~/.netrc 2&gt;/dev/null</span><br><span class="line">    if [ $? -eq 0 ]; then</span><br><span class="line">        echo &quot;✅ Switched to account2 CocoaPods account&quot;</span><br><span class="line">        pod trunk me | grep &quot;Email&quot;</span><br><span class="line">    else</span><br><span class="line">        echo &quot;❌ Error: account2 credentials not found&quot;</span><br><span class="line">        echo &quot;Run &#x27;cp ~/.netrc ~/.netrc_ account2&#x27; to backup your account2&quot;</span><br><span class="line">    fi</span><br><span class="line">else</span><br><span class="line">    echo &quot;❌ Invalid account name. Use &#x27;account1&#x27; or &#x27;account2&#x27;&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p><strong>保存并退出编辑器</strong></p>
<ol>
<li><p>按 Ctrl + O 保存文件</p>
</li>
<li><p>按 Enter 确认文件名</p>
</li>
<li><p>按 Ctrl + X 退出 nano</p>
</li>
</ol>
<p>设置执行权限：<code>chmod +x pod-switch</code></p>
<p><strong>移动到可执行路径</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mv pod-switch /usr/local/bin/</span><br></pre></td></tr></table></figure>

<p><strong>验证脚本安装</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">which pod-switch</span><br></pre></td></tr></table></figure>

<p><code>应该输出: /usr/local/bin/pod-switch</code></p>
<p><strong>使用 pod-switch 脚本</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 切换到主账号</span><br><span class="line">pod-switch account1</span><br><span class="line"></span><br><span class="line"># 验证账号</span><br><span class="line">pod trunk me</span><br><span class="line"></span><br><span class="line"># 切换到第二个账号</span><br><span class="line">pod-switch account2</span><br><span class="line"></span><br><span class="line"># 验证账号</span><br><span class="line">pod trunk me</span><br></pre></td></tr></table></figure>

<p><strong>测试验证：</strong></p>
<p><img src="https://upload-images.jianshu.io/upload_images/1976231-48996848ade104ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="操作流程"></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>“cocoapods”</tag>
        <tag>多个账号</tag>
      </tags>
  </entry>
  <entry>
    <title>与web前端朋友闲聊的发现-代码相通性</title>
    <url>/2016/07/15/%E4%B8%8Eweb%E5%89%8D%E7%AB%AF%E6%9C%8B%E5%8F%8B%E9%97%B2%E8%81%8A%E7%9A%84%E5%8F%91%E7%8E%B0-%E4%BB%A3%E7%A0%81%E7%9B%B8%E9%80%9A%E6%80%A7/</url>
    <content><![CDATA[<h3 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h3><blockquote>
<p>  今天与一个做web前端的哥们闲聊了一会，他今天遇到了一个问题：就是在做一个混合开发的APP时候，他们H5端有一个页面需要做搜索，就是在搜索框内输入能够实时的展示搜索结果。</p>
</blockquote>
<h3 id="想法与问题"><a href="#想法与问题" class="headerlink" title="想法与问题"></a>想法与问题</h3><blockquote>
<p>他想监听了搜索框并且实时的进行数据的请求。后来发现输入的过程一直在进行远程数据的请求，他觉得这样消耗太大了。于是想做一个延时的操作，就是等用户稍微停止输入的时候才去远程请求数据。可是没有理清这个逻辑，于是他的方法相当的复杂，好像是要将每一实时输入的数据存入数组，然后进行对比，当延时完成进行对比决定请求的数据。</p>
</blockquote>
<h3 id="插曲"><a href="#插曲" class="headerlink" title="插曲"></a>插曲</h3><blockquote>
<p>但是他在这个过程中发现了一个问题，就是延时操作并没有减少网络请求的次数。这个问题在前段时间的项目中我也遇到了，就是延时操作并不是重复了，就不执行了，延时操作只是延缓操作时间，每一次的延时都会被执行。所以想要减少执行次就必须在延时操作未执行 前取消延时操作。取消的延时操作如果还没有执行，就不会执行了而不是取消后就立即执行。</p>
</blockquote>
<h3 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h3><blockquote>
<p>这时候我想起几天前在简书上看见一个哥们写了一篇<a href="http://www.jianshu.com/p/7bca987976bd">关于如何防止button被重复点击</a>的文章，他一共介绍了三种方法，他的第二种方法：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[button addTarget:self action:@selector(click:) forControlEvents:UIControlEventTouchUpInside]</span><br><span class="line">- (void)click:(UIButton *)sender</span><br><span class="line"> &#123; </span><br><span class="line">      [NSObject cancelPreviousPerformRequestsWithTarget:self selector:@selector(btnClicke) object:nil]; </span><br><span class="line">      [self performSelector:@selector(btnClicke) withObject:nil afterDelay:1];</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<blockquote>
<p>就是用的延时操作他的是在button的方法里面先取消延时方法，再添加延时方法，这个对于防止button重复点击来说并不是好的方法，因为这样会影响用户的体验，每次点击button不能及时的进行响应。但是对于我朋友的这个问题却是一个很好的选择。他原本就想减缓请求次数。</p>
</blockquote>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><blockquote>
<p>我发现编程语言是相通的，虽然各有各的语法，但是实现思路是一样的，特此记录。</p>
</blockquote>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>“iOS”</tag>
        <tag>“web”</tag>
        <tag>“代码相通性”</tag>
      </tags>
  </entry>
  <entry>
    <title>Widget进阶</title>
    <url>/2025/06/07/widget-advanced/</url>
    <content><![CDATA[<h2 id="1-Widget-介绍"><a href="#1-Widget-介绍" class="headerlink" title="1.Widget 介绍"></a>1.Widget 介绍</h2><blockquote>
<p>Everything is a widget 这是你学习 flutter 会听到的最多的一句话。因为在 Flutter 中几乎所有的对象都是一个 widget，在 flutter 中 UI 的构建和事件的处理基本都是通过 widget 的组合及嵌套来完成的。在 iOS 中我们经常提及的“组件”、“控件”在 flutter 中就是 widget，当然 widget 的范围比之更加广泛。如：手势检测 GestureDetector、主题 Theme 和动画容器 AnimatedContainer 等也是 widget。</p>
</blockquote>
<p><strong>Flutter 默认支持的两种设计风格：</strong></p>
<blockquote>
<p><strong>1.Material components Design：</strong> 谷歌（android）的 UI 风格，主要为 Android 设计，但也支持跨平台使用。</p>
</blockquote>
<blockquote>
<p><strong>2.Cupertino Design：</strong> 苹果（iOS）的 UI 风格，模仿苹果原生 UIKit 风格。高度还原 iOS 原生体验，适合需要与苹果生态一致的应用。</p>
</blockquote>
<h2 id="2-Widget-分类"><a href="#2-Widget-分类" class="headerlink" title="2.Widget 分类"></a>2.Widget 分类</h2><p><strong><em>1.按状态管理</em></strong></p>
<h6 id="一、StatelessWidget："><a href="#一、StatelessWidget：" class="headerlink" title="一、StatelessWidget："></a>一、StatelessWidget：</h6><p>无状态组件，通过 build 方法返回静态 UI。不可变，属性（final）在创建后无法修改，适用于不需要内部状态变化的场景（如文本显示、图标），不依赖用户交互或数据变化的 UI 部分。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class IconTextButton extends StatelessWidget &#123;</span><br><span class="line">  final String iconName;</span><br><span class="line">  final String label;</span><br><span class="line">  final VoidCallback onPressed;</span><br><span class="line"></span><br><span class="line">  const IconTextButton(&#123;</span><br><span class="line">    super.key,</span><br><span class="line">    required this.iconName,</span><br><span class="line">    required this.label,</span><br><span class="line">    required this.onPressed,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return GestureDetector(</span><br><span class="line">      onTap: onPressed,</span><br><span class="line">      child: Column(</span><br><span class="line">        mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          Image.asset(</span><br><span class="line">            &quot;assets/images/$iconName.png&quot;,</span><br><span class="line">            width: 40,</span><br><span class="line">            height: 40,</span><br><span class="line">          ),</span><br><span class="line">          const SizedBox(</span><br><span class="line">            height: 10,</span><br><span class="line">          ), // 图标</span><br><span class="line">          Text(</span><br><span class="line">            label,</span><br><span class="line">            style: const TextStyle(color: ColorConstant.color33, fontSize: 10),</span><br><span class="line">          ), // 文字</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="二、StatefulWidget："><a href="#二、StatefulWidget：" class="headerlink" title="二、StatefulWidget："></a>二、StatefulWidget：</h6><p>有状态组件，通过 State 对象管理动态数据。当状态变化时调用 setState 触发 UI 更新，需要用户交互（如按钮点击、表单输入）和依赖实时数据变化（如计数器、动态列表）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 上下滚动的消息轮播</span><br><span class="line">class MarqueeWidget extends StatefulWidget &#123;</span><br><span class="line">  /// 子视图数量</span><br><span class="line">  final int count;</span><br><span class="line"></span><br><span class="line">  ///子视图构建器</span><br><span class="line">  final IndexedWidgetBuilder itemBuilder;</span><br><span class="line"></span><br><span class="line">  ///轮播的时间间隔</span><br><span class="line">  final int loopSeconds;</span><br><span class="line"></span><br><span class="line">  const MarqueeWidget(&#123;</span><br><span class="line">    super.key,</span><br><span class="line">    required this.count,</span><br><span class="line">    required this.itemBuilder,</span><br><span class="line">    this.loopSeconds = 5,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  _MarqueeWidgetState createState() =&gt; _MarqueeWidgetState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class _MarqueeWidgetState extends State&lt;MarqueeWidget&gt; &#123;</span><br><span class="line">  late PageController _controller;</span><br><span class="line">  late Timer _timer;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  void initState() &#123;</span><br><span class="line">    super.initState();</span><br><span class="line">    _controller = PageController();</span><br><span class="line">    _timer = Timer.periodic(Duration(seconds: widget.loopSeconds), (timer) &#123;</span><br><span class="line">      if (_controller.page != null) &#123;</span><br><span class="line">        // 如果当前位于最后一页，则直接跳转到第一页，两者内容相同，跳转时视觉上无感知</span><br><span class="line">        if (_controller.page!.round() &gt;= widget.count) &#123;</span><br><span class="line">          _controller.jumpToPage(0);</span><br><span class="line">        &#125;</span><br><span class="line">        _controller.nextPage(</span><br><span class="line">            duration: const Duration(seconds: 1), curve: Curves.linear);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return PageView.builder(</span><br><span class="line">      scrollDirection: Axis.vertical,</span><br><span class="line">      controller: _controller,</span><br><span class="line">      itemBuilder: (buildContext, index) &#123;</span><br><span class="line">        if (index &lt; widget.count) &#123;</span><br><span class="line">          return widget.itemBuilder(buildContext, index);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          return widget.itemBuilder(buildContext, 0);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      itemCount: widget.count + 1,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  void dispose() &#123;</span><br><span class="line">    super.dispose();</span><br><span class="line">    _controller.dispose();</span><br><span class="line">    _timer.cancel();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong><em>2.按功能分类</em></strong></p>
<blockquote>
<p><strong>1.布局类 Widget：</strong> 控制子 Widget 的排列方式。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">常见有：</span><br><span class="line">Row/Column：水平/垂直排列子项（基于 Flexbox）。</span><br><span class="line">Stack：子 Widget 堆叠（类似 CSS 的绝对定位）。</span><br><span class="line">Expanded/Flexible：在 Row 或 Column 中分配剩余空间。</span><br><span class="line">Container：结合布局、装饰、边距等功能</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>2.基础组件 Widget：</strong> 构成 UI 的基本元素。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">常见有：</span><br><span class="line">Text：显示文本。</span><br><span class="line">Image：加载本地或网络图片。</span><br><span class="line">Icon：显示图标（需引入 cupertino_icons 或自定义图标库）</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>3.滚动类 Widget：</strong> 处理内容超出屏幕时的滚动行为。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">常见有：</span><br><span class="line">ListView：垂直/水平滚动列表。</span><br><span class="line">GridView：网格布局滚动视图。</span><br><span class="line">SingleChildScrollView：包裹单个可滚动子组件。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>4.交互类 Widget：</strong> 响应用户输入事件。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">常见有：</span><br><span class="line">ElevatedButton/TextButton：按钮交互。</span><br><span class="line">TextField：文本输入框。</span><br><span class="line">Checkbox/Switch：选择控件。</span><br><span class="line">GestureDetector：自定义手势检测（点击、长按、拖动）。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>5.平台风格类 Widget：</strong> 适配不同操作系统的视觉风格。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">常见有：</span><br><span class="line">Material Design：MaterialApp、AppBar、FloatingActionButton。</span><br><span class="line">Cupertino（iOS 风格）：CupertinoApp、CupertinoNavigationBar、CupertinoPicker。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>6.动画类 Widget：</strong> 实现动态视觉效果。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">常见有：</span><br><span class="line">AnimatedContainer：自动过渡的容器（大小、颜色等属性变化）。</span><br><span class="line">Hero：页面切换共享元素的过渡动画。</span><br><span class="line">AnimatedBuilder：自定义复杂动画。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>7. 导航与路由类 Widget：</strong> 管理页面跳转和导航结构。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">常见有：</span><br><span class="line">Navigator：管理页面堆栈（push/pop）。</span><br><span class="line">PageView：实现滑动切换页面。</span><br><span class="line">BottomNavigationBar：底部导航栏。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过简单 Widget 组合实现复杂 UI（例如用 Row + Expanded 替代自定义布局）(优先组合而非继承)<br>局部状态使用 StatefulWidget<br>全局状态使用状态管理工具（如 Provider、Riverpod）<br>对频繁更新的部分使用 const 构造函数<br>长列表使用 ListView.builder 懒加载</p>
</blockquote>
<h2 id="3-Widget-生命周期"><a href="#3-Widget-生命周期" class="headerlink" title="3.Widget 生命周期"></a>3.Widget 生命周期</h2><p><strong>StatelessWidget 的生命周期</strong></p>
<blockquote>
<p>StatelessWidget 仅有一个 build() 方法，无状态管理逻辑，其生命周期完全由父组件控制。</p>
</blockquote>
<p><strong>StatefulWidget 主要生命周期方法</strong></p>
<blockquote>
<p>创建阶段<br>createState()</p>
</blockquote>
<blockquote>
<p>初始化阶段<br>initState()<br>didChangeDependencies()</p>
</blockquote>
<blockquote>
<p>更新阶段<br>didUpdateWidget(oldWidget)<br>build()</p>
</blockquote>
<blockquote>
<p>销毁阶段<br>deactivate()<br>dispose()</p>
</blockquote>
<p><img src="https://i-blog.csdnimg.cn/img_convert/a33469c55f94b5278f698d8605d8e0cc.webp?x-oss-process=image/format,png" alt="2025-05-22 18.38.22.png"></p>
<p><strong>1.createState()</strong><br>当 StatefulWidget 被插入 Widget 树时调用，而且只执行一次。</p>
<blockquote>
<p>主要用于创建与之关联的 State 对象（每个 Widget 对应一个 State 实例）。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class MyWidget extends StatefulWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  _MyWidgetState createState() =&gt; _MyWidgetState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>2.initState()</strong><br>在 State 对象创建后，首次调用 build() 之前触发该方法，而且只执行一次。</p>
<blockquote>
<p>主要用于初始化依赖数据（如订阅事件、加载本地配置）和 创建动画控制器（AnimationController）等需与 dispose() 配对的资源。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@override</span><br><span class="line">void initState() &#123;</span><br><span class="line">  super.initState();</span><br><span class="line">  _controller = AnimationController(vsync: this);</span><br><span class="line">  _fetchData(); // 初始化数据</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>需要注意的是：<br><code>必须调用 super.initState()。</code><br><code>在这里 View 并没有渲染，只是 StatefulWidget 被加载到渲染树里了。</code><br><code>避免在此处触发 setState（可能导致渲染未完成）。</code><br><code>StatefulWidget的 mount 的值变为了true（调用dispose()才会变为 false）。</code></p>
<p><strong>3.didChangeDependencies()</strong><br>initState() 后立即调用 didChangeDependencies()。<br>当 State 依赖的 InheritedWidget 发生变化时（如主题、本地化）也会调用 didChangeDependencies()。</p>
<blockquote>
<p>主要用于处理依赖变化后的逻辑（如重新请求网络数据）。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@override</span><br><span class="line">void didChangeDependencies() &#123;</span><br><span class="line">  super.didChangeDependencies();</span><br><span class="line">  if (Provider.of&lt;Data&gt;(context).hasChanged) &#123;</span><br><span class="line">    _updateData();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>4. didUpdateWidget(oldWidget)</strong><br>在父组件重建时，若新旧 Widget 的 runtimeType 和 key 相同触发 didUpdateWidget（didUpdateWidget 我们一般不会用到）。</p>
<blockquote>
<p>主要是：<br>对比新旧 Widget 的配置（如属性变化）。<br>根据变化调整状态（如重置动画、更新监听）。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@override</span><br><span class="line">void didUpdateWidget(MyWidget oldWidget) &#123;</span><br><span class="line">  super.didUpdateWidget(oldWidget);</span><br><span class="line">  if (oldWidget.color != widget.color) &#123;</span><br><span class="line">    _updateColor(); // 颜色变化时执行逻辑</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>5. build()</strong><br>初始化后、依赖变化后、setState() 调用后调用 build()。<br>父组件或祖先组件触发重建时调用 build()。</p>
<blockquote>
<p>主要是根据当前状态构建 UI（不要在这里做除了创建 Widget 之外的操作）</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@override</span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  return Container(</span><br><span class="line">    color: widget.color,</span><br><span class="line">    child: Text(&#x27;Count: $_count&#x27;),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>需要注意的是：<br><code>必须返回一个 Widget</code><br><code>避免在此处修改状态或执行耗时操作</code></p>
<p><strong>6. deactivate()</strong><br>当 State 从树中暂时移除（如页面切换、组件被移除）触发 deactivate()。</p>
<blockquote>
<p>清理临时资源或保存临时状态.</p>
</blockquote>
<p>需要注意的是：<br><code>可能被重新插入树中（如页面返回时），需与 dispose() 区分</code></p>
<p><strong>7. dispose()</strong><br>State 被永久移除时调用 dispose()。</p>
<blockquote>
<p>释放资源（如取消网络请求、销毁动画控制器）</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@override</span><br><span class="line">void dispose() &#123;</span><br><span class="line">  _controller.dispose(); // 销毁动画控制器</span><br><span class="line">  _subscription.cancel(); // 取消事件订阅</span><br><span class="line">  super.dispose();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>需要注意的是：<br><code>如果在 dispose() 中未释放资源（如动画控制器、Stream 订阅）可能造成内存泄漏</code><br><code>如果在 dispose() 后调用 setState 会导致异常</code></p>
<h2 id="4-Widget-的渲染"><a href="#4-Widget-的渲染" class="headerlink" title="4.Widget 的渲染"></a>4.Widget 的渲染</h2><p><strong>渲染流程：</strong><br>Flutter 的渲染系统基于三棵核心树结构，通过高度优化的管线（Pipeline）实现高效的 UI 更新。</p>
<blockquote>
<p><strong>Widget 重建 → Diff 新旧 Widget 树 → 更新 Element 树 → 更新 RenderObject 树 → 触发 Layer 合成 → 屏幕刷新</strong></p>
</blockquote>
<p><strong>1.Widget 树的构建：</strong></p>
<blockquote>
<p>描述 UI 的不可变配置，由开发者创建，频繁重建，需轻量化。<br>开发者编写的 Widget 代码被转化为嵌套的 Widget 树（应用的入口是根 Widget，一般是 MaterialApp 或 CupertinoApp。根 Widget 会递归地构建其子 Widget，形成一棵树。）。<br>具有不可变性，每次重建生成全新的 Widget 树，但通过 Diff 算法可以优化实际更新范围。</p>
</blockquote>
<p><strong>2. Element 树的 Diff 与更新</strong></p>
<blockquote>
<p>根据 Widget 树生成一个 Element 树，Element 树中的节点都继承自 Element 类。<br>Element 是 Widget 的实例化对象，负责管理 状态（State） 和 子节点引用。<br>每个 Widget 都会有一个对应的 Element 对象，用于管理其生命周期。</p>
</blockquote>
<blockquote>
<p>Diff 算法：Flutter 对比新旧 Widget 树，仅更新变化的 Element 和 RenderObject，类似 React 的虚拟 DOM。<br>当 Widget 树重建时，Flutter 通过 Diff 算法 对比新旧 Widget 树，决定 Element 树的更新策略<br>Reuse：若新旧 Widget 的 runtimeType 和 key 相同，复用现有 Element。<br>Update：更新 Element 的配置（调用 Element.update(newWidget)）。<br>Replace：类型或 Key 不同时，销毁旧 Element，创建新 Element。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 旧 Widget 树</span><br><span class="line">Container(color: Colors.red)</span><br><span class="line"></span><br><span class="line">// 新 Widget 树</span><br><span class="line">Container(color: Colors.blue)</span><br><span class="line"></span><br><span class="line">// Diff 结果：Container 类型相同且无 Key → 复用 Element，更新 RenderObject 颜色</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Element 更新逻辑</span><br><span class="line">Element.updateChild()</span><br><span class="line"></span><br><span class="line">Element updateChild(Element child, Widget newWidget, dynamic newSlot) &#123;</span><br><span class="line">  if (newWidget == null) &#123;</span><br><span class="line">    // 移除子节点</span><br><span class="line">    return null;</span><br><span class="line">  &#125;</span><br><span class="line">  if (child != null) &#123;</span><br><span class="line">    if (child.widget == newWidget) &#123;</span><br><span class="line">      // Widget 未变化 → 复用 Element</span><br><span class="line">      return child;</span><br><span class="line">    &#125;</span><br><span class="line">    if (Widget.canUpdate(child.widget, newWidget)) &#123;</span><br><span class="line">      // 更新 Element 配置</span><br><span class="line">      child.update(newWidget);</span><br><span class="line">      return child;</span><br><span class="line">    &#125;</span><br><span class="line">    // 销毁旧 Element，创建新 Element</span><br><span class="line">    deactivateChild(child);</span><br><span class="line">  &#125;</span><br><span class="line">  return inflateWidget(newWidget, newSlot);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>3. RenderObject 树的更新</strong></p>
<p>更新 RenderObject 树，计算布局和生成绘制指令。<br>运行在 UI Thread。</p>
<blockquote>
<p>根据 Element 树生成 Render 树（渲染树），渲染树中的节点都继承自 RenderObject 类。<br>每个 Element 对应一个 RenderObject（通过 Element.createRenderObject() 创建）。</p>
</blockquote>
<blockquote>
<p>根据父 RenderObject 传递的 约束（Constraints），计算自身尺寸和位置。<br>递归调用子节点的 layout() 方法（深度优先遍历）。</p>
</blockquote>
<p><strong>布局（Layout）核心方法：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// RenderObject 布局流程</span><br><span class="line">RenderObject.layout()</span><br><span class="line"></span><br><span class="line">void layout(Constraints constraints, &#123; bool parentUsesSize = false &#125;) &#123;</span><br><span class="line">  _constraints = constraints;</span><br><span class="line">  if (_relayoutBoundary != this) &#123;</span><br><span class="line">    markNeedsLayout();</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  performLayout();  // 1. 计算自身尺寸（调用 performLayout） 由子类实现具体布局逻辑</span><br><span class="line">  _needsLayout = false;</span><br><span class="line">  markNeedsPaint(); // 标记需要重绘</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>生成绘制指令（如形状、颜色、文本），写入 Layer（合成层）。</p>
</blockquote>
<p><strong>绘制（Paint）核心方法:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void paint(PaintingContext context, Offset offset) &#123;</span><br><span class="line">  // 绘制逻辑，如画矩形</span><br><span class="line">  context.canvas.drawRect(rect, paint);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>4. 合成与光栅化（Composition &amp; Rasterization）</strong></p>
<p>生成 Layer 树并光栅化。<br>运行在 Raster Thread（与 UI Thread 并行）</p>
<blockquote>
<p>根据渲染树生成 Layer 树，然后上屏显示，Layer 树中的节点都继承自 Layer 类。<br>RenderObject 的绘制结果被组织为 Layer 树，每个 Layer 对应一个 GPU 纹理（Texture）。自此 Layer 树生成。<br>类型包括：PictureLayer（矢量绘制）、TextureLayer（图像纹理）、TransformLayer（变换效果）等。</p>
</blockquote>
<blockquote>
<p>将 Layer 树中的绘制指令转换为 GPU 可识别的位图数据。<br>通过 Skia 图形库（或 Impeller）完成，最终提交给 GPU 渲染。（完成光栅化（Raster Thread））。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void paintChild(RenderObject child, Offset offset) &#123;</span><br><span class="line">  if (child.isRepaintBoundary) &#123;</span><br><span class="line">    // 创建独立 Layer</span><br><span class="line">    stopRecordingIfNeeded();</span><br><span class="line">    child._layer = OffsetLayer();</span><br><span class="line">    appendLayer(child._layer);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    child._paintWithContext(this, offset);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>5. GPU 渲染与屏幕刷新</strong></p>
<blockquote>
<p><strong>垂直同步（VSync）：</strong><br>由系统定时触发的信号，控制帧率（如 60Hz → 16.6ms&#x2F;帧）。<br>Flutter 引擎在 VSync 信号到来时，提交光栅化后的帧数据到 GPU。</p>
</blockquote>
<blockquote>
<p><strong>屏幕显示：</strong><br>GPU 将帧数据写入帧缓冲区（Frame Buffer），屏幕硬件按刷新率读取并显示。</p>
</blockquote>
<h2 id="5-Widget-优化"><a href="#5-Widget-优化" class="headerlink" title="5.Widget 优化"></a>5.Widget 优化</h2><p><code>高性能渲染 = 最小化 Widget Diff + 高效布局/绘制 + GPU 线程优化</code></p>
<blockquote>
<p>Flutter 优化的本质是 减少无效计算 和 降低 GPU 负载<br>一般围绕四个方向： 1.最小化 Widget 树 Diff 范围 2.减少布局（Layout）和绘制（Paint）计算 3.优化 GPU 合成与光栅化（Rasterization） 4.高效管理状态与资源</p>
</blockquote>
<blockquote>
<p><strong>性能分析工具</strong><br>Flutter DevTools：<br>Performance 面板：分析 UI&#x2F;Raster 线程的帧耗时。<br>Layer 查看器：检测 Layer 合成是否合理。<br>debugProfileBuildsEnabled：追踪 Widget 构建耗时<br>调试标记：<br>debugPrintMarkNeedsLayoutStacks：打印触发布局的堆栈信息。<br>debugPaintLayerBordersEnabled：可视化 Layer 边界。</p>
</blockquote>
<p><strong>1.Widget 树 Diff 优化</strong></p>
<blockquote>
<p><strong>Diff 算法机制：</strong> 当父组件更新时，Flutter 递归对比新旧 Widget 树，判断是否需要更新 Element 和 RenderObject。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static bool canUpdate(Widget oldWidget, Widget newWidget) &#123;</span><br><span class="line">  return oldWidget.runtimeType == newWidget.runtimeType</span><br><span class="line">      &amp;&amp; oldWidget.key == newWidget.key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>复用条件：</strong> runtimeType 和 key 相同 → 复用 Element，仅更新配置。<br><strong>替换条件：</strong> 类型或 Key 不同 → 销毁旧 Element，创建新 Element。</p>
</blockquote>
<p><strong>优化策略：</strong><br><strong>1.使用 const 构造函数：</strong> const Widget 在多次重建中引用同一内存地址，Widget.canUpdate 直接返回 true，跳过 Diff 计算。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const MyWidget(text: &#x27;Hello&#x27;); // ✅ 优化</span><br><span class="line">MyWidget(text: &#x27;Hello&#x27;);      // ❌ 非 const</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>2.合理使用 Key：</strong> ValueKey：在列表项中标识唯一性，避免错误复用导致状态混乱。<br>GlobalKey：跨组件访问状态（谨慎使用，破坏局部性）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ListView.builder(</span><br><span class="line">  itemBuilder: (_, index) =&gt; ItemWidget(</span><br><span class="line">    key: ValueKey(items[index].id), // 唯一标识</span><br><span class="line">    data: items[index],</span><br><span class="line">  ),</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>3.拆分细粒度 Widget：</strong> 将频繁变化的部分拆分为独立 Widget，缩小 setState 触发的 Diff 范围。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 父组件（仅传递静态数据）</span><br><span class="line">class ParentWidget extends StatelessWidget &#123;</span><br><span class="line">  const ParentWidget(&#123;super.key&#125;);</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Column(</span><br><span class="line">      children: [</span><br><span class="line">        const StaticHeader(), // 静态部分</span><br><span class="line">        DynamicContent(data: _data), // 动态部分</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>2.布局（Layout）阶段优化</strong></p>
<blockquote>
<p><strong>布局计算机制：</strong> 当某个 RenderObject 的尺寸变化不影响父节点布局时，可标记为布局边界，阻断布局计算向上传播。通过 RenderObject.isRepaintBoundary &#x3D; true 设置（布局边界（Relayout Boundary））</p>
</blockquote>
<blockquote>
<p>父节点传递 约束（Constraints） 给子节点<br>子节点根据约束计算自身尺寸，并递归布局子节点(布局过程)</p>
</blockquote>
<p><strong>优化策略</strong></p>
<blockquote>
<p><strong>1.避免过度嵌套：</strong> 多层 Row&#x2F;Column 会导致布局计算复杂度呈指数增长。<br>我们可以使用 Flex、Wrap 或自定义布局逻辑替代嵌套。</p>
</blockquote>
<blockquote>
<p><strong>2.预计算尺寸：</strong> 通过固定尺寸（SizedBox）或 LayoutBuilder 提前确定布局约束，减少计算量。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SizedBox(</span><br><span class="line">  width: 100,</span><br><span class="line">  height: 50,</span><br><span class="line">  child: Text(&#x27;Fixed Size&#x27;),</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>3.使用 IntrinsicWidth&#x2F;IntrinsicHeight 的替代方案：</strong> IntrinsicWidth 会触发多次子节点布局计算，性能低下。<br>我们可以手动计算子节点最大宽度，使用 ConstrainedBox 限制尺寸。</p>
</blockquote>
<p><strong>3.绘制（Paint）阶段优化</strong></p>
<blockquote>
<p><strong>绘制机制：</strong> 当 RenderObject 的视觉属性（如颜色、位置）变化时，调用 markNeedsPaint() 标记需要重绘。</p>
</blockquote>
<blockquote>
<p><strong>合成层（Layer）：</strong> 每个 RenderObject 的绘制结果被组织为 Layer 树，最终由 GPU 光栅化。（PictureLayer（矢量绘制）、TextureLayer（图像）、TransformLayer（变换））。</p>
</blockquote>
<p><strong>优化策略</strong></p>
<blockquote>
<p><strong>1.使用 RepaintBoundary：</strong> 将独立变化的 UI 部分包裹 RepaintBoundary，生成独立 Layer，减少重绘区域。<br>通过 RenderObject.isRepaintBoundary &#x3D; true 标记。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RepaintBoundary(</span><br><span class="line">  child: MyAnimatedWidget(), // 独立重绘区域</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>2.避免高开销绘制操作：</strong> 使用 AnimatedOpacity 或直接设置颜色透明度（Color.withOpacity）替代 Opacity 。<br>优先使用 ClipRect 或 ClipRRect，减少路径裁剪的计算量。</p>
</blockquote>
<blockquote>
<p><strong>3.自定义绘制优化：</strong> 在 CustomPainter 中精确控制重绘条件。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class MyPainter extends CustomPainter &#123;</span><br><span class="line">  @override</span><br><span class="line">  bool shouldRepaint(MyPainter old) &#123;</span><br><span class="line">    return old.color != color; // 仅颜色变化时重绘</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>4.GPU 合成与光栅化优化</strong></p>
<blockquote>
<p><strong>1.光栅化机制：</strong> 通过上面的合成与光栅化可知道：光栅化运行在独立的 Raster Thread，与 UI Thread 并行。<br>Flutter 自动复用未变化的 Layer 对应的 GPU 纹理，减少数据传输。（纹理（Texture）复用）</p>
</blockquote>
<p><strong>优化策略</strong></p>
<blockquote>
<p><strong>1.减少 Layer 数量：</strong> 过多的 Layer 会增加 GPU 合成开销，我们需要尽可能的合并相邻的 PictureLayer，避免不必要的 Opacity 或 Transform 嵌套。</p>
</blockquote>
<blockquote>
<p><strong>2.使用硬件加速操作：</strong> 利用 GPU 的矩阵变换硬件加速（Transform 替代手动矩阵计算）。<br>对重复使用的图片提前解码（precacheImage） （Image 预加载）。</p>
</blockquote>
<blockquote>
<p><strong>3.启用 Impeller 引擎：</strong> Flutter 3.0+ 引入的 Impeller 引擎针对 GPU 负载优化，减少光栅化抖动。</p>
</blockquote>
<p><strong>5.状态管理与资源优化</strong></p>
<blockquote>
<p><strong>1.状态管理：</strong><br>局部状态：使用 StatefulWidget 管理，确保 dispose() 释放资源。<br>全局状态：采用 Provider、Riverpod 或 Bloc，避免状态穿透和冗余重建。</p>
</blockquote>
<blockquote>
<p><strong>2.资源释放：</strong><br>必须释放动画控制器（AnimationController.dispose()）、Stream 订阅（Subscription.cancel()）等资源。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@override</span><br><span class="line">void dispose() &#123;</span><br><span class="line">  _controller.dispose();</span><br><span class="line">  _streamSubscription.cancel();</span><br><span class="line">  super.dispose();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://i-blog.csdnimg.cn/img_convert/58ae194fbfc28292a73f2130d949f78a.webp?x-oss-process=image/format,png" alt="2025-05-23 14.45.52.png"></p>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>“Flutter”</tag>
        <tag>“Widget”</tag>
      </tags>
  </entry>
  <entry>
    <title>项目剖析02-swift 轻松实现动画效果-Lottie</title>
    <url>/2019/12/23/%E9%A1%B9%E7%9B%AE%E5%89%96%E6%9E%9002-swift-%E8%BD%BB%E6%9D%BE%E5%AE%9E%E7%8E%B0%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C-Lottie/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://github.com/airbnb/lottie-ios">Lottie</a> 是 <a href="https://lottiefiles.com/?lang=zh_CN">Airbnb</a>开源的一套跨平台的动画效果解决方案,它能够同时支持<code>iOS</code>、<code>Android</code>、<code>Web</code> 和 <code>React Native</code>的开发，设计师只需要用 <a href="https://www.adobe.com/cn/products/aftereffects.html">AdobeAfterEffects</a>(AE) 设计出需要的的动画之后，使用 <code>Lottie</code> 提供的 <a href="https://github.com/bodymovin/bodymovin">Bodymovin</a> 插件将设计好的动画导出成JSON格式(文件很小不会象GIF那么庞大)给你即可，可以让设计师实现所见即所得的动画再也不用和设计师争论动画设计了。本文只是展示在swift中如何简单使用<code>Lottie</code> ，详细的使用方法请参考<a href="https://airbnb.io/lottie/#/">官方文档</a></p>
</blockquote>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/9435d33b4f8d95e2fbaed37fa0c418ba.gif" alt="github例图"></p>
<h3 id="用法举例"><a href="#用法举例" class="headerlink" title="用法举例"></a>用法举例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lazy var lottieAnimationView: AnimationView = &#123;</span><br><span class="line">        // 加载本地资源</span><br><span class="line">        let path : String = Bundle.main.path(forResource: &quot;data&quot;, ofType: &quot;json&quot;)!</span><br><span class="line">        let lottieAnimationView = AnimationView.init(filePath: path)</span><br><span class="line">        WTNavigationManger.Nav?.view.addSubview(lottieAnimationView)</span><br><span class="line">        lottieAnimationView.constrain(toSuperviewEdges: nil)</span><br><span class="line">        lottieAnimationView.isUserInteractionEnabled = true</span><br><span class="line">        lottieAnimationView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(removeLottieAnimationViewFromParent)))</span><br><span class="line">        return lottieAnimationView</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">// 调用</span><br><span class="line">lottieAnimationView.play &#123;[weak self] (complete) in</span><br><span class="line">       guard let mySelf = self else &#123;return&#125;</span><br><span class="line">       mySelf.removeLottieAnimationViewFromParent()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">@objc func removeLottieAnimationViewFromParent() &#123;</span><br><span class="line">        lottieAnimationView.removeFromSuperview()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>将设计师给你的文件导入项目，然后通过Bundle.main.path(forResource:找到json文件，然后将AnimationView添加到视图，在需要展示动画的地方调用play() 方法，这样动画就可以加载了。</p>
</blockquote>
<h3 id="引入json的方式"><a href="#引入json的方式" class="headerlink" title="引入json的方式"></a>引入json的方式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/// json所在的文件，默认为Bundle.main</span><br><span class="line">let animation = Animation.named(&quot;StarAnimation&quot;) </span><br><span class="line">/// 默认为Bundle.main</span><br><span class="line">let animation = Animation.named(&quot;StarAnimation&quot;, bundle: myBundle)</span><br><span class="line">/// subdirectory 为动画所在的包中的子目录(可选的)</span><br><span class="line">let animation = Animation.named(&quot;StarAnimation&quot;, subdirectory: &quot;Animations&quot;)</span><br><span class="line">/// animationCache 为保存加载动画的缓存(可选的)</span><br><span class="line">let animation = Animation.named(&quot;StarAnimation&quot;, animationCache: LRUAnimationCache.sharedCache)</span><br></pre></td></tr></table></figure>

<h3 id="指定加载路径"><a href="#指定加载路径" class="headerlink" title="指定加载路径"></a>指定加载路径</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Animation.filepath(_ filepath: String, animationCache: AnimationCacheProvider?) -&gt; Animation?</span><br></pre></td></tr></table></figure>
<blockquote>
<p>从绝对文件路径加载动画模型。如果没有找到动画，则返回nil<br>filepath:要加载的动画的绝对文件路径<br>animationCache:用于保存加载的动画的缓存(可选的)</p>
</blockquote>
<h3 id="播放动画"><a href="#播放动画" class="headerlink" title="播放动画"></a>播放动画</h3><p><strong>基本播放(Basic Playing)</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 播放动画从它的当前状态到它的时间轴结束。在动画停止时调用completion代码块</span><br><span class="line">// 如果动画完成，则completion返回true。如果动画被中断，则返回false</span><br><span class="line">AnimationView.play(completion: LottieCompletionBlock?)</span><br></pre></td></tr></table></figure>
<p><strong>利用进度时间(Play with Progress Time)</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 指定一个时间到另一个时间的播放</span><br><span class="line">AnimationView.play(fromProgress: AnimationProgressTime?, toProgress: AnimationProgressTime, loopMode: LottieLoopMode?, completion: LottieCompletionBlock?)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>时间帧播放(Play with Marker Names)</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 动画播放从一个时间帧到另一个时间帧</span><br><span class="line">AnimationView.play(fromFrame: AnimationProgressTime?, toFrame: AnimationFrameTime, loopMode: LottieLoopMode?, completion: LottieCompletionBlock?)</span><br></pre></td></tr></table></figure>
<p><strong>时间帧播放(Play with Marker Names)</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 将动画从命名标记播放到另一个标记。标记是编码到动画数据中并指定名称的时间点</span><br><span class="line">AnimationView.play(fromMarker: String?, toMarker: String, loopMode: LottieLoopMode?, completion: LottieCompletionBlock?)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="其它操作"><a href="#其它操作" class="headerlink" title="其它操作"></a>其它操作</h3><blockquote>
<ol>
<li><p>AnimationView.pause() &#x2F;&#x2F; 暂停</p>
</li>
<li><p>AnimationView.stop()  &#x2F;&#x2F; 停止</p>
</li>
<li><p>var AnimationView.backgroundBehavior: LottieBackgroundBehavior { get set} &#x2F;&#x2F; app进入后台</p>
</li>
<li><p>var AnimationView.contentMode: UIViewContentMode { get set } &#x2F;&#x2F; 循环播放模式。默认是playOnce，还有autoReverse无限循环</p>
</li>
<li><p>var AnimationView.isAnimationPlaying: Bool { get set } &#x2F;&#x2F; 判断动画是否在播放</p>
</li>
<li><p>var AnimationView.animationSpeed: CGFloat { get set } &#x2F;&#x2F; 动画速度</p>
</li>
<li><p>func AnimationView.forceDisplayUpdate() &#x2F;&#x2F; 强制重绘动画视图</p>
</li>
</ol>
</blockquote>
<p><strong>以上就是我在项目中使用<code>Lottie</code>的方法，如果有错误或者不足之处还望指正，谢谢</strong></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>“iOS”</tag>
        <tag>“动画”</tag>
        <tag>“Lottie”</tag>
      </tags>
  </entry>
  <entry>
    <title>项目剖析01-swift WebSocket</title>
    <url>/2019/12/23/%E9%A1%B9%E7%9B%AE%E5%89%96%E6%9E%9001-swift-WebSocket/</url>
    <content><![CDATA[<blockquote>
<p>已经很长一段时间没有总结项目了，正好最近完成项目第二版的改版(新项目完全是用swift写的)，就把项目中一些有意义的知识块在此记录一下， 项目中有实时的交易需要展示，所以用到了socket长链接，我用的是<a href="https://github.com/daltoniam/Starscream">Starscream</a>这个第三方库，集成方法很简单去网站看看就知道。</p>
</blockquote>
<h3 id="先上代码"><a href="#先上代码" class="headerlink" title="先上代码"></a>先上代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import UIKit</span><br><span class="line">import Reachability</span><br><span class="line">import Starscream</span><br><span class="line">import zlib</span><br><span class="line"></span><br><span class="line">let reachability = Reachability()! // 判断网络连接</span><br><span class="line">let webSocket = WTWebsocket.shared</span><br><span class="line">var reConnectTime = 0 // 设置重连次数</span><br><span class="line">let reConnectMaxTime = 1000 // 设置最大重连次数</span><br><span class="line">let reConnectIntervalTime: TimeInterval = 15 // 设置重连时间间隔(秒)</span><br><span class="line">var websocketTimer: Timer? = nil</span><br><span class="line">var reConnectSubscribeDict:[String : Any] = [:]</span><br><span class="line">var page = &quot;home&quot;</span><br><span class="line">var isReconnect = true</span><br><span class="line"></span><br><span class="line">final class WTWebsocket: NSObject,WebSocketDelegate &#123;</span><br><span class="line">    </span><br><span class="line">    var isPingBack = true</span><br><span class="line">    var myWebsocket: WebSocket? = nil</span><br><span class="line">    //  socket连接上函数</span><br><span class="line">    func websocketDidConnect(socket: WebSocketClient) &#123;</span><br><span class="line">        //设置重连次数，解决无限重连问题</span><br><span class="line">        reConnectTime = 0</span><br><span class="line">        if reConnectSubscribeDict.count &gt; 0 &#123;</span><br><span class="line">            self.subscribe(subscribeDict: reConnectSubscribeDict)</span><br><span class="line">        &#125;</span><br><span class="line">        self.hearJump()</span><br><span class="line">        if  websocketTimer == nil &#123;</span><br><span class="line">            websocketTimer = Timer.scheduledTimer(timeInterval: reConnectIntervalTime, target: self, selector: #selector(sendBrandStr), userInfo: nil, repeats: true)</span><br><span class="line">        &#125;</span><br><span class="line">        isReconnect = true</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //发送文字消息</span><br><span class="line">    @objc func sendBrandStr()&#123;</span><br><span class="line">        self.checkPing()</span><br><span class="line">        let json = getJSONStringFromDictionary(dictionary: [&quot;topic&quot;:&quot;PING&quot;])</span><br><span class="line">        SingletonSocket.sharedInstance.socket.write(string: json)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 发送ping</span><br><span class="line">    func hearJump() &#123;</span><br><span class="line">        let json = getJSONStringFromDictionary(dictionary: [&quot;topic&quot;:&quot;PING&quot;])</span><br><span class="line">        SingletonSocket.sharedInstance.socket.write(string: json)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //  socket断开执行函数</span><br><span class="line">    func websocketDidDisconnect(socket: WebSocketClient, error: Error?) &#123;</span><br><span class="line">        //执行重新连接方法</span><br><span class="line">        socketReconnect()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //  接收返回消息函数</span><br><span class="line">    func websocketDidReceiveMessage(socket: WebSocketClient, text: String) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func websocketDidReceiveData(socket: WebSocketClient, data: Data) &#123;</span><br><span class="line">        guard let newStr = String(data: data.gzipUncompress(), encoding: .utf8) else &#123;return&#125;</span><br><span class="line">        if newStr == &quot;PONG&quot; &#123;</span><br><span class="line">            isPingBack = true</span><br><span class="line">            return</span><br><span class="line">        &#125;</span><br><span class="line">      // 处理收到的信息</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 添加注册</span><br><span class="line">    func subscribe(subscribeDict: [String : Any]) &#123;</span><br><span class="line">        var subscribeDicts = subscribeDict</span><br><span class="line">        reConnectSubscribeDict = subscribeDicts</span><br><span class="line">        page = subscribeDicts[&quot;type&quot;] as! String</span><br><span class="line">        subscribeDicts.removeValue(forKey: &quot;type&quot;)</span><br><span class="line">        let json = getJSONStringFromDictionary(dictionary:</span><br><span class="line">            subscribeDicts as NSDictionary)</span><br><span class="line">        SingletonSocket.sharedInstance.socket.write(string: json)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //检测</span><br><span class="line">    @objc func checkPing() &#123;</span><br><span class="line">        if !isPingBack &#123;</span><br><span class="line">            // 重新连接</span><br><span class="line">            socketReconnect()</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            isPingBack = false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //构造单例数据</span><br><span class="line">    static let shared = WTWebsocket()</span><br><span class="line">    private override init() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//socket 重连逻辑</span><br><span class="line">func socketReconnect() &#123;</span><br><span class="line">    //判断网络情况，如果网络正常，可以执行重连</span><br><span class="line">    if reachability.connection != .none &#123;</span><br><span class="line">        //设置重连次数，解决无限重连问题</span><br><span class="line">        reConnectTime =  reConnectTime + 1</span><br><span class="line">        if reConnectTime &lt; reConnectMaxTime &#123;</span><br><span class="line">            //添加重连延时执行，防止某个时间段，全部执行</span><br><span class="line">            let time: TimeInterval = 2.0</span><br><span class="line">            DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + time) &#123;</span><br><span class="line">                SingletonSocket.sharedInstance.socket.connect()</span><br><span class="line">                SingletonSocket.sharedInstance.socket.disconnect()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //提示重连失败</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //提示无网络</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//socket主动断开，放在app进入后台时，数据进入缓存。app再进入前台，app出现卡死的情况</span><br><span class="line">func socketDisConnect() &#123;</span><br><span class="line">    if !SingletonSocket.sharedInstance.socket.isConnected &#123;</span><br><span class="line">        websocketTimer?.invalidate()</span><br><span class="line">        websocketTimer = nil</span><br><span class="line">        SingletonSocket.sharedInstance.socket.disconnect()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// initSocket方法</span><br><span class="line">func initWebSocketSingle () &#123;</span><br><span class="line">    SingletonSocket.sharedInstance.socket.delegate = webSocket</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//声明webSocket单例</span><br><span class="line">class SingletonSocket &#123;</span><br><span class="line">    let socket:WebSocket = WebSocket(url: URL(string: AppURLHOST.SocketURL)!)</span><br><span class="line">    class var sharedInstance : SingletonSocket&#123;</span><br><span class="line">        struct Static&#123;</span><br><span class="line">            static let instance:SingletonSocket = SingletonSocket()</span><br><span class="line">        &#125;</span><br><span class="line">        if !Static.instance.socket.isConnected&#123;</span><br><span class="line">            Static.instance.socket.connect()</span><br><span class="line">        &#125;</span><br><span class="line">        return Static.instance</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="整个代码很简单，基本都有注释，大概聊一聊里面的一些关键点"><a href="#整个代码很简单，基本都有注释，大概聊一聊里面的一些关键点" class="headerlink" title="整个代码很简单，基本都有注释，大概聊一聊里面的一些关键点"></a>整个代码很简单，基本都有注释，大概聊一聊里面的一些关键点</h3><blockquote>
<p>发送ping-俗称发送心跳，这个主要是判断socket是否断开，链接成功后每次间隔固定时间发送一次请求，然后在返回中修改isPingBack，在下一次发送请求前检查isPingBack判断上一次的请求是否返回，这样就可以判断socket是否断开，这个间隔时间可以自由设定，但是最好不要太短，太短有可能是socket连接了但是没有来得及返回。当然太长也不行，这可能导致发现socket断开不及时。</p>
</blockquote>
<p><strong>app在后台需要断开socket，当 app重新进入前台需要重新连接</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func applicationWillResignActive(_ application: UIApplication) &#123;</span><br><span class="line">        //进入后台模式，主动断开socket，防止出现处理不了的情况</span><br><span class="line">        if SingletonSocket.sharedInstance.socket.isConnected &#123;</span><br><span class="line">            reConnectTime = reConnectMaxTime</span><br><span class="line">            socketDisConnect()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    func applicationDidBecomeActive(_ application: UIApplication) &#123;</span><br><span class="line">        //进入前台模式，主动连接socket</span><br><span class="line">        //解决因为网络切换或链接不稳定问题，引起socket断连问题</span><br><span class="line">        //如果app从无网络，到回复网络，需要执行重连</span><br><span class="line">        if !isFirstApplicationDidBecomeActive &#123;</span><br><span class="line">            reConnectTime = 0</span><br><span class="line">            socketReconnect()</span><br><span class="line">            WTBasicConfigManager.shareDataSingle.getHash()</span><br><span class="line">        &#125;</span><br><span class="line">        isFirstApplicationDidBecomeActive = false</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>一定要设置最大重新连接的次数，不然app会无限重新连接</strong></p>
<p><strong>连接成功或者重连成功都需要对需要推送的数据进行一次网络请求，确保数据的准确性。</strong></p>
<blockquote>
<p>以上就是我在项目中使用WebSocket的方法，如果有错误或者不足之处还望指正，谢谢</p>
</blockquote>
]]></content>
      <categories>
        <category>swift</category>
      </categories>
      <tags>
        <tag>“swift”</tag>
        <tag>“WebSocket”</tag>
      </tags>
  </entry>
  <entry>
    <title>项目剖析03-swift 网络请求Moya+HandyJSON+RxSwift</title>
    <url>/2019/12/23/%E9%A1%B9%E7%9B%AE%E5%89%96%E6%9E%9003-swift-%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82Moya-HandyJSON-RxSwift/</url>
    <content><![CDATA[<blockquote>
<p>项目第一版网络框架用的是<a href="https://github.com/bustoutsolutions/siesta">siesta</a>,它的缓存与自动刷新确实很好用而且代码很简洁，但是在文件的上传与下载以及对返回类型需要精确匹配要求这方面就很不友好，所以在第二版的我选择了<a href="https://github.com/Moya/Moya">Moya</a>,它是一个网络抽象层，它在<a href="https://github.com/Alamofire/Alamofire">Alamofire</a>基础上提供了一系列的抽象接口方便维护。关于<code>Moya</code>的使用介绍很多，我就不再赘述了。我主要记录一下我在使用过程中学到的处理方式。我的网络框架是搭着<a href="https://github.com/alibaba/HandyJSON">HandyJSON</a>和<a href="https://github.com/Moya/Moya/blob/master/docs/RxSwift.md">RxSwift</a>一起构建的。</p>
</blockquote>
<h3 id="Moya"><a href="#Moya" class="headerlink" title="Moya"></a>Moya</h3><p><strong>代码</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Foundation</span><br><span class="line">import enum Result.Result</span><br><span class="line">import Alamofire</span><br><span class="line"></span><br><span class="line">//设置请求超时时间</span><br><span class="line">private let requestTimeoutClosure = &#123; (endpoint: Endpoint, done: @escaping MoyaProvider&lt;ApiManager&gt;.RequestResultClosure) in</span><br><span class="line">    do &#123;</span><br><span class="line">        var request = try endpoint.urlRequest()</span><br><span class="line">        request.timeoutInterval = 60</span><br><span class="line">        done(.success(request))</span><br><span class="line">    &#125; catch &#123;</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let ApiManagerProvider = MoyaProvider&lt;ApiManager&gt;(endpointClosure: endpointMapping, requestClosure: requestTimeoutClosure, plugins:[])</span><br><span class="line"></span><br><span class="line">// MARK: 取消所有请求</span><br><span class="line">func cancelAllRequest() &#123;</span><br><span class="line">    WTOtherProvider.manager.session.getTasksWithCompletionHandler &#123; dataTasks, uploadTasks, downloadTasks in</span><br><span class="line">        dataTasks.forEach &#123; $0.cancel() &#125;</span><br><span class="line">        uploadTasks.forEach &#123; $0.cancel() &#125;</span><br><span class="line">        downloadTasks.forEach &#123; $0.cancel() &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    WTLoginProvider.manager.session.getTasksWithCompletionHandler &#123; dataTasks, uploadTasks, downloadTasks in</span><br><span class="line">        dataTasks.forEach &#123; $0.cancel() &#125;</span><br><span class="line">        uploadTasks.forEach &#123; $0.cancel() &#125;</span><br><span class="line">        downloadTasks.forEach &#123; $0.cancel() &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ……</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">public func endpointMapping&lt;Target: TargetType&gt;(target: Target) -&gt; Endpoint &#123;</span><br><span class="line">    WTDLog(&quot;请求连接：\(target.baseURL)\(target.path) \n方法：\(target.method)\n参数：\(String(describing: target.task.self)) &quot;)</span><br><span class="line">    return MoyaProvider.defaultEndpointMapping(for: target)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">final class RequestAlertPlugin: PluginType &#123;</span><br><span class="line">    </span><br><span class="line">    func prepare(_ request: URLRequest, target: TargetType) -&gt; URLRequest &#123;</span><br><span class="line">        return request</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func willSend(_ request: RequestType, target: TargetType) &#123;</span><br><span class="line">        //实现发送请求前需要做的事情</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public func didReceive(_ result: Result&lt;Response, MoyaError&gt;, target: TargetType) &#123;</span><br><span class="line"></span><br><span class="line">        switch result &#123;</span><br><span class="line">        case .success(let response):</span><br><span class="line">            guard response.statusCode == 200 else &#123;</span><br><span class="line">                if response.statusCode == 401 &#123;</span><br><span class="line">                    if isJumpLogin == false &#123;</span><br><span class="line">                        cancelAllRequest()</span><br><span class="line">                        // 退出登录</span><br><span class="line">                        if let nvc = (WTNavigationManger.Nav as? WTMainViewController) &#123;</span><br><span class="line">                            nvc.login()</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                return</span><br><span class="line">            &#125;</span><br><span class="line">            var json = try? JSON(data: response.data)</span><br><span class="line">            WTDLog(&quot;请求状态码\(json?[&quot;status&quot;] ?? &quot;&quot;)&quot;)</span><br><span class="line">            </span><br><span class="line">            guard let codeString = json?[&quot;status&quot;] else &#123;return&#125;</span><br><span class="line">             if codeString == 401 &#123;// 退出登录</span><br><span class="line">                if isJumpLogin == false &#123;</span><br><span class="line">                    cancelAllRequest()</span><br><span class="line">                    if let nvc = (WTNavigationManger.Nav as? WTMainViewController) &#123;</span><br><span class="line">                        nvc.login()</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                break</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        case .failure(let error):</span><br><span class="line">            WTDLog(error)</span><br><span class="line">            let myAppdelegate = UIApplication.shared.delegate as! AppDelegate</span><br><span class="line">            myAppdelegate.listenNetwork()</span><br><span class="line">            break</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct AuthPlugin: PluginType &#123;</span><br><span class="line">    let token: String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">enum ApiManager &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extension ApiManager: TargetType &#123;</span><br><span class="line">    var headers: [String : String]? &#123;</span><br><span class="line">        var dict = [&quot;ColaLanguage&quot;: (&quot;common.isChinese&quot;.L() == &quot;YES&quot;) ? &quot;CN&quot; : &quot;EN&quot;]</span><br><span class="line">        if let authToken =  WTLoginInfoManger.shareDataSingle.model?.accessToken &#123;</span><br><span class="line">            dict[&quot;Authorization&quot;] = authToken</span><br><span class="line">        &#125;</span><br><span class="line">        return dict</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    var baseURL: URL &#123;</span><br><span class="line">        return URL.init(string: AppURLHOST.MyPublicBaseURL)!</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    var path: String &#123;</span><br><span class="line">        return &quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    var method: Moya.Method &#123;</span><br><span class="line">        return .get</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    var task: Task &#123;</span><br><span class="line">        return .requestPlain</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    var validate: Bool &#123;</span><br><span class="line">        return false</span><br><span class="line">    &#125;</span><br><span class="line">    var sampleData: Data &#123;</span><br><span class="line">        return &quot;&quot;.data(using: String.Encoding.utf8)!</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/// 数据 转 模型</span><br><span class="line">extension ObservableType where E == Response &#123;</span><br><span class="line">    public func mapHandyJsonModel&lt;T: HandyJSON&gt;(_ type: T.Type) -&gt; Observable&lt;T&gt; &#123;</span><br><span class="line">        return flatMap &#123; response -&gt; Observable&lt;T&gt; in</span><br><span class="line">            return Observable.just(response.mapHandyJsonModel(T.self))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/// 数据 转 模型</span><br><span class="line">extension Response &#123;</span><br><span class="line">    func mapHandyJsonModel&lt;T: HandyJSON&gt;(_ type: T.Type) -&gt; T &#123;</span><br><span class="line">        let jsonString = String.init(data: data, encoding: .utf8)</span><br><span class="line">        if let modelT = JSONDeserializer&lt;T&gt;.deserializeFrom(json: jsonString) &#123;</span><br><span class="line">            return modelT</span><br><span class="line">        &#125;</span><br><span class="line">        return JSONDeserializer&lt;T&gt;.deserializeFrom(json: &quot;&#123;\&quot;msg\&quot;:\&quot;\(&quot;common.try&quot;.L())\&quot;&#125;&quot;)!</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// 自定义插件</span><br><span class="line">public final class NetworkLoadingPlugin: PluginType &#123;</span><br><span class="line">    public func willSend(_ request: RequestType, target: TargetType) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    public func didReceive(_ result: Result&lt;Moya.Response, MoyaError&gt;, target: TargetType) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>模式Target -&gt; Endpoint -&gt; Request</strong></p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/24422c24f3f5cf628f45d967e4ec09c9.png" alt="来自GitHub图片"></p>
<blockquote>
<p><code>Moya</code>虽然是基于Alamofire的但是我们在代码中却不会和Alamofire打交道，它是通过枚举来管理API的。我在项目中定义来一个API基类，然后为每一个模块定义了一个API管理类。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enum HomeApiManager &#123;</span><br><span class="line">    case getBanner // 获取轮播</span><br><span class="line">    case getAnnouncement(per_page: String) // 获取公告</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>对于请求类型的改变和对于URL的改变也是通过枚举</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var method: Moya.Method &#123;</span><br><span class="line">        switch self &#123;</span><br><span class="line">        case .orderCreate:</span><br><span class="line">            return .post</span><br><span class="line">        case .orderCancelById, .orderCancelByPair:</span><br><span class="line">            return .delete</span><br><span class="line">        default:</span><br><span class="line">            return .get</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">var path: String &#123;</span><br><span class="line">        switch self &#123;</span><br><span class="line">        case .getKline:</span><br><span class="line">            return &quot;/api/kline&quot;</span><br><span class="line">        case .transGetByID(let orderId):</span><br><span class="line">            return &quot;/api/\(orderId)&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><strong>请求任务</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var task: Task &#123;</span><br><span class="line">    switch self &#123;</span><br><span class="line">    case .securityPostGoogleAuth(let tokenKey, let oldGoogleCode, let googleCode, let captcha):</span><br><span class="line">        return .requestParameters(parameters: [&quot;captcha&quot;: captcha], encoding: JSONEncoding.default) // post请求</span><br><span class="line"></span><br><span class="line">    case .getReward(let type, let cursor, let limit):</span><br><span class="line">        return .requestParameters(parameters: [&quot;type&quot;: type], encoding: URLEncoding.default) // 其它请求</span><br><span class="line"></span><br><span class="line">    case .uploadImage(let imageArry):</span><br><span class="line">        let formDataAry:NSMutableArray = NSMutableArray()</span><br><span class="line">        for (index,image) in imageArry.enumerated() &#123;</span><br><span class="line">            //图片转成Data</span><br><span class="line">            let data:Data = image.jpegData(compressionQuality: 0.7)!</span><br><span class="line">            //根据当前时间设置图片上传时候的名字</span><br><span class="line">            var dateStr: String = &quot;yyyy-MM-dd-HH:mm:ss&quot;.timeStampToString(timeStamp: Date().timeIntervalSince1970)</span><br><span class="line">            //别忘记这里给名字加上图片的后缀哦</span><br><span class="line">            dateStr = dateStr.appendingFormat(&quot;-%i.jpg&quot;, index)</span><br><span class="line">            let formData = MultipartFormData(provider: .data(data), name: &quot;file\(index)&quot;, fileName: dateStr, mimeType: &quot;image/jpeg&quot;)</span><br><span class="line">            formDataAry.add(formData)</span><br><span class="line">        &#125;</span><br><span class="line">        return .uploadCompositeMultipart(formDataAry as! [MultipartFormData], urlParameters: [</span><br><span class="line">            :])</span><br><span class="line">        </span><br><span class="line">    default:</span><br><span class="line">        return .requestPlain</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="插件机制"><a href="#插件机制" class="headerlink" title="插件机制"></a>插件机制</h3><blockquote>
<p><code>Moya</code>的另一个强大的功能就是它的插件机制，提供了两个接口，willSendRequest 和 didReceiveResponse，它可以在请求前和请求后做一些额外的操作而和主功能是解耦的，比如可以在请求前开始加载动画请求结束后移除加载动画，还可以自定义插件。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">final class RequestAlertPlugin: PluginType &#123;</span><br><span class="line">    func prepare(_ request: URLRequest, target: TargetType) -&gt; URLRequest &#123;</span><br><span class="line">        return request</span><br><span class="line">    &#125;</span><br><span class="line">    func willSend(_ request: RequestType, target: TargetType) &#123;</span><br><span class="line">        现发送请求前需要做的事情</span><br><span class="line">        if target.headers?[&quot;isHiddentLoading&quot;] != &quot;true&quot; &#123;</span><br><span class="line">            currentView?.addSubview(activityIndicatorView)</span><br><span class="line">            activityIndicatorView.center = currentView!.center</span><br><span class="line">            activityIndicatorView.startAnimating()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public func didReceive(_ result: Result&lt;Response, MoyaError&gt;, target: TargetType) &#123;</span><br><span class="line">        if activityIndicatorView.isAnimating &#123;</span><br><span class="line">            activityIndicatorView.stopAnimating()</span><br><span class="line">            activityIndicatorView.removeFromSuperview()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// 自定义插件</span><br><span class="line">public final class NetworkLoadingPlugin: PluginType &#123;</span><br><span class="line">    public func willSend(_ request: RequestType, target: TargetType) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    public func didReceive(_ result: Result&lt;Moya.Response, MoyaError&gt;, target: TargetType) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Moya默认有4个插件</p>
<ol>
<li><p>AccessTokenPlugin    &#x2F;&#x2F; 管理AccessToken的插件</p>
</li>
<li><p>CredentialsPlugin       &#x2F;&#x2F; 管理认证的插件</p>
</li>
<li><p>NetworkActivityPlugin &#x2F;&#x2F; 管理网络状态的插件</p>
</li>
<li><p>NetworkLoggerPlugin &#x2F;&#x2F; 管理网络log的插件</p>
</li>
</ol>
</blockquote>
<h3 id="RxSwift"><a href="#RxSwift" class="headerlink" title="RxSwift"></a>RxSwift</h3><blockquote>
<p>这里的RxSwift不是完整的RxSwift，而是为Moya定制的一个扩展(pod ‘Moya&#x2F;RxSwift’)在数据请求回来后进行处理。</p>
<ol>
<li><p>request()  传入API</p>
</li>
<li><p>asObservable() 是Moya为RxSwift提供的扩展方法，返回可监听序列</p>
</li>
<li><p>mapHandyJsonModel() 也是Moya RxSwift的扩展方法进行自定义的，可以把返回的数据解析成model</p>
</li>
<li><p>subscribe() 是对处理过的 Observable 订阅一个 onNext 的观察者，一旦得到JSON格式的数据，就会经行相应的处理</p>
</li>
<li><p>disposed() 是RxSwift的一个自动内存处理机制，类似ARC，会自动处理不需要的对象</p>
</li>
</ol>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/// 数据 转 模型</span><br><span class="line">extension ObservableType where E == Response &#123;</span><br><span class="line">    public func mapHandyJsonModel&lt;T: HandyJSON&gt;(_ type: T.Type) -&gt; Observable&lt;T&gt; &#123;</span><br><span class="line">        return flatMap &#123; response -&gt; Observable&lt;T&gt; in</span><br><span class="line">            return Observable.just(response.mapHandyJsonModel(T.self))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/// 数据 转 模型</span><br><span class="line">extension Response &#123;</span><br><span class="line">    func mapHandyJsonModel&lt;T: HandyJSON&gt;(_ type: T.Type) -&gt; T &#123;</span><br><span class="line">        let jsonString = String.init(data: data, encoding: .utf8)</span><br><span class="line">        if let modelT = JSONDeserializer&lt;T&gt;.deserializeFrom(json: jsonString) &#123;</span><br><span class="line">            return modelT</span><br><span class="line">        &#125;</span><br><span class="line">        return JSONDeserializer&lt;T&gt;.deserializeFrom(json: &quot;&#123;\&quot;msg\&quot;:\&quot;\(&quot;common.try&quot;.L())\&quot;&#125;&quot;)!</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">extension WTApiManager &#123;</span><br><span class="line">    class func NetExchangeRequest&lt;T: BaseModel&gt;(disposeBag: DisposeBag,type: ExchangeApiManager, model: T.Type, isBackFail: Bool = false, Success:@escaping (T)-&gt;(), Error: @escaping ()-&gt;()) &#123;</span><br><span class="line">        WTExchangeProvider.rx.request(type)</span><br><span class="line">            .asObservable()</span><br><span class="line">            .mapHandyJsonModel(model)</span><br><span class="line">            .subscribe &#123; (event) in</span><br><span class="line">                switch event &#123;</span><br><span class="line">                case let .next(data):</span><br><span class="line">                    if isBackFail &#123;</span><br><span class="line">                        Success(data)</span><br><span class="line">                        break</span><br><span class="line">                    &#125;</span><br><span class="line">                    guard data.status == 200 else &#123;</span><br><span class="line">                        WTProgressHUD.show(error: data.message ?? &quot;common.try&quot;.L(), toView: nil)</span><br><span class="line">                        Error()</span><br><span class="line">                        break</span><br><span class="line">                    &#125;</span><br><span class="line">                    Success(data)</span><br><span class="line">                    break</span><br><span class="line">                case let .error(error):</span><br><span class="line">                    WTDLog(error)</span><br><span class="line">                    Error()</span><br><span class="line">                    break</span><br><span class="line">                default:</span><br><span class="line">                    break</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;.disposed(by: disposeBag)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="HandyJSON"><a href="#HandyJSON" class="headerlink" title="HandyJSON"></a>HandyJSON</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class BaseModel: HandyJSON &#123;</span><br><span class="line">    var status: Int = 0</span><br><span class="line">    var message: String? = nil // 服务端返回提示</span><br><span class="line">    required init()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class WTBaseModel&lt;T: HandyJSON&gt;: BaseModel &#123;</span><br><span class="line">    var data: T? // 具体的data的格式和业务相关，故用泛型定义</span><br><span class="line">&#125;</span><br><span class="line">struct WTCurrencyBalanceModel: HandyJSON &#123;</span><br><span class="line">    var coinCode: String = &quot;&quot;</span><br><span class="line">    let balanceAvailable: Double = 0.0</span><br><span class="line">    let balanceFrozen: Double = 0.0</span><br><span class="line">    let worth: Double = 0.0</span><br><span class="line">&#125;</span><br><span class="line">// 网络请求 传入对应model</span><br><span class="line">WTApiManager.NetOtherRequest(disposeBag: disposeBag, type: .getMarketsPrice, model: WTBaseModel&lt;WTRateModel&gt;, Success: &#123;(model) in</span><br><span class="line">&#125;) &#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="以上就是我在项目中使用"><a href="#以上就是我在项目中使用" class="headerlink" title="以上就是我在项目中使用"></a>以上就是我在项目中使用</h3><p><strong><code>Moya+HandyJSON+RxSwift</code>的方法，如果有错误或者不足之处还望指正，谢谢</strong></p>
]]></content>
      <categories>
        <category>swift</category>
      </categories>
      <tags>
        <tag>“swift”</tag>
        <tag>“网络请求”</tag>
        <tag>“Moya”</tag>
        <tag>“HandyJSON”</tag>
        <tag>“RxSwift”</tag>
      </tags>
  </entry>
  <entry>
    <title>项目剖析04-swift 网络请求Moya+Alamofire(HTTPS)证书验证</title>
    <url>/2024/03/05/%E9%A1%B9%E7%9B%AE%E5%89%96%E6%9E%9004-swift-%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82Moya-Alamofire-HTTPS-%E8%AF%81%E4%B9%A6%E9%AA%8C%E8%AF%81/</url>
    <content><![CDATA[<h2 id="SSL证书验证"><a href="#SSL证书验证" class="headerlink" title="SSL证书验证"></a>SSL证书验证</h2><p><strong>一种加强App 和 Server 间通讯安全的方法。主要目标是确保 App 仅与预先验证的 Server 建立安全连接，防止中间人攻击（Man-in-the-Middle，MitM）等安全风险。一般常用的有两种方式进行验证，Certificate Pinning和Public Key Pinning。</strong></p>
<blockquote>
<p>Alamofire5.0 以后将证书验证类放于ServerTrustEvaluation这个类里面。一共有6种验证策略：</p>
<ol>
<li><p><strong>DefaultTrustEvaluator</strong> - （默认验证策略）只要是合法证书就能通过验证。</p>
</li>
<li><p><strong>RevocationTrustEvaluator</strong>（验证注销策略）对注销证书做的一种额外设置，Alamofire从iOS10.1才开始支持吊销证书的策略。</p>
</li>
<li><p><strong>PinnedCertificatesTrustEvaluator</strong>（证书验证策略）app端会对服务器端返回的证书和本地保存的证书中的全部内容进行校验需要全部正确，此验证策略还可以接受自签名证书，安全性相对较高，此方法较为固定，如果 Server 更新证书，App 需要定期更新并重新上架。</p>
</li>
<li><p><strong>PublicKeysTrustEvaluator</strong>（公钥验证策略）app端只会对服务器返回的证书和本地保存的证书中的 PublicKey(公钥)进行校验，所以当证书需要更新时，只需确保公钥保持不变，不需要更新App。</p>
</li>
<li><p><strong>CompositeTrustEvaluator</strong>（自定义组合验证策略）以上多种策略组合一起，只有在所有数组中值都成功时才成功。</p>
</li>
<li><p><strong>DisabledTrustEvalutor</strong>（不验验证策略）无条件信任，所有都可以通过验证。正式环境不建议用此策略，多用于测试。</p>
</li>
</ol>
</blockquote>
<p><strong>我们用的是PublicKeysTrustEvaluator（公钥验证策略）</strong></p>
<hr>
<blockquote>
<p>后台提供证书，将正式放在项目目录中。</p>
</blockquote>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/d2b909e2935eccedbf88e97df824ecf9.png" alt="本地证书存放"></p>
<blockquote>
<p>获取本地证书，提取证书的公钥（获取公钥key数组）。证书后缀名一般有：.cer、.crt、.der等，我项目中用的cer，证书链必须包含一个固定的公钥。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct WTCertificates &#123;</span><br><span class="line">    static let rootCA = WTCertificates.certificate( )</span><br><span class="line">    static func certificate() -&gt; [SecKey] &#123;</span><br><span class="line">        var publicKeyArray:[SecKey] = []</span><br><span class="line">        for resource in [&quot;xxx&quot;, &quot;xxxx&quot;, &quot;xxxxx&quot;] &#123;// 本地证书名称</span><br><span class="line">            if let filePath = Bundle.main.path(forResource: resource, ofType: &quot;cer&quot;), let data = try? Data(contentsOf: URL(fileURLWithPath: filePath)) as CFData, let certificate = SecCertificateCreateWithData(nil, data),let publicKey = certificate.af.publicKey &#123;</span><br><span class="line">                publicKeyArray.append(publicKey)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return publicKeyArray</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>给Session添加策略（接受质询）</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var requestManagerSession: Session = &#123;</span><br><span class="line">    if WTCertificates.rootCA.count &gt; 0, verifyCert &#123;</span><br><span class="line">        let certificates: [SecKey] = WTCertificates.rootCA</span><br><span class="line">        let trustPolicy = PublicKeysTrustEvaluator(keys: certificates, performDefaultValidation: false, validateHost: false)</span><br><span class="line">        let manager = ServerTrustManager(evaluators: [</span><br><span class="line">            &quot;xxx.xxx.com&quot;: trustPolicy,</span><br><span class="line">            &quot;xx.xx.jftplus.com&quot;: trustPolicy,</span><br><span class="line">            &quot;xxx.xx.com&quot;: trustPolicy])// base url 如何域名过多，可以子类化 ServerTrustManager，并用自己的自定义实现重写 serverTrustEvaluator(forHost:) 方法</span><br><span class="line">        let configuration = URLSessionConfiguration.af.default</span><br><span class="line">        return Session(configuration: configuration, serverTrustManager: manager)</span><br><span class="line">    &#125;</span><br><span class="line">    return MoyaProvider&lt;ApiManager&gt;.defaultAlamofireSession()</span><br><span class="line">&#125;()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在Moya中添加requestManagerSession</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var JKOtherApiManagerProvider = MoyaProvider&lt;JKOtherApiManager&gt;(endpointClosure: endpointMapping, requestClosure: requestTimeoutClosure, session:requestManagerSession, plugins:[RequestAlertPlugin(), networkPlugin])</span><br></pre></td></tr></table></figure>
<h2 id="OC-HTTPS-证书配置验证"><a href="#OC-HTTPS-证书配置验证" class="headerlink" title="OC HTTPS 证书配置验证"></a>OC HTTPS 证书配置验证</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//1 将证书拖进项目</span><br><span class="line"></span><br><span class="line">//2 获取证书路径</span><br><span class="line">NSString *certPath = [[NSBundle mainBundle] pathForResource: @&quot;cetus&quot; ofType:@&quot;cer&quot;];</span><br><span class="line">//3 获取证书data</span><br><span class="line">NSData *certData = [NSData dataWithContentsOfFile:certPath];</span><br><span class="line">//4 创建AFN 中的securityPolicy</span><br><span class="line">AFSecurityPolicy *securityPolicy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModePublicKey withPinnedCertificates:[[NSSet alloc] initWithObjects:certData,nil]];</span><br><span class="line">//5 这里就可以添加多个server证书</span><br><span class="line">NSSet *dataSet = [[NSSet alloc]initWithObjects:certData, nil];</span><br><span class="line">//6 绑定证书（不止一个证书）</span><br><span class="line">[securityPolicy setPinnedCertificates:dataSet];</span><br><span class="line">//7 是否允许无效证书</span><br><span class="line">securityPolicy.allowInvalidCertificates = YES;</span><br><span class="line">//8 是否需要验证域名</span><br><span class="line">securityPolicy.validatesDomainName = YES;</span><br><span class="line">uploadManager.securityPolicy = securityPolicy;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>我们后台给的证书格式后缀是.pem，以下是用OpenSSL命令将.pem证书转换为cer格式证书方法</p>
</blockquote>
<ol>
<li>打开命令行工具，进入存放xxx.pem证书的目录</li>
<li>输入以下命令，将.pem证书转换为cer格式<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl x509 -in xxx.pem -inform PEM -out xxx.cer -outform DER</span><br></pre></td></tr></table></figure></li>
<li>执行完毕后，您将在当前目录下看到生成的xxx.cer文件</li>
</ol>
<blockquote>
<p><strong>注意：转换后的cer证书文件只包含公钥，不包含私钥信息</strong></p>
</blockquote>
]]></content>
      <categories>
        <category>swift</category>
      </categories>
      <tags>
        <tag>“swift”</tag>
        <tag>“证书验证”</tag>
        <tag>“SSL”</tag>
      </tags>
  </entry>
  <entry>
    <title>项目总结-位置实时共享</title>
    <url>/2016/11/17/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93-%E4%BD%8D%E7%BD%AE%E5%AE%9E%E6%97%B6%E5%85%B1%E4%BA%AB/</url>
    <content><![CDATA[<blockquote>
<p>从北京回来到今天已经整整三个月了，三个月没有更新简书了。回来找了一家新的公司上班，正好今天新项目打包测试了，找了点时间来总结一下最近项目中遇到的一些问题与心得。今天主要分享<em>位置实时共享</em>，其实之前也有时间，因为在新的公司很少加班。但是自己太懒了，所以……。</p>
</blockquote>
<p><strong>谈谈新公司</strong>  </p>
<blockquote>
<p>进入公司才发现公司有个iOS大神和我是一个大学的 还是一个系的 还是同一级的，还有两个Android与我是一个专业的，这个行业真的小啊😄。公司不大，老板是个美籍华人（这应该是我们加班少的原因吧）。     </p>
</blockquote>
<p><strong>谈谈项目</strong>    </p>
<blockquote>
<p>项目内容保密（签了协议的）……，还是谈技术吧。<br>1&gt;即时通讯：我们用的是环信的，因为这不是主要的功能，使用就直接用的是环信的UI，就是官方demo里面的EaseUI，导入SDK就不用说了，我主要分享一下我们在里面添加的一个新的功能：<em>实时位置共享</em> 我们将这个功能添加在群聊里面的。主要逻辑：是通过环信群聊的透传消息实现的用的是百度地图。</p>
</blockquote>
<p><strong>通过百度地图定位 将自己的位置的经纬度放在透传消息的扩展信息中传出去</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 更新发送</span><br><span class="line">- (void)sendCmdMessageWithType:(NSString *)type &#123;</span><br><span class="line">    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</span><br><span class="line">        EMCmdMessageBody *body = [[EMCmdMessageBody alloc] initWithAction:@&quot;shareLocation&quot;];</span><br><span class="line">        _currentUserId = [[NSUserDefaults standardUserDefaults] objectForKey:@&quot;eid&quot;];</span><br><span class="line">        NSDictionary *ext = @&#123;@&quot;latitude&quot;:@(_userStartLocation.location.coordinate.latitude),@&quot;longitude&quot;:@(_userStartLocation.location.coordinate.longitude),@&quot;type&quot;:type,_currentUserId:[[NSUserDefaults standardUserDefaults] objectForKey:@&quot;user_nickname&quot;]&#125;;</span><br><span class="line">        </span><br><span class="line">        EMMessage *message = [[EMMessage alloc] initWithConversationID:self.conversationID</span><br><span class="line">                                                                  from:_currentUserId</span><br><span class="line">                                                                    to:self.conversationID</span><br><span class="line">                                                                  body:body</span><br><span class="line">                                                                   ext:ext];</span><br><span class="line">        message.chatType = EMChatTypeGroupChat;</span><br><span class="line">        [[EMClient sharedClient].chatManager sendMessage:message progress:nil completion:^(EMMessage *message, EMError *error) &#123;</span><br><span class="line">            if (error) &#123;</span><br><span class="line">                [CTHUD showText:@&quot;位置更新失败&quot;];</span><br><span class="line">                // 去请求token</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>然后在解析透彻信息的解析位置信息</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 收到解析</span><br><span class="line">- (void)didReceiveCmdMessages:(NSArray *)aCmdMessages &#123;</span><br><span class="line">    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</span><br><span class="line">        for (EMMessage *cmdMessage in aCmdMessages) &#123;</span><br><span class="line">            EMCmdMessageBody *body = (EMCmdMessageBody *)cmdMessage.body;</span><br><span class="line">            // 判断是否是位置共享消息</span><br><span class="line">            if ([body.action isEqualToString:@&quot;shareLocation&quot;]) &#123;</span><br><span class="line">                CLLocationCoordinate2D coordinate;</span><br><span class="line">                coordinate.latitude = [[cmdMessage.ext objectForKey:@&quot;latitude&quot;] doubleValue];</span><br><span class="line">                coordinate.longitude = [[cmdMessage.ext objectForKey:@&quot;longitude&quot;] doubleValue];</span><br><span class="line">                NSString *nickName = [cmdMessage.ext objectForKey:cmdMessage.from];</span><br><span class="line">                if ([[cmdMessage.ext objectForKey:@&quot;type&quot;] isEqualToString:@&quot;update&quot;]) &#123;</span><br><span class="line">                    dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                        [self updateOtherAnnotationWithLocation:coordinate UserNickName:nickName];</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;else if ([[cmdMessage.ext objectForKey:@&quot;type&quot;] isEqualToString:@&quot;remove&quot;]) &#123;</span><br><span class="line">                    dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                        [self removeOtherAnnotationWithUserNickName:nickName];</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;else if ([[cmdMessage.ext objectForKey:@&quot;type&quot;] isEqualToString:@&quot;join&quot;]) &#123;</span><br><span class="line">                    dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                        [self addMyAnnotationWithLocation:coordinate UserNickName:nickName];</span><br><span class="line">                        [self sendCmdMessageWithType:@&quot;feedback&quot;];</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;else if ([[cmdMessage.ext objectForKey:@&quot;type&quot;] isEqualToString:@&quot;feedback&quot;]) &#123;</span><br><span class="line">                    dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                        [self addMyAnnotationWithLocation:coordinate UserNickName:nickName];</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>将所有收到的透传消的位置信息标识在地图上</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 添加新的用户标注</span><br><span class="line">- (void)addMyAnnotationWithLocation:(CLLocationCoordinate2D)coordinate UserNickName:(NSString *)nickName&#123;</span><br><span class="line">    BMKPointAnnotation *annotation = [[BMKPointAnnotation alloc]init];</span><br><span class="line">    annotation.coordinate = coordinate;</span><br><span class="line">    annotation.title = nickName;</span><br><span class="line">    [_mapView addAnnotation:annotation];</span><br><span class="line">    [_mapView selectAnnotation:annotation animated:YES];</span><br><span class="line">    [_otherUserAnnotation addObject:annotation];</span><br><span class="line">    [_otherUserNickName addObject:nickName];</span><br><span class="line">    [_mapView showAnnotations:_otherUserAnnotation animated:YES];</span><br><span class="line">    [_mapView setCenterCoordinate:coordinate animated:YES];</span><br><span class="line">    while (!_mapView.zoomOut) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>还需要通过传递者的传递的类型定该位置是新加入用户还是已经存在的用户</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if ([[cmdMessage.ext objectForKey:@&quot;type&quot;] isEqualToString:@&quot;update&quot;]) &#123;</span><br><span class="line">                    dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                        [self updateOtherAnnotationWithLocation:coordinate UserNickName:nickName];</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;else if ([[cmdMessage.ext objectForKey:@&quot;type&quot;] isEqualToString:@&quot;remove&quot;]) &#123;</span><br><span class="line">                    dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                        [self removeOtherAnnotationWithUserNickName:nickName];</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;else if ([[cmdMessage.ext objectForKey:@&quot;type&quot;] isEqualToString:@&quot;join&quot;]) &#123;</span><br><span class="line">                    dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                        [self addMyAnnotationWithLocation:coordinate UserNickName:nickName];</span><br><span class="line">                        [self sendCmdMessageWithType:@&quot;feedback&quot;];</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;else if ([[cmdMessage.ext objectForKey:@&quot;type&quot;] isEqualToString:@&quot;feedback&quot;]) &#123;</span><br><span class="line">                    dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                        [self addMyAnnotationWithLocation:coordinate UserNickName:nickName];</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure>

<p><strong>新用户需要添加大头针，已经存在的用户只需要更新位置</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 更新用户标注</span><br><span class="line">- (void)updateOtherAnnotationWithLocation:(CLLocationCoordinate2D)coordinate UserNickName:(NSString *)nickName&#123;</span><br><span class="line">    for (BMKPointAnnotation *annotation in _otherUserAnnotation) &#123;</span><br><span class="line">        if ([annotation.title isEqualToString:nickName]) &#123;</span><br><span class="line">            annotation.coordinate = coordinate;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>通过百度地图获得自己移动的距离</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BMKMapPoint point1 = BMKMapPointForCoordinate(CLLocationCoordinate2DMake(_userStartLocation.location.coordinate.latitude,_userStartLocation.location.coordinate.latitude));</span><br><span class="line"></span><br><span class="line">BMKMapPoint point2 = BMKMapPointForCoordinate(CLLocationCoordinate2DMake(userLocation.location.coordinate.latitude,userLocation.location.coordinate.latitude));</span><br><span class="line"></span><br><span class="line"> CLLocationDistance distance = BMKMetersBetweenMapPoints(point1,point2);</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<blockquote>
<p>自己定义一个移动的精度，我们当时定的移动距离大于20米（distance&gt;20）就发送一次位置更新。<br>最后当需要离开位置共享是也需要再发送一次信息，透传解析出，然后移除标识</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 删除用户标注</span><br><span class="line">- (void)removeOtherAnnotationWithUserNickName:(NSString *)nickName&#123;</span><br><span class="line">    for (BMKPointAnnotation *annotation in _otherUserAnnotation) &#123;</span><br><span class="line">        if ([annotation.title isEqualToString:nickName]) &#123;</span><br><span class="line">            [_otherUserAnnotation removeObject:annotation];</span><br><span class="line">            [_otherUserNickName removeObject:nickName];</span><br><span class="line">            [_mapView removeAnnotation:annotation];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结束语</strong></p>
<blockquote>
<p>实时共享 其实与群聊差不多，就是我的位置移动距离达到了精度要求，我就发送一次群消息，让每一个参加共享的人都知道，然后在自己的地图上更新一次。以上就是我们的位置实时共享的逻辑与部分代码，欢迎各位的指正，谢谢。</p>
</blockquote>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>“iOS”</tag>
        <tag>“百度地图”</tag>
        <tag>“位置实时共享”</tag>
      </tags>
  </entry>
  <entry>
    <title>图片上传预览</title>
    <url>/2016/08/01/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E9%A2%84%E8%A7%88/</url>
    <content><![CDATA[<blockquote>
<p>本周帮一哥们写了一个页面遇到了一些问题，特此记录一下。主要遇到的问题是图片上传预览（多个上传控件）、多个颜色选择，遇到了冲突。</p>
</blockquote>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/236f8ed15fd552d48cf2c3287edd9c53.webp?x-image-process=image/format,png" alt="来个效果一撇 2016-08-01 00.13.22.png"></p>
<p><strong>这是代码上传的HTML部分代码</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;home11&quot; class=&quot;tab-pane in active lowerContent &quot;&gt;</span><br><span class="line">                  &lt;div class=&quot;tool floatLeft&quot;&gt;</span><br><span class="line">                    &lt;span class=&quot;spanStylef floatLeft&quot;&gt;名称&lt;/span&gt;</span><br><span class="line">                    &lt;input type=&quot;text&quot; name=&quot;appName&quot;&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">                  &lt;div class=&quot;upImage floatLeft&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;tool floatLeft&quot;&gt;</span><br><span class="line">                      &lt;span class=&quot;spanStylef floatLeft&quot;&gt;默认图标&lt;/span&gt;</span><br><span class="line">                      &lt;a href=&quot;javascript:;&quot; class=&quot;file&quot; onchange=&quot;javascript:setImagePreview(2);&quot;&gt;上传图片</span><br><span class="line">                        &lt;input type=&quot;file&quot; name=&quot;imagereview2&quot; class =&quot;inputImages&quot;&gt;</span><br><span class="line">                      &lt;/a&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;div class=&quot;tool floatLeft&quot;&gt;</span><br><span class="line">                      &lt;span class=&quot;spanStylef floatLeft&quot;&gt;&amp;nbsp&lt;/span&gt;</span><br><span class="line">                      &lt;img class=&quot;imagereview2&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">                  &lt;div class=&quot;upImage floatLeft&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;tool floatLeft&quot;&gt;</span><br><span class="line">                      &lt;span class=&quot;spanStylef floatLeft&quot;&gt;触及图标&lt;/span&gt;</span><br><span class="line">                      &lt;a href=&quot;javascript:;&quot; class=&quot;file&quot; onchange=&quot;javascript:setImagePreview(3);&quot;&gt;上传图片</span><br><span class="line">                        &lt;input type=&quot;file&quot; name=&quot;imagereview3&quot; class =&quot;inputImages&quot;&gt;</span><br><span class="line">                      &lt;/a&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;div class=&quot;tool floatLeft&quot;&gt;</span><br><span class="line">                      &lt;span class=&quot;spanStylef floatLeft&quot;&gt;&amp;nbsp&lt;/span&gt;</span><br><span class="line">                      &lt;img class=&quot;imagereview3&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p><strong>修改上传按钮的部分css代码</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.file &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    background: #D0EEFF;</span><br><span class="line">    border: 1px solid #99D3F5;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line">    padding: 4px 12px;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    color: #1E88C7;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">    text-indent: 0;</span><br><span class="line">    line-height: 20px;</span><br><span class="line">&#125;</span><br><span class="line">.file input &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    font-size: 100px;</span><br><span class="line">    right: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">    opacity: 0;</span><br><span class="line">&#125;</span><br><span class="line">.file:hover &#123;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>这是JS部分的代码</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function setImagePreview(avalue) &#123;</span><br><span class="line">               //input</span><br><span class="line">               var docObjs = document.getElementsByClassName(&quot;inputImages&quot;);</span><br><span class="line">               var docObj = docObjs[avalue];</span><br><span class="line">               if (docObj.files &amp;&amp; docObj.files[0]) &#123;</span><br><span class="line">                   var imgObjPreviews = document.getElementsByClassName(docObj.name);</span><br><span class="line">                   var imgObjPreview = imgObjPreviews[0];</span><br><span class="line">               if (avalue == 0) &#123;</span><br><span class="line">                   imgObjPreview.style.display = &#x27;block&#x27;;</span><br><span class="line">                   imgObjPreview.style.width = &#x27;200px&#x27;;</span><br><span class="line">                   imgObjPreview.style.height = &#x27;350px&#x27;;</span><br><span class="line">               &#125;else &#123;</span><br><span class="line">                   //火狐下，直接设img属性</span><br><span class="line">                   imgObjPreview.style.display = &#x27;block&#x27;;</span><br><span class="line">                   imgObjPreview.style.width = &#x27;100px&#x27;;</span><br><span class="line">                   imgObjPreview.style.height = &#x27;100px&#x27;;</span><br><span class="line">               &#125;</span><br><span class="line">                  imgObjPreview.src = window.URL.createObjectURL(docObj.files[0]);</span><br><span class="line">               &#125; else &#123;</span><br><span class="line">                   //IE下，使用滤镜</span><br><span class="line">                   // docObj.select();</span><br><span class="line">                   // var imgSrc = document.selection.createRange().text;</span><br><span class="line">                   // var localImagId = document.getElementById(&quot;localImag&quot;);</span><br><span class="line">                   // //必须设置初始大小</span><br><span class="line">                   // localImagId.style.width = &quot;100px&quot;;</span><br><span class="line">                   // localImagId.style.height = &quot;100px&quot;;</span><br><span class="line">                   // //图片异常的捕捉，防止用户修改后缀来伪造图片</span><br><span class="line">                   // try &#123;</span><br><span class="line">                   //     localImagId.style.filter = &quot;progid:DXImageTransform.Microsoft.AlphaImageLoader(sizingMethod=scale)&quot;;</span><br><span class="line">                   //     localImagId.filters.item(&quot;DXImageTransform.Microsoft.AlphaImageLoader&quot;).src = imgSrc;</span><br><span class="line">                   // &#125; catch(e) &#123;</span><br><span class="line">                   //     alert(&quot;您上传的图片格式不正确，请重新选择!&quot;);</span><br><span class="line">                   //     return false;</span><br><span class="line">                   // &#125;</span><br><span class="line">                   // imgObjPreview.style.display = &#x27;none&#x27;;</span><br><span class="line">                   // document.selection.empty();</span><br><span class="line">               &#125;</span><br><span class="line">               return true;</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br></pre></td></tr></table></figure>

<h2 id="问题与解决："><a href="#问题与解决：" class="headerlink" title="问题与解决："></a>问题与解决：</h2><h3 id="问题一：是上传按钮默认的文件上传是这样的"><a href="#问题一：是上传按钮默认的文件上传是这样的" class="headerlink" title="问题一：是上传按钮默认的文件上传是这样的"></a>问题一：是上传按钮默认的文件上传是这样的</h3><p><img src="https://i-blog.csdnimg.cn/blog_migrate/247191efee00edfe40ac992ff86a4b93.webp?x-image-process=image/format,png" alt="默认 2016-08-01 00.26.51.png"></p>
<h3 id="但是我需要的是这样的："><a href="#但是我需要的是这样的：" class="headerlink" title="但是我需要的是这样的："></a>但是我需要的是这样的：</h3><p><img src="https://i-blog.csdnimg.cn/blog_migrate/b519bb3cae0f98c75720b46596facebb.webp?x-image-process=image/format,png" alt="目标 2016-08-01 00.28.07.png"></p>
<blockquote>
<p>解决方案：就是将fileAPI放在你需要的控件上面，然后将fileAPI设置为透明，然后点击你需要的控件其实就是点击了fileAPI。还有一个方案就是用js:将你的控件的点击事件里面的返回为fileAPI的事件。这样点击你的控件就完成了fileAPI事件了，（我想的，没有去实现喔）</p>
</blockquote>
<h3 id="问题二：点击事件冲突"><a href="#问题二：点击事件冲突" class="headerlink" title="问题二：点击事件冲突"></a>问题二：点击事件冲突</h3><blockquote>
<p>一开始我是通过id选择器来标记image与input的,后来发现多个上传按钮就需要多个js判定，会有很多的重复代码。于是后来我改为了用类选择器但是类名一样无法将image与input对应。于是我将input的name与与image的类名写成一样，通过input的name找到对应的image。</p>
</blockquote>
<h5 id="NOTE：我前端开发很久没有弄了，很多忘记了，如有错误。请亲们一定要指出啊！"><a href="#NOTE：我前端开发很久没有弄了，很多忘记了，如有错误。请亲们一定要指出啊！" class="headerlink" title="NOTE：我前端开发很久没有弄了，很多忘记了，如有错误。请亲们一定要指出啊！"></a>NOTE：我前端开发很久没有弄了，很多忘记了，如有错误。请亲们一定要指出啊！</h5>]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>“web”</tag>
        <tag>“图片上传”</tag>
        <tag>“预览”</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 进阶</title>
    <url>/2025/07/29/C-%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<blockquote>
<p>通过 <a href="https://blog.csdn.net/gavincarter1991/article/details/149612387">C++基础</a> 的学习我们已经对基础语法、面向对象、简单模板和STL都已经掌握了，接下来就是 C++ 的进阶了。</p>
</blockquote>
<h1 id="1-优先掌握现代-C-C-11-x2F-14-x2F-17-x2F-20"><a href="#1-优先掌握现代-C-C-11-x2F-14-x2F-17-x2F-20" class="headerlink" title="1. 优先掌握现代 C++ (C++11&#x2F;14&#x2F;17&#x2F;20)"></a>1. 优先掌握现代 C++ (C++11&#x2F;14&#x2F;17&#x2F;20)</h1><blockquote>
<p>现代 C++ 极大地改变了编写高效、安全、易读 C++ 代码的方式</p>
</blockquote>
<h2 id="移动语义"><a href="#移动语义" class="headerlink" title="移动语义"></a>移动语义</h2><blockquote>
<p>需要理解其为什么能极大提升性能（ 避免不必要的拷贝 ），熟练掌握 std::move 和 std::forward 的使用场景和区别（ 移动 vs 完美转发 ）</p>
<p>移动语义允许在对象之间转移资源的所有权，而不是进行深拷贝，从而减少内存分配和复制的开销</p>
</blockquote>
<p>在实现移动语义前我们需要了解三个术语 ：<code>左值引用</code> （ lvalue reference ）、<code>右值引用</code>  （ rvalue reference ）和 <code>万能引用</code>  （ universal reference ），通过 <a href="https://blog.csdn.net/gavincarter1991/article/details/149612387">C++基础</a> 我们对这三个术语都有一定的了解，知道了： 引用 即 别名 ，int a &#x3D; 10; int&amp; b &#x3D; a;  b 是 a 的引用， 普通引用 其就是 左值引用</p>
<p><strong>左值：</strong> 可以放在赋值操作的左侧，有名字、可寻址的对象（ 如变量 int a &#x3D; 20; 中的 a ），可以被修改</p>
<p><strong>右值：</strong> 可以放在赋值操作的右侧，无名字、不可寻址的临时对象（如 a + 20 的结果、函数返回的临时对象），在没有 右值引用 之前是不可以被修改的</p>
<p><strong>右值引用</strong> 是我们需要重点学习：它是C++11里面最重要的新特性了，移动语义和完美转发都建立在它的基础之上， 使用 <code>&amp;&amp;</code> 来声明 右值引用 （int &amp;&amp; r &#x3D; 右值;），但是当我们在代码中遇到 <code>&amp;&amp;</code> 却不一定就是 右值引用，因为源代码当中出现的 <code>&amp;&amp;</code> 有可能是 <code>&amp;</code> 的意思，所以 <code>&amp;&amp;</code> 可能是 右值引用 也可能是 左值引用 ，听着很拗口吧</p>
<p>接下来我们需要引入一个新术语 万能引用  以便在交流的时候清楚的表明 <code>&amp;&amp;</code> ：</p>
<p>右值引用 只能绑定右值和即将被销毁的左值上 ， 左值引用 除了可以绑定到左值上，在满足一定条件后也可以绑定到右值上。这个条件就是 常量（ const ）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int val = 100;</span><br><span class="line">int&amp;&amp; rref3 = std::move(val); // 右值引用绑定到即将被销毁的左值</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1976231-e657f41dfaf1e499.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="const"></p>
<p>从上图可以看出：常量左值引用绑定到右值，非常量左值引用必须为左值不可绑定到右值</p>
<p><strong>universal reference：</strong> 从上面可以看出声明中带 <code>&amp;&amp;</code> 的可以是 左值引用（ const ） 也可能是 右值引用 ，这种引用我们可以给它取一个 万能应用 的名字，也叫 通用引用 和 转发引用</p>
<p><strong>如何区分 万能应用（universal reference）</strong></p>
<p>在区分 <code>T&amp;&amp;</code> 之前我们还需要在引入一个新的术语 <code>auto</code> </p>
<p><strong>auto：</strong> 关键字在 C++11 中被引入，用于自动推导变量的类型。从那时起，它的功能在 C++14 和 C++17 中得到了增强。auto 让编译器根据变量的初始值自动推导其类型，从而避免显式地写出复杂冗长的类型名，简化代码书写并提高代码的灵活性</p>
<ol>
<li><p>当 <code>T&amp;&amp;</code> 出现在函数模板参数中，并且 T 是通过模板参数推导（ auto ）出来的，那么这个 <code>T&amp;&amp;</code> 就是万能引用</p>
</li>
<li><p>如果 <code>T&amp;&amp;</code> 不涉及类型推导，或者 T 已经被指定，那么 <code>T&amp;&amp;</code> 就是右值引用</p>
</li>
</ol>
<p>在类模板中，如果成员函数不是模板函数，那么即使形参是 T&amp;&amp;，它也不是万能引用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template &lt;typename T&gt;</span><br><span class="line">class mytestc</span><br><span class="line">&#123;</span><br><span class="line">  public:</span><br><span class="line">      void testfunc(T&amp;&amp; x) &#123;&#125; // 这不是万能引用，是右值引用</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>成员函数是模板函数，并且 T 是通过模板参数推导出来的，那么 T&amp;&amp; 就是万能引用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template &lt;typename T&gt;</span><br><span class="line">class mytestc</span><br><span class="line">&#123;</span><br><span class="line">  public:</span><br><span class="line">      template &lt;typename T2&gt;</span><br><span class="line">      void testfunc2(T2&amp;&amp; x) &#123;&#125; // 这是万能引用</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>引用示例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">// 左值引用示例</span><br><span class="line">void printLeftValueRef(const std::string&amp; str) &#123;</span><br><span class="line">    cout &lt;&lt; &quot;Left value reference: &quot; &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 右值引用示例</span><br><span class="line">void printRightValueRef(std::string&amp;&amp; str) &#123;</span><br><span class="line">    cout &lt;&lt; &quot;Right value reference: &quot; &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 万能引用示例</span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">void printUniversalRef(T&amp;&amp; str) &#123;</span><br><span class="line">    cout &lt;&lt; &quot;Universal reference: &quot; &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    string str = &quot;Hello, World!&quot;;</span><br><span class="line"></span><br><span class="line">    // 左值引用</span><br><span class="line">    printLeftValueRef(str); // 绑定到左值</span><br><span class="line"></span><br><span class="line">    // 右值引用</span><br><span class="line">    printRightValueRef(move(str)); // 绑定到右值</span><br><span class="line"></span><br><span class="line">    // 万能引用</span><br><span class="line">    printUniversalRef(str); // 绑定到左值</span><br><span class="line">  </span><br><span class="line">    printUniversalRef(&quot;Hello, World!&quot;); // 绑定到右值</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Left value reference: Hello, World!</span><br><span class="line">Right value reference: Hello, World!</span><br><span class="line">Universal reference: Hello, World!</span><br><span class="line">Universal reference: Hello, World!</span><br></pre></td></tr></table></figure>

<p><strong>移动语义</strong></p>
<blockquote>
<p>在C++11之前，如果我们定义一个空类，编译器会自动为我们生4个特殊成员函数：成构造函数、析构函数、拷贝构造函数以及拷贝赋值运算符。但是在C++11之后，如果我们定义一个空类，除了之前的4个特殊成员函数，编译器还会为我们生成移动构造函数和移动赋值运算符，所以我们知道移动语义一般有两种方式：移动构造函数 和 移动赋值运算符。 std::move 是触发移动的关键函数</p>
</blockquote>
<p><strong>注意：</strong> </p>
<p><strong>1.</strong> 如果我们在类中定义了拷贝构造函数或者拷贝赋值运算符，那么编译器就不会自动生成移动构造函数和移动赋值运算符，如果调用移动语义，因为编译器没有自动生成，所以会执行拷贝操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">class myTest &#123;</span><br><span class="line">  public: myTest()&#123;&#125;</span><br><span class="line">    // 注意：这里定义了拷贝构造函数，会禁止编译器自动生成移动构造函数和移动赋值运算符</span><br><span class="line">    myTest(const myTest&amp; value)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">  myTest tempValue &#123;&#125;;</span><br><span class="line">  myTest data &#123; std::move(tempValue) &#125;; // 其实调用拷贝构造函数来生成data</span><br><span class="line">  </span><br><span class="line">  return 0; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2.</strong> 如果我们在类中定义了析构函数，那么编译器也不会自动生成移动构造函数和移动赋值运算符。如果调用移动语义，也是执行拷贝操作 ，因为基类都要有一个 <code>virtual</code> 析构函数，如果子类实现了析构函数，如果要运行移动语义就需要手动为该类定义移动构造函数以及移动赋值运算符，如果子类没有实现了析构函数，就不会影响移动构造函数以及移动赋值运算符的自动生成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">class myTest &#123;</span><br><span class="line">  public:</span><br><span class="line">  ~myTest()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">  myTest tempValue &#123;&#125;;</span><br><span class="line">  myTest data &#123; std::move(tempValue) &#125;; </span><br><span class="line">  </span><br><span class="line">  return 0; // 执行的是拷贝构造函数来创建对象B</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然反过来也一样：如果我们在类中定义了移动构造函数就不会自动生成移动赋值运算符</p>
<p>下面我们进行一个假设性夸张数据的处理的对比：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 模拟员工数据库</span><br><span class="line"></span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;chrono&gt;</span><br><span class="line">#include &lt;memory&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;cstddef&gt;</span><br><span class="line">#include &lt;iomanip&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line"></span><br><span class="line">// 内存测量工具</span><br><span class="line">#ifdef _WIN32</span><br><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">#include &lt;psapi.h&gt;</span><br><span class="line">#else</span><br><span class="line">#include &lt;sys/resource.h&gt;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">size_t get_current_memory_usage() &#123;</span><br><span class="line">#ifdef _WIN32</span><br><span class="line">    PROCESS_MEMORY_COUNTERS pmc;</span><br><span class="line">    GetProcessMemoryInfo(GetCurrentProcess(), &amp;pmc, sizeof(pmc));</span><br><span class="line">    return pmc.WorkingSetSize;</span><br><span class="line">#else</span><br><span class="line">    struct rusage usage;</span><br><span class="line">    getrusage(RUSAGE_SELF, &amp;usage);</span><br><span class="line">    return usage.ru_maxrss * 1024; // Linux返回的是KB</span><br><span class="line">#endif</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 性能数据收集器</span><br><span class="line">struct PerformanceStats &#123;</span><br><span class="line">    double duration = 0.0;</span><br><span class="line">    size_t peak_memory = 0;</span><br><span class="line">    size_t constructions = 0;</span><br><span class="line">    size_t copies = 0;</span><br><span class="line">    size_t moves = 0;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 员工类 - 包含大量绩效数据</span><br><span class="line">class Employee &#123;</span><br><span class="line">    std::string name;</span><br><span class="line">    size_t dataSize;</span><br><span class="line">    double* performanceData; // 原始指针用于精确控制内存</span><br><span class="line">    </span><br><span class="line">public:</span><br><span class="line">    // 构造函数</span><br><span class="line">    Employee(const std::string&amp; n, size_t size) </span><br><span class="line">        : name(n), dataSize(size), performanceData(new double[size])</span><br><span class="line">    &#123;</span><br><span class="line">        // 初始化绩效数据</span><br><span class="line">        for (size_t i = 0; i &lt; size; ++i) &#123;</span><br><span class="line">            performanceData[i] = static_cast&lt;double&gt;(i % 100);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 移动构造函数</span><br><span class="line">    Employee(Employee&amp;&amp; other) noexcept</span><br><span class="line">        : name(std::move(other.name)),</span><br><span class="line">          dataSize(other.dataSize),</span><br><span class="line">          performanceData(other.performanceData)</span><br><span class="line">    &#123;</span><br><span class="line">        other.dataSize = 0;</span><br><span class="line">        other.performanceData = nullptr;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 拷贝构造函数（深拷贝）</span><br><span class="line">    Employee(const Employee&amp; other)</span><br><span class="line">        : name(other.name), dataSize(other.dataSize),</span><br><span class="line">          performanceData(new double[other.dataSize])</span><br><span class="line">    &#123;</span><br><span class="line">        for (size_t i = 0; i &lt; dataSize; ++i) &#123;</span><br><span class="line">            performanceData[i] = other.performanceData[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 析构函数</span><br><span class="line">    ~Employee() &#123;</span><br><span class="line">        delete[] performanceData;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 禁用拷贝赋值</span><br><span class="line">    Employee&amp; operator=(const Employee&amp;) = delete;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 无移动语义版本（强制拷贝）</span><br><span class="line">void processEmployeesWithoutMove(PerformanceStats&amp; stats) &#123;</span><br><span class="line">    auto start = std::chrono::high_resolution_clock::now();</span><br><span class="line">    size_t start_memory = get_current_memory_usage();</span><br><span class="line">    </span><br><span class="line">    std::vector&lt;Employee&gt; department;</span><br><span class="line">    department.reserve(1000); // 预分配空间</span><br><span class="line">    </span><br><span class="line">    for (int i = 0; i &lt; 1000; ++i) &#123;</span><br><span class="line">        // 创建临时对象（会消耗内存）</span><br><span class="line">        Employee emp(&quot;Employee_&quot; + std::to_string(i), 100000);</span><br><span class="line">        </span><br><span class="line">        // 添加到vector（深拷贝）</span><br><span class="line">        department.push_back(emp);</span><br><span class="line">        </span><br><span class="line">        // 更新内存峰值</span><br><span class="line">        stats.peak_memory = std::max(stats.peak_memory, get_current_memory_usage());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    auto end = std::chrono::high_resolution_clock::now();</span><br><span class="line">    stats.duration = std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(end - start).count();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用移动语义版本</span><br><span class="line">void processEmployeesWithMove(PerformanceStats&amp; stats) &#123;</span><br><span class="line">    auto start = std::chrono::high_resolution_clock::now();</span><br><span class="line">    size_t start_memory = get_current_memory_usage();</span><br><span class="line">    </span><br><span class="line">    std::vector&lt;Employee&gt; department;</span><br><span class="line">    department.reserve(1000); // 预分配空间</span><br><span class="line">    </span><br><span class="line">    for (int i = 0; i &lt; 1000; ++i) &#123;</span><br><span class="line">        // 创建临时对象（会消耗内存）</span><br><span class="line">        Employee emp(&quot;Employee_&quot; + std::to_string(i), 100000);</span><br><span class="line">        </span><br><span class="line">        // 添加到vector（移动操作）</span><br><span class="line">        department.push_back(std::move(emp));</span><br><span class="line">        </span><br><span class="line">        // 更新内存峰值</span><br><span class="line">        stats.peak_memory = std::max(stats.peak_memory, get_current_memory_usage());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    auto end = std::chrono::high_resolution_clock::now();</span><br><span class="line">    stats.duration = std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(end - start).count();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 打印性能对比</span><br><span class="line">void printPerformanceComparison(const PerformanceStats&amp; withoutMove, const PerformanceStats&amp; withMove) &#123;</span><br><span class="line">    std::cout &lt;&lt; &quot;\n===================== 性能对比 =====================\n&quot;;</span><br><span class="line">    std::cout &lt;&lt; std::left &lt;&lt; std::setw(30) &lt;&lt; &quot;指标&quot; </span><br><span class="line">              &lt;&lt; std::setw(20) &lt;&lt; &quot;无移动语义&quot; </span><br><span class="line">              &lt;&lt; std::setw(20) &lt;&lt; &quot;有移动语义&quot; </span><br><span class="line">              &lt;&lt; std::setw(15) &lt;&lt; &quot;提升&quot; &lt;&lt; &quot;\n&quot;;</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; std::string(85, &#x27;-&#x27;) &lt;&lt; &quot;\n&quot;;</span><br><span class="line">    </span><br><span class="line">    auto printRow = [](const std::string&amp; name, auto without, auto with, const std::string&amp; unit = &quot;&quot;) &#123;</span><br><span class="line">        double improvement = 0.0;</span><br><span class="line">        std::string improvementStr;</span><br><span class="line">        </span><br><span class="line">        if (without &gt; 0 &amp;&amp; with &lt; without) &#123;</span><br><span class="line">            improvement = (static_cast&lt;double&gt;(without) - with) / without * 100;</span><br><span class="line">            improvementStr = std::to_string(static_cast&lt;int&gt;(improvement)) + &quot;%&quot;;</span><br><span class="line">        &#125; else if (with &gt; without) &#123;</span><br><span class="line">            improvement = (static_cast&lt;double&gt;(with) - without) / without * 100;</span><br><span class="line">            improvementStr = &quot;+&quot; + std::to_string(static_cast&lt;int&gt;(improvement)) + &quot;%&quot;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            improvementStr = &quot;N/A&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        std::cout &lt;&lt; std::left &lt;&lt; std::setw(30) &lt;&lt; name</span><br><span class="line">                  &lt;&lt; std::setw(20) &lt;&lt; (std::to_string(without) + unit)</span><br><span class="line">                  &lt;&lt; std::setw(20) &lt;&lt; (std::to_string(with) + unit)</span><br><span class="line">                  &lt;&lt; std::setw(15) &lt;&lt; improvementStr &lt;&lt; &quot;\n&quot;;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    printRow(&quot;执行时间 (ms)&quot;, withoutMove.duration, withMove.duration);</span><br><span class="line">    printRow(&quot;峰值内存使用 (MB)&quot;, withoutMove.peak_memory / (1024.0*1024.0), </span><br><span class="line">             withMove.peak_memory / (1024.0*1024.0), &quot; MB&quot;);</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; &quot;\n内存差异解释：\n&quot;;</span><br><span class="line">    std::cout &lt;&lt; &quot;1. 无移动语义：临时对象 + vector副本同时存在\n&quot;;</span><br><span class="line">    std::cout &lt;&lt; &quot;2. 有移动语义：仅vector中的对象存在\n&quot;;</span><br><span class="line">    std::cout &lt;&lt; &quot;3. 每个员工对象约占用800KB内存\n&quot;;</span><br><span class="line">    std::cout &lt;&lt; &quot;==================================================\n&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        PerformanceStats statsWithoutMove;</span><br><span class="line">        PerformanceStats statsWithMove;</span><br><span class="line">        </span><br><span class="line">        std::cout &lt;&lt; &quot;运行无移动语义版本...\n&quot;;</span><br><span class="line">        processEmployeesWithoutMove(statsWithoutMove);</span><br><span class="line">        </span><br><span class="line">        std::cout &lt;&lt; &quot;\n运行有移动语义版本...\n&quot;;</span><br><span class="line">        processEmployeesWithMove(statsWithMove);</span><br><span class="line">        </span><br><span class="line">        printPerformanceComparison(statsWithoutMove, statsWithMove);</span><br><span class="line">    &#125; catch (const std::bad_alloc&amp; e) &#123;</span><br><span class="line">        std::cerr &lt;&lt; &quot;\n内存分配失败: &quot; &lt;&lt; e.what() &lt;&lt; &quot;\n&quot;;</span><br><span class="line">        std::cerr &lt;&lt; &quot;这证明了无移动语义版本需要过多内存！\n&quot;;</span><br><span class="line">    &#125; catch (const std::exception&amp; e) &#123;</span><br><span class="line">        std::cerr &lt;&lt; &quot;错误: &quot; &lt;&lt; e.what() &lt;&lt; &quot;\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>运行结果：</strong></p>
<p><img src="https://upload-images.jianshu.io/upload_images/1976231-8e29def129a94fd2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="截屏2025-07-25 17.49.24.png"></p>
<p>通过以上的对比我们可以知道移动语义的优势和必要性</p>
<p>移动语义的实现要点：</p>
<p><strong>1. 资源转移：</strong> 直接窃取源对象的资源（如动态内存、文件句柄），而非复制</p>
<p><strong>2. 置空源对象：</strong> 避免资源双重释放，需要将源对象的资源指针设为 <code>nullptr</code> ，确保其析构时不会释放已被接管的资源，置空操作成本极低（单指针赋值），但避免深拷贝可提升10-100倍性能，尤其在容器扩容（ 如 std::vector ）时</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class ResourceHolder &#123;  </span><br><span class="line">    int* data;  </span><br><span class="line">public:  </span><br><span class="line">    // 移动构造函数  </span><br><span class="line">    ResourceHolder(ResourceHolder&amp;&amp; other) noexcept  </span><br><span class="line">        : data(other.data)  &#123;  // 接管资源  </span><br><span class="line">        other.data  = nullptr; // 关键置空  </span><br><span class="line">    &#125;  </span><br><span class="line">    // 移动赋值运算符  </span><br><span class="line">    ResourceHolder&amp; operator=(ResourceHolder&amp;&amp; other) noexcept &#123;  </span><br><span class="line">        if (this != &amp;other) &#123; // 自赋值检查  </span><br><span class="line">            delete[] data;     // 释放自身旧资源  </span><br><span class="line">            data = other.data;  // 接管新资源  </span><br><span class="line">            other.data  = nullptr; // 置空源对象  </span><br><span class="line">        &#125;  </span><br><span class="line">        return *this;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>3. 标记为noexcept：</strong> 若移动操作不抛出异常，需显式标记为 noexcept ，以便标准库容器优先使用移动语义优化性能</p>
<p><strong>noexcept</strong></p>
<blockquote>
<p>在上面的例子中移动构造函数中我们用到了 noexcept （ 不会抛出异常的函数 ），声明为 noexcept 的函数可以帮助编译器进行更好的优化，避免不必要的内存分配和拷贝操作，为了提高性能，移动构造函数和移动赋值运算符通常也应该声明为 noexcept</p>
</blockquote>
<h1 id="2-深入模板与泛型编程"><a href="#2-深入模板与泛型编程" class="headerlink" title="2. 深入模板与泛型编程"></a>2. 深入模板与泛型编程</h1><blockquote>
<p>C++ 中的模板与泛型编程是实现代码复用和灵活性的重要机制。通过模板，程序员可以编写独立于特定类型的代码，从而在编译时根据实际类型生成相应的代码。这种机制不仅提高了代码的可维护性，还减少了重复编写相同逻辑的需要</p>
</blockquote>
<p><strong>优势：</strong></p>
<ol>
<li><p>通过模板编写通用代码，独立于具体数据类型（ 如 <code>vector&lt;T&gt;</code> 适配任意类型 ）</p>
</li>
<li><p>避免为相似逻辑重复编写类型特定版本（ 如交换函数 swap 的通用实现 ）</p>
</li>
<li><p>编译期实例化生成类型专属代码，消除运行时抽象开销</p>
</li>
</ol>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><blockquote>
<p>模板是C++泛型编程的核心工具，允许编写与类型无关的代码。模板分为函数模板和类模板，模板的定义以关键字 template 开始，后接一个模板参数列表</p>
</blockquote>
<h3 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h3><blockquote>
<p>函数模板是一种使函数能够处理不同数据类型的工具。通过使用模板，函数可以在编译时根据传入的参数类型自动生成对应的函数代码</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">T max(T a, T b) &#123;</span><br><span class="line">    return (a &gt; b) ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    std::cout &lt;&lt; max(3, 5) &lt;&lt; &quot;\n&quot;;       // T = int</span><br><span class="line">    std::cout &lt;&lt; max(3.14, 2.71) &lt;&lt; &quot;\n&quot;; // T = double</span><br><span class="line">    std::cout &lt;&lt; max(&#x27;a&#x27;, &#x27;z&#x27;) &lt;&lt; &quot;\n&quot;;   // T = char</span><br><span class="line">    </span><br><span class="line">  std::cout &lt;&lt; max(3, 4.5) &lt;&lt; &quot;\n&quot;;   // 报错：没有与参数匹配的 函数模板 “max” 实例</span><br><span class="line">  </span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h3><blockquote>
<p>类模板与函数模板类似，但用于定义类。类模板允许程序员根据不同的数据类型创建类的实例</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">class Box &#123;</span><br><span class="line">    T content;</span><br><span class="line">public:</span><br><span class="line">    void set(T value) &#123; content = value; &#125;</span><br><span class="line">    T get() const &#123; return content; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    Box&lt;int&gt; intBox;</span><br><span class="line">    intBox.set(42);</span><br><span class="line">    </span><br><span class="line">    Box&lt;std::string&gt; strBox;</span><br><span class="line">    strBox.set(&quot;Hello Templates!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模板参数详解"><a href="#模板参数详解" class="headerlink" title="模板参数详解"></a>模板参数详解</h3><blockquote>
<p>模板参数可以是类型参数或非类型参数。类型参数用于指定模板的类型，而非类型参数用于指定模板的非类型值</p>
</blockquote>
<p><strong>类型参数</strong></p>
<blockquote>
<p>通过 typename T 或 class T 定义类型占位符，实例化时由编译器推导具体类型</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template &lt;typename T1, typename T2&gt;</span><br><span class="line"></span><br><span class="line">class Pair &#123;</span><br><span class="line">    T1 first;</span><br><span class="line">    T2 second;</span><br><span class="line">public:</span><br><span class="line">    Pair(T1 f, T2 s) : first(f), second(s) &#123;&#125;</span><br><span class="line">    // ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>非类型参数</strong></p>
<blockquote>
<p>模板参数可以是常量值（ 如整数、指针 ），用于编译时优化</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template &lt;typename T, int Size&gt;</span><br><span class="line"></span><br><span class="line">class FixedArray &#123;</span><br><span class="line">    T data[Size];</span><br><span class="line">public:</span><br><span class="line">    T&amp; operator[](int index) &#123; return data[index]; &#125;</span><br><span class="line">    // ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">FixedArray&lt;double, 10&gt; measurements;</span><br></pre></td></tr></table></figure>

<p><strong>默认模板参数</strong></p>
<blockquote>
<p>默认模板参数允许在模板定义时为某些模板参数指定默认值。这样，在实例化模板时，如果没有提供这些参数的值，编译器将使用默认值</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template &lt;typename T = int, int Size = 100&gt;</span><br><span class="line">class Buffer &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Buffer&lt;&gt; defaultBuffer; // 使用默认参数</span><br></pre></td></tr></table></figure>

<h3 id="模板特化与偏特化"><a href="#模板特化与偏特化" class="headerlink" title="模板特化与偏特化"></a>模板特化与偏特化</h3><p><strong>全特化</strong></p>
<blockquote>
<p>为特定类型提供定制实现</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template &lt;&gt;</span><br><span class="line">class Box&lt;const char*&gt; &#123;</span><br><span class="line">    const char* content;</span><br><span class="line">public:</span><br><span class="line">    void set(const char* value) &#123; content = value; &#125;</span><br><span class="line">    const char* get() const &#123; return content; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>偏特化</strong></p>
<blockquote>
<p>针对部分模板参数进行特化</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template &lt;typename T&gt;</span><br><span class="line">class Box&lt;T*&gt; &#123;</span><br><span class="line">    T* content;</span><br><span class="line">public:</span><br><span class="line">    void set(T* value) &#123; content = value; &#125;</span><br><span class="line">    T* get() const &#123; return content; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template &lt;typename T1, typename T2&gt;</span><br><span class="line">class Pair&lt;T1, T2*&gt; &#123;</span><br><span class="line">    // 偏特化版本，当第二个参数是指针时</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="变参模板-C-11"><a href="#变参模板-C-11" class="headerlink" title="变参模板 (C++11)"></a>变参模板 (C++11)</h3><blockquote>
<p>变参模板的核心是参数包（ parameter pack ），它是一种特殊的模板参数，可以表示零个或多个参数。参数包分为两种类型</p>
</blockquote>
<ol>
<li><p><strong>模板参数包：</strong> 表示零个或多个模板参数</p>
</li>
<li><p><strong>函数参数包：</strong> 表示零个或多个函数参数</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">template &lt;typename... Args&gt;</span><br><span class="line"></span><br><span class="line">void printAll(Args... args) &#123;</span><br><span class="line">    (std::cout &lt;&lt; ... &lt;&lt; args) &lt;&lt; &quot;\n&quot;; // C++17折叠表达式</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    printAll(1, &quot;apple&quot;, 3.14, &#x27;!&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模板元编程-TMP"><a href="#模板元编程-TMP" class="headerlink" title="模板元编程 (TMP)"></a>模板元编程 (TMP)</h3><blockquote>
<p>模板元编程（ TMP ）是一种在编译时执行的基于模板的 C++ 程序。它利用模板机制在编译期间生成代码，从而将工作从运行时转移到编译时，提高程序的效率并实现早期错误检测，TMP 可以用于生成编译时的常量、类型计算和编译时的条件分支</p>
</blockquote>
<p><strong>编译期计算</strong></p>
<blockquote>
<p>计算阶乘：通过递归模板实例化实现阶乘计算</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">template &lt;int N&gt;</span><br><span class="line">struct Factorial &#123;</span><br><span class="line">    static const int value = N * Factorial&lt;N-1&gt;::value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template &lt;&gt;</span><br><span class="line">struct Factorial&lt;0&gt; &#123;</span><br><span class="line">    static const int value = 1;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    std::cout &lt;&lt; Factorial&lt;5&gt;::value; // 输出120</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>类型萃取（Type Traits）</strong></p>
<blockquote>
<p>主要用于在编译时获取和操作类型信息。通过类型萃取，程序可以根据类型信息进行编译时决策，从而提高代码的性能和安全性。类型萃取的核心思想是将不同类型的数据抽象为具有相同属性的类别，使得函数能够对不同的参数表现一致</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template &lt;typename T&gt;</span><br><span class="line">struct is_pointer &#123;</span><br><span class="line">    static const bool value = false;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">struct is_pointer&lt;T*&gt; &#123;</span><br><span class="line">    static const bool value = true;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">void process(T value) &#123;</span><br><span class="line">    if constexpr (is_pointer&lt;T&gt;::value) &#123;</span><br><span class="line">        std::cout &lt;&lt; &quot;Pointer: &quot; &lt;&lt; *value &lt;&lt; &quot;\n&quot;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        std::cout &lt;&lt; &quot;Value: &quot; &lt;&lt; value &lt;&lt; &quot;\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="概念与约束-C-20"><a href="#概念与约束-C-20" class="headerlink" title="概念与约束 (C++20)"></a>概念与约束 (C++20)</h3><blockquote>
<p>这是最重要的现代 TMP 特性！ 概念极大地简化了模板约束的写法，让错误信息更友好，代码可读性更强。优先学习使用标准概念 ( <code>&lt;concepts&gt;</code> 头文件 )，然后尝试定义自己的概念</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template &lt;typename T&gt;</span><br><span class="line">concept Numeric = std::integral&lt;T&gt; || std::floating_point&lt;T&gt;;</span><br><span class="line"></span><br><span class="line">template &lt;Numeric T&gt;</span><br><span class="line">T square(T x) &#123;</span><br><span class="line">    return x * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">requires Numeric&lt;T&gt;</span><br><span class="line">T cube(T x) &#123;</span><br><span class="line">    return x * x * x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模板高级技巧"><a href="#模板高级技巧" class="headerlink" title="模板高级技巧"></a>模板高级技巧</h3><p><strong>CRTP (奇异递归模板模式)</strong></p>
<blockquote>
<p>CRTP 的核心思想是利用模板和继承的特性，在编译时进行多态操作，提高代码的性能和灵活，这种模式允许基类通过静态转换访问派生类的成员函数，从而实现静态多态</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template &lt;typename Derived&gt;</span><br><span class="line">class Base &#123;</span><br><span class="line">public:</span><br><span class="line">    void interface() &#123;</span><br><span class="line">        static_cast&lt;Derived*&gt;(this)-&gt;implementation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Derived : public Base&lt;Derived&gt; &#123;</span><br><span class="line">public:</span><br><span class="line">    void implementation() &#123;</span><br><span class="line">        std::cout &lt;&lt; &quot;Derived implementation\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>类型擦除</strong></p>
<blockquote>
<p>类型擦除是指在编程中消除或隐藏原有类型，以获得更好的扩展性、减少耦合和简化代码，在 C++ 中，有多种实现类型擦除的方法，每种方法都有其优缺点。以下是几种常见的类型擦除方法及其详细说明</p>
</blockquote>
<p><em>多态擦除类型</em> ：通过将派生类型转换为基类型，实现多态调用</p>
<p><code>优点：</code> 实现简单，易于理解</p>
<p><code>缺点：</code> 仅是部分类型擦除，依赖于继承关系，导致对象间的耦合</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct BaseClass &#123;</span><br><span class="line">    virtual std::string getName() const = 0;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct Bar : BaseClass &#123;</span><br><span class="line">    std::string getName() const override &#123;</span><br><span class="line">        return &quot;Bar&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct Foo : BaseClass &#123;</span><br><span class="line">    std::string getName() const override &#123;</span><br><span class="line">        return &quot;Foo&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void printName(std::vector&lt;const BaseClass*&gt; vec) &#123;</span><br><span class="line">    for(auto v : vec) std::cout &lt;&lt; v-&gt;getName() &lt;&lt; &quot;\n&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>模板擦除类型</em> ：通过模板抽象不同类型的共同行为</p>
<p><code>优点：</code> 降低耦合，提高代码的灵活性</p>
<p><code>缺点：</code> 基本类型仍需指定，未完全消除类型信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 在这个例子中，printName 函数模板可以接受任何具有 getName 方法的对象</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">void printName(const T&amp; obj) &#123;</span><br><span class="line">    std::cout &lt;&lt; obj.getName() &lt;&lt; &quot;\n&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>容器擦除类型</em> ： 将多种类型封装在一个容器中，如 boost::variant</p>
<p><code>优点：</code> 实现类型擦除，支持多种类型</p>
<p><code>缺点：</code> 容器类型需事先定义，不支持动态类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using Shape = std::variant&lt;Circle, Square, Triangle&gt;;</span><br><span class="line">struct GenericInvoker &#123;</span><br><span class="line">    template&lt;typename T&gt;</span><br><span class="line">    void operator()(T&amp; shape) const &#123;</span><br><span class="line">        shape.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void drawShapes(const std::vector&lt;Shape&gt;&amp; shapes) &#123;</span><br><span class="line">    for (const auto&amp; shape : shapes) &#123;</span><br><span class="line">        std::visit(GenericInvoker(), shape);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>通用类型擦除类型</em> ：类似 C# 和 Java 中的 object，通过 boost::any 实现</p>
<p><code>优点：</code> 无需预先定义类型，灵活性高</p>
<p><code>缺点：</code> 取值时仍依赖于具体类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unordered_map&lt;string, boost::any&gt; m_creatorMap;</span><br><span class="line"></span><br><span class="line">m_creatorMap.insert(make_pair(strKey, new T)); // T may be any type</span><br><span class="line"></span><br><span class="line">boost::any obj = m_creatorMap[strKey];</span><br><span class="line"></span><br><span class="line">T t = boost::any_cast&lt;T&gt;(obj);</span><br></pre></td></tr></table></figure>

<p><em>闭包擦除类型</em> ：利用 C++11 的闭包（ lambda 表达式 ），实现函数式编程风格</p>
<p><code>优点：</code> 抽象出公共行为，无需关心具体类型，解决前四种方式的局限性</p>
<p><code>缺点：</code> 实现复杂</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">std::map&lt;const char, std::function&lt;double(double, double)&gt;&gt; dispTable&#123;</span><br><span class="line">    &#123;&#x27;+&#x27;, add&#125;,</span><br><span class="line">    &#123;&#x27;-&#x27;, Sub()&#125;,</span><br><span class="line">    &#123;&#x27;*&#x27;, std::bind(multThree, 1, _1, _2)&#125;,</span><br><span class="line">    &#123;&#x27;/&#x27;, [](double a, double b)&#123; return a / b; &#125;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="泛型编程"><a href="#泛型编程" class="headerlink" title="泛型编程"></a>泛型编程</h2><blockquote>
<p>泛型编程的核心思想是通过模板（ Templates ）来实现，使得函数和类能够适用于多种数据类型，编写独立于特定类型的算法和数据结构，原则：算法与数据结构分离、通过迭代器作为中介、类型安全下的代码复用</p>
</blockquote>
<h3 id="泛型编程的典范"><a href="#泛型编程的典范" class="headerlink" title="泛型编程的典范"></a>泛型编程的典范</h3><p><strong>容器</strong></p>
<blockquote>
<p>如动态数组、链表、树等数据结构的通用实现</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;list&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line"></span><br><span class="line">// 通用算法处理不同容器</span><br><span class="line">template &lt;typename Container&gt;</span><br><span class="line">void processContainer(Container&amp; c) &#123;</span><br><span class="line">    for (auto&amp; elem : c) &#123;</span><br><span class="line">        // 处理元素</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    std::vector&lt;int&gt; vec = &#123;1, 2, 3&#125;;</span><br><span class="line">    std::list&lt;std::string&gt; lst = &#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;&#125;;</span><br><span class="line">    std::map&lt;int, std::string&gt; map = &#123;&#123;1, &quot;one&quot;&#125;, &#123;2, &quot;two&quot;&#125;&#125;;</span><br><span class="line">    </span><br><span class="line">    processContainer(vec);</span><br><span class="line">    processContainer(lst);</span><br><span class="line">    processContainer(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>迭代器</strong></p>
<blockquote>
<p>C++ 标准库中的泛型算法（ 如 find, sort, copy 等 ）都是通过迭代器来操作容器的。这些算法不直接作用于容器，而是通过迭代器来访问和修改容器中的元素。这种设计使得算法可以独立于容器的类型，从而实现了真正的泛型编程</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template &lt;typename InputIt, typename T&gt;</span><br><span class="line">InputIt find(InputIt first, InputIt last, const T&amp; value) &#123;</span><br><span class="line">    for (; first != last; ++first) &#123;</span><br><span class="line">        if (*first == value) &#123;</span><br><span class="line">            return first;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return last;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    std::vector&lt;int&gt; vec = &#123;1, 2, 3, 4, 5&#125;;</span><br><span class="line">    auto it = find(vec.begin(), vec.end(), 3);</span><br><span class="line">    if (it != vec.end()) &#123;</span><br><span class="line">        std::cout &lt;&lt; &quot;Found: &quot; &lt;&lt; *it &lt;&lt; &quot;\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>算法</strong></p>
<blockquote>
<p>排序、查找等算法适配任意可比较类型</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    std::vector&lt;int&gt; numbers = &#123;5, 2, 9, 1, 5, 6&#125;;</span><br><span class="line">    </span><br><span class="line">    // 排序</span><br><span class="line">    std::sort(numbers.begin(), numbers.end());</span><br><span class="line">    </span><br><span class="line">    // 反转</span><br><span class="line">    std::reverse(numbers.begin(), numbers.end());</span><br><span class="line">    </span><br><span class="line">    // 查找</span><br><span class="line">    auto pos = std::find(numbers.begin(), numbers.end(), 5);</span><br><span class="line">    </span><br><span class="line">    // 累加</span><br><span class="line">    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="策略模式与泛型"><a href="#策略模式与泛型" class="headerlink" title="策略模式与泛型"></a>策略模式与泛型</h3><blockquote>
<p><strong>策略模式：</strong> 是一种行为设计模式，它定义了一系列算法，并将每个算法封装起来，使它们可以互相替换。策略模式让算法独立于使用它的客户端而变化。在 C++ 中，策略模式通常通过继承和多态来实现，但也可以结合泛型编程来增强其灵活性和通用性</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template &lt;typename T, typename Compare = std::less&lt;T&gt;&gt;</span><br><span class="line">class PriorityQueue &#123;</span><br><span class="line">    std::vector&lt;T&gt; data;</span><br><span class="line">    Compare comp;</span><br><span class="line">    </span><br><span class="line">public:</span><br><span class="line">    void push(const T&amp; value) &#123;</span><br><span class="line">        data.push_back(value);</span><br><span class="line">        std::push_heap(data.begin(), data.end(), comp);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    void pop() &#123;</span><br><span class="line">        std::pop_heap(data.begin(), data.end(), comp);</span><br><span class="line">        data.pop_back();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    const T&amp; top() const &#123; return data.front(); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    // 默认最小堆</span><br><span class="line">    PriorityQueue&lt;int&gt; minHeap;</span><br><span class="line">    </span><br><span class="line">    // 最大堆</span><br><span class="line">    PriorityQueue&lt;int, std::greater&lt;int&gt;&gt; maxHeap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="泛型编程高级技巧"><a href="#泛型编程高级技巧" class="headerlink" title="泛型编程高级技巧"></a>泛型编程高级技巧</h3><p><strong>标签分发（Tag Dispatching）</strong></p>
<blockquote>
<p><strong>标签分发的核心思想是：</strong> 通过定义一些空类作为标签（ tags ），然后在函数模板中使用这些标签作为参数，从而实现基于类型属性的函数重载。编译器会根据传入的标签类型选择合适的函数版本</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct input_iterator_tag &#123;&#125;;</span><br><span class="line">struct random_access_iterator_tag &#123;&#125;;</span><br><span class="line"></span><br><span class="line">template &lt;typename Iter&gt;</span><br><span class="line">void advance_impl(Iter&amp; it, int n, input_iterator_tag) &#123;</span><br><span class="line">    while (n-- &gt; 0) ++it;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &lt;typename Iter&gt;</span><br><span class="line">void advance_impl(Iter&amp; it, int n, random_access_iterator_tag) &#123;</span><br><span class="line">    it += n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &lt;typename Iter&gt;</span><br><span class="line">void advance(Iter&amp; it, int n) &#123;</span><br><span class="line">    using category = typename std::iterator_traits&lt;Iter&gt;::iterator_category;</span><br><span class="line">    advance_impl(it, n, category&#123;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>SFINAE (替换失败不是错误)</strong></p>
<blockquote>
<p><strong>SFINAE 的核心思想是：</strong> 当编译器尝试将模板参数替换为实际类型时，如果替换失败，编译器不会报错，而是忽略该特化，继续尝试其他可能的实例化。这种机制使得开发者可以控制模板的重载行为，从而实现更精细的类型约束和条件编译</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template &lt;typename T&gt;</span><br><span class="line">class has_size &#123;</span><br><span class="line">    using yes = char[1];</span><br><span class="line">    using no = char[2];</span><br><span class="line"></span><br><span class="line">    template &lt;typename U&gt; </span><br><span class="line">    static auto test(U* p) -&gt; decltype(p-&gt;size(), yes&#123;&#125;);</span><br><span class="line">    </span><br><span class="line">    template &lt;typename&gt; </span><br><span class="line">    static no&amp; test(...);</span><br><span class="line">    </span><br><span class="line">public:</span><br><span class="line">    static const bool value = sizeof(test&lt;T&gt;(nullptr)) == sizeof(yes);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">std::enable_if_t&lt;has_size&lt;T&gt;::value, void&gt; printSize(const T&amp; obj) &#123;</span><br><span class="line">    std::cout &lt;&lt; &quot;Size: &quot; &lt;&lt; obj.size() &lt;&lt; &quot;\n&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">std::enable_if_t&lt;!has_size&lt;T&gt;::value, void&gt; printSize(const T&amp;) &#123;</span><br><span class="line">    std::cout &lt;&lt; &quot;No size method\n&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="现代C-泛型编程特性"><a href="#现代C-泛型编程特性" class="headerlink" title="现代C++泛型编程特性"></a>现代C++泛型编程特性</h3><p><strong>auto 与 decltype</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template &lt;typename Container&gt;</span><br><span class="line">auto getFirst(Container&amp; c) -&gt; decltype(c.front()) &#123;</span><br><span class="line">    return c.front();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &lt;typename T1, typename T2&gt;</span><br><span class="line">auto add(T1 a, T2 b) -&gt; decltype(a + b) &#123;</span><br><span class="line">    return a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>完美转发</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template &lt;typename... Args&gt;</span><br><span class="line">void logAndCreate(Args&amp;&amp;... args) &#123;</span><br><span class="line">    std::cout &lt;&lt; &quot;Creating object\n&quot;;</span><br><span class="line">    // 完美转发参数</span><br><span class="line">    T obj(std::forward&lt;Args&gt;(args)...);</span><br><span class="line">    return obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="泛型编程注意"><a href="#泛型编程注意" class="headerlink" title="泛型编程注意"></a>泛型编程注意</h3><p><strong>1. 约束模板参数：</strong> 使用概念或 <code>static_assert</code> 确保类型满足要求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template &lt;typename T&gt;</span><br><span class="line">requires std::copyable&lt;T&gt;</span><br><span class="line">void safeCopy(T a, T b) &#123; ... &#125;</span><br></pre></td></tr></table></figure>

<p><strong>2. 避免不必要的泛化：</strong> 只在真正需要复用代码时使用模板</p>
<p><strong>3. 提供清晰的错误信息：</strong> 使用 <code>static_assert</code> 和概念改进错误消息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template &lt;typename T&gt;</span><br><span class="line">void process(T value) &#123;</span><br><span class="line">    static_assert(std::is_arithmetic_v&lt;T&gt;, </span><br><span class="line">                 &quot;T must be an arithmetic type&quot;);</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4. 考虑性能影响：</strong> 模板实例化可能导致代码膨胀</p>
<p><strong>5. 使用类型别名简化复杂类型</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template &lt;typename T&gt;</span><br><span class="line">using Matrix = std::vector&lt;std::vector&lt;T&gt;&gt;;</span><br><span class="line"></span><br><span class="line">Matrix&lt;double&gt; rotation(3, std::vector&lt;double&gt;(3));</span><br></pre></td></tr></table></figure>

<h1 id="3-吃透-STL"><a href="#3-吃透-STL" class="headerlink" title="3. 吃透 STL"></a>3. 吃透 STL</h1><blockquote>
<p>STL 是 C++ 标准库的一部分，提供了丰富的数据结构、算法和迭代器，用于简化和加速常见的编程任务。STL 的设计基于泛型编程，允许开发者在处理不同类型的数据时使用统一的接口，而不必重复编写不同的数据结构和算法。STL 的核心组件包括容器（ Containers ）、迭代器（ Iterators ）和算法（ Algorithms ）</p>
</blockquote>
<p><strong>容器</strong></p>
<blockquote>
<p> 深刻理解每种容器的底层数据结构（ vector 是动态数组，list 是双向链表，map&#x2F;set 通常是红黑树，<code>unordered_map/set</code> 是哈希表 ），这是选择合适容器的依据，理解迭代器失效规则至关重要</p>
</blockquote>
<p><strong>1. 顺序容器</strong></p>
<p><em>vector</em></p>
<ul>
<li><strong>vector：</strong> 底层基于连续内存块实现，通过三个指针管理空间</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template &lt;typename T, typename Alloc = allocator&lt;T&gt;&gt; </span><br><span class="line">class vector &#123; </span><br><span class="line">private:</span><br><span class="line">    T* start;       // 指向内存块的起始位置 </span><br><span class="line">    T* finish;      // 指向已使用内存的末尾（size = finish - start）</span><br><span class="line">    T* end_of_storage;  // 指向内存块的末尾（capacity = end_of_storage - start）</span><br><span class="line">    Alloc alloc;    // 空间配置器（管理内存分配/释放）</span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure>
<p>当调用 <code>push_back</code>、<code>emplace_back</code> 等添加元素的操作时，会检查 if (size() &#x3D;&#x3D; capacity()) ，即满载，向其添加元素会导致扩容</p>
<p><em><strong>扩容详细过程</strong></em></p>
<blockquote>
<p><strong>默认策略：</strong> 原容量的 2 倍（ 如 libstdc++ ）或 1.5 倍（ 部分实现，如 libc++ ），Visual Studio ( VS ) 通常会扩容现有容器容量的 50%，GCC 和 Clang 通常会扩容现有容器容量的 100%（ 即两倍 ）。特殊情况：若原容量为0（ 空容器 ），则新容量设为最小容量（ 如1或4，取决于实现 ）。例如：<code>vector&lt;int&gt; v</code>，初始 capacity&#x3D;0，第一次 <code>push_back</code> 后 capacity&#x3D;1；第二次 <code>push_back</code> 时 capacity 扩容为2；第三次扩容为4，依此类推</p>
</blockquote>
<p><strong>1. 分配新内存：</strong> 完全弃用现有的内存空间，重新申请更大的内存空间，通过<code>alloc.allocate(new_capacity) </code>申请一块连续的新内存（大小为 <code>new_capacity * sizeof(T)</code> ）</p>
<p><strong>2. 拷贝旧数据：</strong> 将旧内存空间中的数据按原有顺序移动到新的内存空间中。对于 POD 类型（ 如 int、char ）：直接用 <code>memcpy</code> 拷贝旧内存到新内存（ 高效 ）。对于自定义类型：调用拷贝构造函数（ T(const T&amp;) ）或移动构造函数（ T(T&amp;&amp;)，C++11+ ）拷贝元素。若元素是大型对象（ 如包含动态内存的类 ），拷贝成本极高。例如：<code>vector&lt;BigObject&gt; v</code>，扩容时需逐个拷贝 BigObject 对象，若 BigObject 的拷贝构造函数复杂（ 如深拷贝 ），则性能急剧下降</p>
<p><strong>3. 释放旧内存：</strong> 最后将旧的内存空间释放，通过 <code>alloc.deallocate(start,  old_capacity)</code> 释放旧内存，并将 start 指向新内存，finish 指向新内存的原元素末尾，<code>end_of_storage</code> 指向新内存的末尾</p>
<p><strong>4. 插入新元素：</strong> 将新元素插入到 finish 位置，finish 自增1</p>
<p><em>底层实现细节： vector 的内存分配完全由 allocator 管理（ 如 <code>std::allocator</code> ）。allocator 负责：allocate(n)：申请n个元素的连续内存（ 未构造对象 ）；construct(p, val)：在p指向的内存构造对象（ 调用构造函数 ）；deallocate(p, n)：释放p指向的n个元素内存；destroy(p)：销毁 p 指向的对象（ 调用析构函数 ）</em></p>
<p><em><strong>性能影响与优化</strong></em></p>
<p><em>性能瓶颈：</em></p>
<ol>
<li><p><strong>拷贝成本：</strong> 当存储大型对象或自定义类型时，频繁扩容会导致大量拷贝操作，性能下降明显（如 <code>vector&lt;vector&lt;int&gt;&gt;</code>，扩容时需拷贝所有子 vector ）</p>
</li>
<li><p><strong>迭代器失效：</strong> 扩容操作会导致与之相关的指针、引用和迭代器失效，（ 如 auto it &#x3D; v.begin();  v.push_back(1);  &#x2F;&#x2F; it失效 ），因为旧的内存空间被释放，新的内存空间被分配。因此，在进行连续插入或删除操作时，需要更新迭代器，否则第一次插入或删除后，迭代器就会失效</p>
</li>
</ol>
<p><em>优化策略：</em></p>
<p><strong>1. 提前预留容量：</strong> 使用 reserve(n) 函数提前分配 n 个元素的容量，避免频繁扩容。例如：<code>vector&lt;int&gt; v; v.reserve(1000);</code> ，此时 capacity() 变为 1000，后续 <code>push_back</code> 不会触发扩容（ 直到 size() 达到1000 ）</p>
<p><strong>2. 使用 emplace_back 替代 push_back ：</strong> <code>emplace_back</code> 直接在容器内存中构造对象（ 调用构造函数 ），避免临时对象的拷贝（ 如 <code>v.emplace_back(1,  &quot;hello&quot;) </code>，直接构造<code>MyClass(1, &quot;hello&quot;)</code> ，而 <code>push_back(MyClass(1, &quot;hello&quot;))</code> 需要先构造临时对象，再拷贝 ）</p>
<p><strong>3. 避免存储大型对象：</strong> 若需存储大型对象，建议存储指针（ 如 <code>vector&lt;BigObject*&gt;</code> ）或智能指针（ 如 <code>vector&lt;std::unique_ptr&lt;BigObject&gt;&gt;</code> ），这样扩容时只需拷贝指针（ 成本极低 ）</p>
<p><em>list</em></p>
<ul>
<li><strong>list：</strong> 底层实现为带头节点的双向循环链表。每个节点包含数据和两个指针，分别指向其前一个节点和后一个节点。这种结构使得 list 在任意位置进行插入和删除操作的时间复杂度为 O(1)，但不支持随机访问，访问某个元素的时间复杂度为 O(n），内存非连续，节点在堆中动态分配，无连续内存要求，因此不存在类似 vector 的 “扩容” 概念</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct ListNode &#123;</span><br><span class="line">    T data;                // 存储数据 </span><br><span class="line">    ListNode* prev;        // 指向前驱节点</span><br><span class="line">    ListNode* next;        // 指向后继节点</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>头节点（ Dummy Node ）：不存储有效数据，其 prev 指向尾节点，next 指向首节点，形成循环结构</p>
<p><em><strong>节点创建与内存管理</strong></em></p>
<p>当插入新元素时：</p>
<blockquote>
<p><strong>1. 动态分配节点内存：</strong> 当需要在某个位置插入一个新元素时，首先创建一个新的节点</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ListNode* new_node = allocator.allocate(1);   // 调用分配器申请单个节点内存 </span><br><span class="line">allocator.construct(&amp;new_node-&gt;data,  val);   // 在节点上构造对象</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>2. 调整指针链接：</strong> 插入位置定位，通过迭代器找到插入点 pos，调整相邻节点指针</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 调整相邻节点指针</span><br><span class="line">void insert(iterator pos, const T&amp; val) &#123;</span><br><span class="line">    Node* pNewNode = new Node(val);</span><br><span class="line">    Node* pCur = pos._node;</span><br><span class="line">    pNewNode-&gt;_prev = pCur-&gt;_prev;// 新节点前驱 = 原位置前驱</span><br><span class="line">    pNewNode-&gt;_next = pCur; // 新节点后继 = 原位置节点 </span><br><span class="line">    pNewNode-&gt;_prev-&gt;_next = pNewNode;// 原前驱的后继指向新节点 </span><br><span class="line">    pCur-&gt;_prev = pNewNode;// 原位置前驱指向新节点 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>3. 无预分配与搬移：</strong> 每次插入仅新增一个节点，无需整体内存迁移，时间复杂度恒为 O(1)</p>
</blockquote>
<p>当删除操作时：</p>
<blockquote>
<p>当需要删除某个位置的元素时，只需调整相邻节点的指针，并释放该节点的空间</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void erase(iterator pos) &#123;</span><br><span class="line">    Node* cur = pos._node;</span><br><span class="line">    Node* prev = cur-&gt;_prev;</span><br><span class="line">    Node* next = cur-&gt;_next;</span><br><span class="line">    prev-&gt;_next = next;</span><br><span class="line">    next-&gt;_prev = prev;</span><br><span class="line">    delete cur;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>性能优化策略：</em></p>
<ol>
<li>list 是基于双向链表实现的容器，适合频繁的插入和删除操作</li>
<li>每次插入或删除一个元素时，只需配置或释放一个节点的空间，因此不需要像 std::vector 那样进行扩容操作</li>
<li>由于节点不是连续存储的，因此不支持随机访问，访问某个元素的时间复杂度为 O(n)</li>
</ol>
<p><em>deque</em></p>
<ul>
<li><strong>deque（双端队列）：</strong> 以空间碎片化换取高效的双端操作，避免 vector 扩容时的整体拷贝，<strong>双端队列：</strong> 通过分段连续空间实现逻辑上的连续线性空间，迭代器需动态检测缓冲区边界，遍历效率低于 vector（ 推荐 vector 排序后转存 deque ），实现了高效地在序列两端添加或删除元素的能力。其扩容机制主要涉及 map 数组的扩展和 node 的分配，确保了在需要时能够动态地增加存储空间</li>
</ul>
<p><strong>核心组件</strong></p>
<ol>
<li><p><strong>中控器（map）：</strong> 本质是动态数组（ 如T** ），存储指向各缓冲区的指针（称为节点），初始 map 大小由实现决定（ 如 GCC 默认为8 ），每个节点指向固定大小的缓冲区（ 如512字节 ）</p>
</li>
<li><p><strong>缓冲区（Buffer）：</strong> 实际存储元素的连续空间，默认大小与元素类型相关（ sizeof(T)*512 ）</p>
</li>
<li><p><strong>迭代器结构包含四个指针：</strong> cur（ 当前元素 ）、first&#x2F;last（ 缓冲区首尾 ）、node（ 指向map中的节点 ），通过重载 operator++&#x2F;– 处理跨缓冲区移动，维护 “逻辑连续” 的假象</p>
</li>
</ol>
<p><strong>deque</strong> 的迭代器设计复杂，因为它需要处理多个不连续的内存块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_Self&amp; operator++() _GLIBCXX_NOEXCEPT &#123;</span><br><span class="line">    ++_M_cur;</span><br><span class="line">    if (_M_cur == _M_last) &#123; // 进入下一个 node</span><br><span class="line">        _M_set_node(_M_node + 1);</span><br><span class="line">        _M_cur = _M_first;</span><br><span class="line">    &#125;</span><br><span class="line">    return *this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_Self&amp; operator--() _GLIBCXX_NOEXCEPT &#123;</span><br><span class="line">    if (_M_cur == _M_first) &#123; // 进入上一个 node</span><br><span class="line">        _M_set_node(_M_node - 1);</span><br><span class="line">        _M_cur = _M_last;</span><br><span class="line">    &#125;</span><br><span class="line">    --_M_cur;</span><br><span class="line">    return *this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>扩容机制</em></p>
<blockquote>
<p>deque 的扩容主要涉及 map 数组的扩展和 node 的分配。当 map 数组已满时，需要申请更大的连续空间供 map 数组使用，并将原有数据拷贝到新的 map 数组中，然后释放旧的空间</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// deque扩容核心伪代码</span><br><span class="line">void push_back(const T&amp; value) &#123;</span><br><span class="line">    if (尾缓冲区有空间) &#123;</span><br><span class="line">        在尾缓冲区插入value;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        分配新缓冲区;</span><br><span class="line">        if (map空间不足) &#123;</span><br><span class="line">            新map_size = 旧map_size * 2;</span><br><span class="line">            创建新map，拷贝原指针并预留头部空位;</span><br><span class="line">            释放旧map;</span><br><span class="line">        &#125;</span><br><span class="line">        将新缓冲区指针加入map尾部;</span><br><span class="line">        在新缓冲区头部插入value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>扩容时机: 当 map 数组已满时</p>
</li>
<li><p>扩容方式: 申请一块更大的连续空间供 map 数组使用，将原有数据（ 很多指针 ）拷贝到新的 map 数组中，然后释放旧 map 数组的空间（ 不释放 map 数组中的指针指向的空间 ）</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void _M_reserve_map_at_back(size_t __nodes_to_add = 1) &#123;</span><br><span class="line">    if (__nodes_to_add + 1 &gt; this-&gt;_M_impl._M_map_size - (this-&gt;_M_impl._M_finish._M_node - this-&gt;_M_impl._M_map))</span><br><span class="line">        _M_reallocate_map(__nodes_to_add, false);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void _M_reallocate_map(size_t __nodes_to_add, bool __add_at_front) &#123;</span><br><span class="line">    const size_t __old_num_nodes = this-&gt;_M_impl._M_finish._M_node - this-&gt;_M_impl._M_start._M_node + 1;</span><br><span class="line">    const size_t __new_num_nodes = __old_num_nodes + __nodes_to_add;</span><br><span class="line"></span><br><span class="line">    _Map_pointer __new_nstart;</span><br><span class="line">    if (this-&gt;_M_impl._M_map_size &gt; 2 * __new_num_nodes) &#123;</span><br><span class="line">        __new_nstart = this-&gt;_M_impl._M_map + (this-&gt;_M_impl._M_map_size - __new_num_nodes) / 2 + (__add_at_front ? __nodes_to_add : 0);</span><br><span class="line">        if (__new_nstart &lt; this-&gt;_M_impl._M_start._M_node)</span><br><span class="line">            std::copy(this-&gt;_M_impl._M_start._M_node, this-&gt;_M_impl._M_finish._M_node + 1, __new_nstart);</span><br><span class="line">        else</span><br><span class="line">            std::copy_backward(this-&gt;_M_impl._M_start._M_node, this-&gt;_M_impl._M_finish._M_node + 1, __new_nstart + __old_num_nodes);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        size_t __new_map_size = this-&gt;_M_impl._M_map_size + std::max(this-&gt;_M_impl._M_map_size, __nodes_to_add) + 2;</span><br><span class="line">        _Map_pointer __new_map = _M_allocate_map(__new_map_size);</span><br><span class="line">        __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2 + (__add_at_front ? __nodes_to_add : 0);</span><br><span class="line">        std::copy(this-&gt;_M_impl._M_start._M_node, this-&gt;_M_impl._M_finish._M_node + 1, __new_nstart);</span><br><span class="line">        _M_deallocate_map(this-&gt;_M_impl._M_map, this-&gt;_M_impl._M_map_size);</span><br><span class="line">        this-&gt;_M_impl._M_map = __new_map;</span><br><span class="line">        this-&gt;_M_impl._M_map_size = __new_map_size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    this-&gt;_M_impl._M_start._M_set_node(__new_nstart);</span><br><span class="line">    this-&gt;_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>array</em></p>
<blockquote>
<p>固定大小的数组，提供常数时间访问，其底层实现基于连续内存的线性排列，并且不维护任何多余的数据，由于 array 的大小在编译时确定且固定，因此它不支持扩容，使用 std::tuple ，重载了相关函数，支持 [] 操作符以及 begin(), end(), front() 等标准接口</p>
</blockquote>
<p><em>forward_list</em></p>
<blockquote>
<p><strong>forward_list</strong> 是 C++11 引入的一种单向链表容器。其底层数据结构是一个单链表，每个节点只包含一个指向下一个节点的指针和存储数据的成员变量，按需为每个节点分配内存，无需预先分配连续空间，仅需调整指针，无需移动元素，单链表节点比双向链表更节省内存，仅支持前向迭代，无法反向遍历</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template &lt;typename T&gt;</span><br><span class="line">struct ForwardListNode &#123; </span><br><span class="line">    T data;               // 数据域</span><br><span class="line">    ForwardListNode* next; // 指向 next 节点的指针 </span><br><span class="line">    // 构造函数（用于 emplace 操作）</span><br><span class="line">    template &lt;typename... Args&gt;</span><br><span class="line">    ForwardListNode(Args&amp;&amp;... args) : data(std::forward&lt;Args&gt;(args)...), next(nullptr) &#123;&#125; </span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure>

<p><strong>forward_list 的 “插入” 与 “内存分配” 过程：</strong></p>
<ol>
<li>分配节点内存：使用分配器（ Allocator ）为新节点分配内存（ 默认使用 std::allocator ）</li>
<li>构造元素：<ul>
<li>若使用 <code>push_front(const T&amp; value)</code> ：拷贝 value 到节点的数据域</li>
<li>若使用 <code>emplace_front(Args&amp;&amp;... args)</code> ：直接在节点内存中原地构造元素（ 避免拷贝&#x2F;移动，更高效 ）</li>
</ul>
</li>
<li>链接节点：将新节点的 next 指针指向原链表的头节点，再将链表的头指针（ head ）指向新节点</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template &lt;typename T, typename Allocator&gt;</span><br><span class="line">void forward_list&lt;T, Allocator&gt;::emplace_front(Args&amp;&amp;... args) &#123; </span><br><span class="line">    // 1. 分配节点内存（通过分配器） </span><br><span class="line">    Node* new_node = allocator_traits::allocate(alloc_, 1); </span><br><span class="line">    try &#123; </span><br><span class="line">        // 2. 原地构造元素（避免拷贝）</span><br><span class="line">        allocator_traits::construct(alloc_, new_node, std::forward&lt;Args&gt;(args)...); </span><br><span class="line">    &#125; catch (...) &#123; </span><br><span class="line">        // 构造失败，释放内存 </span><br><span class="line">        allocator_traits::deallocate(alloc_, new_node, 1); </span><br><span class="line">        throw;</span><br><span class="line">    &#125; </span><br><span class="line">    // 3. 链接新节点到链表头部 </span><br><span class="line">    new_node-&gt;next = head_; </span><br><span class="line">    head_ = new_node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2. 关联容器</strong></p>
<p><em>set</em></p>
<ul>
<li><strong>set：</strong> 唯一元素集合，支持快速搜索，set 的底层实现是基于红黑树（ Red-Black Tree ）的数据结构。红黑树是一种自平衡的二叉查找树（ Balanced BST ），它确保了在最坏情况下的操作时间复杂度为 O(log n)，红黑树的平衡性直接决定了 set 的扩容效率，无需像动态数组一样重新分配内存空间</li>
</ul>
<p><em>扩容过程：红黑树的动态调整</em></p>
<blockquote>
<p>set 的扩容并非传统意义上的内存扩展，而是通过红黑树的插入&#x2F;删除操作动态调整结构实现</p>
</blockquote>
<p><strong>1. 插入新元素：</strong> 通过二叉搜索找到合适位置，插入新节点（ 默认为红色 ），若插入节点的父节点为红色，则可能违反红黑树规则，需通过旋转（ 左旋&#x2F;右旋 ）和重新着色恢复平衡，set 的 insert() 返回 <code>pair&lt;iterator, bool&gt;</code>（ 成功状态 ）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    std::set&lt;int&gt; s;</span><br><span class="line">    s.insert(10); // 插入元素 10</span><br><span class="line">    s.insert(5);  // 插入元素 5</span><br><span class="line">    s.insert(15); // 插入元素 15</span><br><span class="line"></span><br><span class="line">    for (const auto&amp; elem : s) &#123;</span><br><span class="line">        std::cout &lt;&lt; elem &lt;&lt; &quot; &quot;; // 输出: 5 10 15</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2. 删除元素：</strong> 找到目标节点，若节点有两个子节点，需找到其前驱或后继替代，删除可能导致黑高度变化，需通过旋转和重新着色修复平衡</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;set&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main() &#123; </span><br><span class="line">    set&lt;int&gt; s = &#123;1, 2, 3, 4, 5&#125;; </span><br><span class="line">    size_t count = s.erase(3);  // 删除键值3</span><br><span class="line">    cout &lt;&lt; &quot;删除数量：&quot; &lt;&lt; count &lt;&lt; endl; // 输出：1 </span><br><span class="line">    for (int x : s) cout &lt;&lt; x &lt;&lt; &quot; &quot;; // 输出：1 2 4 5 </span><br><span class="line">    return 0;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p><strong>3. 平衡调整的核心操作：</strong></p>
<blockquote>
<p><strong>左旋（Left Rotation）：</strong> 将右子节点提升为父节点，原父节点成为左子节点</p>
<p><strong>右旋（Right Rotation）：</strong> 将左子节点提升为父节点，原父节点成为右子节点</p>
<p><strong>重新着色：</strong> 通过改变节点颜色解决连续红色节点问题</p>
</blockquote>
<p><strong>总结：</strong> </p>
<blockquote>
<p>set 的扩容本质是红黑树的动态平衡调整，通过旋转和重新着色维护高效性，无需内存拷贝。这一特性使其在有序集合操作（ 如交并集 ）和高频插入&#x2F;删除场景中表现优异，但牺牲了内存连续性带来的缓存优势。理解红黑树的平衡机制是掌握 set 性能调优的关键</p>
</blockquote>
<p><em>multiset</em></p>
<ul>
<li><strong>multiset：</strong> 有序可重复元素集合，允许重复值，也支持快速搜索，底层实现也是基于红黑树</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    std::multiset&lt;int&gt; ms;</span><br><span class="line"></span><br><span class="line">    // 插入元素</span><br><span class="line">    ms.insert(5);</span><br><span class="line">    ms.insert(3);</span><br><span class="line">    ms.insert(7);</span><br><span class="line">    ms.insert(3); // 允许重复元素</span><br><span class="line"></span><br><span class="line">    // 遍历元素</span><br><span class="line">    std::cout &lt;&lt; &quot;Multiset elements: &quot;;</span><br><span class="line">    for (auto it = ms.begin(); it != ms.end(); ++it) &#123;</span><br><span class="line">        std::cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    // 删除元素</span><br><span class="line">    ms.erase(3); // 删除所有值为3的元素</span><br><span class="line"></span><br><span class="line">    // 再次遍历元素</span><br><span class="line">    std::cout &lt;&lt; &quot;Multiset elements after erase: &quot;;</span><br><span class="line">    for (auto it = ms.begin(); it != ms.end(); ++it) &#123;</span><br><span class="line">        std::cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>set 的 insert() 返回 <code>pair&lt;iterator, bool&gt;</code>（ 成功状态 ），multiset 始终返回新元素迭代器</li>
<li>set 拒绝重复插入；multiset 允许重复，通过 count() 或 <code>equal_range()</code> 统计&#x2F;访问相同元素</li>
<li>multiset 适合统计频率（ 如词频分析 ），但可能被 <code>unordered_multiset</code>（ 哈希表，O(1) 均摊 ）替代，后者无序但更快</li>
<li>迭代器失效：直接修改元素值会破坏红黑树结构（ 需先删除旧值再插入新值 ）</li>
<li>自定义排序：必须定义严格弱序（ operator&lt; ），否则未定义行为</li>
<li>哈希表容器 <code>unordered_set</code> 在无需排序时更高效（ O(1)查找 ），但失去有序性</li>
</ol>
<p><em>map</em></p>
<ul>
<li><strong>map</strong>：键值对映射，支持基于键的快速搜索，也是基于红黑树实现，每个节点包含四个字段：left、right、parent 和 rb（ 红黑标记 ）。left 和 right 分别指向节点的左子节点和右子节点，parent 指向父节点，rb 用于存储红黑树的红黑属性</li>
</ul>
<p><img src="https://upload-images.jianshu.io/upload_images/1976231-ad7acdd46f49989a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Mastering the C++17 STL"></p>
<p><strong>插入&#x2F;删除效率更高：</strong> 红黑树是 “近似平衡”（ 树高 ≤2log(n+1) ），插入&#x2F;删除时旋转次数最多2次；AVL树是 “严格平衡”（ 平衡因子≤1 ），插入&#x2F;删除时旋转次数最多 O(logn)次（ 如插入链状结构 ）。</p>
<p><strong>更适合频繁修改：</strong> map 的核心功能是 “动态维护键值对”（ 插入&#x2F;删除频繁 ），红黑树的低旋转次数大幅提升了修改效率</p>
<p>对比哈希表（ <code>unordered_map</code> ），map 的优势是有序性（ 支持范围查询，如 <code>lower_bound()</code>、<code>upper_bound() </code> ），且无哈希冲突风险（ <code>unordered_map</code> 在冲突严重时性能退化 ）</p>
<p><strong>总结</strong></p>
<blockquote>
<p>若需有序、频繁修改的键值对存储（ 如用户权限管理、交易记录索引 ），优先选 map；若需无序、快速查询（ 如缓存 ），选 <code>unordered_map</code>；若需连续存储（ 如数组 ），选 vector</p>
</blockquote>
<p><strong>3. 容器适配器</strong></p>
<p><em>stack</em></p>
<blockquote>
<p><strong>stack：</strong> 是一个容器适配器，它本身并不是一个容器，而是基于其他容器（ 如 deque、vector 或 list ）实现的。默认情况下，std::stack 使用 deque 作为其底层容器。这是因为 deque 提供了高效的随机访问、插入和删除操作，特别适合用作栈的底层容器。其核心逻辑是限制底层容器的接口，仅暴露栈操作（ 后进先出，LIFO ）</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template&lt;class T, class Container = std::deque&lt;T&gt;&gt;</span><br><span class="line">class stack &#123;</span><br><span class="line">protected:</span><br><span class="line">    Container c; // 底层容器</span><br><span class="line">public:</span><br><span class="line">    // 成员函数</span><br><span class="line">    bool empty() const &#123; return c.empty(); &#125;</span><br><span class="line">    size_t size() const &#123; return c.size(); &#125;</span><br><span class="line">    T&amp; top() &#123; return c.back(); &#125;</span><br><span class="line">    const T&amp; top() const &#123; return c.back(); &#125;</span><br><span class="line">    void push(const T&amp; x) &#123; c.push_back(x); &#125;</span><br><span class="line">    void pop() &#123; c.pop_back(); &#125;</span><br><span class="line">    void swap(stack&amp; other) &#123; std::swap(c, other.c); &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><em>一些关键成员函数及其底层实现：</em></p>
<ul>
<li><p><strong>empty()：</strong> 检查栈是否为空，通过调用底层容器的 empty() 函数实现</p>
</li>
<li><p><strong>size()：</strong> 返回栈中元素的数量，通过调用底层容器的 size() 函数实现</p>
</li>
<li><p><strong>top()：</strong> 返回栈顶元素的引用，通过调用底层容器的 back() 函数实现</p>
</li>
<li><p><strong>push(const T&amp; val)：</strong> 将元素压入栈顶，通过调用底层容器的 <code>push_back()</code> 函数实现</p>
</li>
<li><p><strong>pop()：</strong> 弹出栈顶元素，通过调用底层容器的 pop_back() 函数实现</p>
</li>
<li><p><strong>emplace(arg…)：</strong> 在栈顶直接构造一个对象，通过调用底层容器的 <code>emplace_back()</code> 函数实现</p>
</li>
<li><p><strong>swap(stack<T> &amp; other_stack)：</T></strong> 交换两个栈的内容，通过调用底层容器的 swap() 函数实现</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    // 创建一个默认使用 deque 作为底层容器的 stack</span><br><span class="line">    std::stack&lt;int&gt; stk;</span><br><span class="line"></span><br><span class="line">    // 使用 vector 作为底层容器的 stack</span><br><span class="line">    std::stack&lt;int, std::vector&lt;int&gt;&gt; stk_vector;</span><br><span class="line"></span><br><span class="line">    // 压入元素</span><br><span class="line">    stk.push(1);</span><br><span class="line">    stk.push(2);</span><br><span class="line">    stk.push(3);</span><br><span class="line"></span><br><span class="line">    // 输出栈顶元素</span><br><span class="line">    std::cout &lt;&lt; &quot;Top element: &quot; &lt;&lt; stk.top() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    // 弹出元素</span><br><span class="line">    stk.pop();</span><br><span class="line"></span><br><span class="line">    // 输出栈的大小</span><br><span class="line">    std::cout &lt;&lt; &quot;Stack size: &quot; &lt;&lt; stk.size() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    // 检查栈是否为空</span><br><span class="line">    std::cout &lt;&lt; &quot;Is stack empty? &quot; &lt;&lt; (stk.empty() ? &quot;Yes&quot; : &quot;No&quot;) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>queue</em></p>
<blockquote>
<p><strong>queue</strong> 是 C++ 标准模板库 ( STL ) 中的一种容器适配器，专门用于实现先进先出 ( FIFO ) 的数据结构。它通过封装一个底层容器来提供一组特定的成员函数来访问其元素。默认情况下，queue 使用 deque 作为其底层容器，但也可以指定 list 作为底层容器</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template&lt;typename T, typename Container = deque&lt;T&gt;&gt;  </span><br><span class="line">class queue &#123;  </span><br><span class="line">  protected:  </span><br><span class="line">    Container c;  // 底层容器（默认 deque）  </span><br><span class="line">  public:  </span><br><span class="line">    void push(const T&amp; value) &#123; c.push_back(value);  &#125;  </span><br><span class="line">    void pop() &#123; c.pop_front();  &#125;  </span><br><span class="line">    T&amp; front() &#123; return c.front();  &#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><em>queue 提供了以下主要成员函数：</em></p>
<ul>
<li><p><strong>empty()：</strong> 检查队列是否为空</p>
</li>
<li><p><strong>size()：</strong> 返回队列中元素的数量</p>
</li>
<li><p><strong>front()：</strong> 返回队列的第一个元素的引用</p>
</li>
<li><p><strong>back()：</strong> 返回队列的最后一个元素的引用</p>
</li>
<li><p><strong>push(const T&amp; x)：</strong> 在队列的末尾添加一个元素</p>
</li>
<li><p><strong>pop()：</strong> 移除队列的第一个元素</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    std::queue&lt;int&gt; iqueue;</span><br><span class="line"></span><br><span class="line">    // 向队列中添加元素</span><br><span class="line">    iqueue.push(1);</span><br><span class="line">    iqueue.push(2);</span><br><span class="line">    iqueue.push(3);</span><br><span class="line"></span><br><span class="line">    // 输出队列中的元素</span><br><span class="line">    while (!iqueue.empty()) &#123;</span><br><span class="line">        int i = iqueue.front();</span><br><span class="line">        std::cout &lt;&lt; i &lt;&lt; &quot; &quot;;</span><br><span class="line">        iqueue.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>deque 以分块内存实现 O(1) 头尾操作，但内存开销较 vector 高 10-15%</li>
<li>避免用 vector 作底层容器，<code>pop_front()</code> 会触发 O(n) 搬移</li>
<li>超大型元素（ &gt;128B ）用 list；固定大小队列用 <code>circular_buffer</code></li>
</ol>
<p><em>priority_queue</em></p>
<blockquote>
<p><strong>priority_queue</strong> 是 C++ 标准模板库 ( STL ) 中的一种容器适配器，用于实现优先队列。优先队列是一种特殊的队列，其中每个元素都有一个优先级，出队顺序取决于其优先级，而非插入顺序。默认情况下，<code>priority_queue</code> 是一个最大堆，即优先级最高的元素（ 通常是最大的元素 ）会被优先处理，<code>priority_queue</code> 的底层实现依赖于堆数据结构。堆是一种特殊的完全二叉树，其中每个节点的值都大于或等于其子节点的值（ 最大堆 ），或者每个节点的值都小于或等于其子节点的值（ 最小堆 ）。在 C++ STL 中，<code>priority_queue</code> 默认使用最大堆</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 默认构造函数，使用 vector 和 std::less&lt;T&gt;</span><br><span class="line">priority_queue&lt;int&gt; q1;</span><br><span class="line"></span><br><span class="line">// 使用自定义的比较函数</span><br><span class="line">priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; q2;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在 <code>priority_queue</code> 的构造过程中，首先根据传入的迭代器区间初始化底层容器 c，然后调用 <code>make_heap() </code>使用底层容器建堆。每次插入新元素时，调用 <code>push_heap() </code>调整堆结构；每次移除元素时，调用 <code>pop_heap()</code> 调整堆结构</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template &lt;class InputIterator&gt;</span><br><span class="line">priority_queue(Input_iterator first, Input_iterator last, const compare&amp; x)</span><br><span class="line">    : c(first, last), comp(x) &#123;</span><br><span class="line">    make_heap(c.begin(), c.end(), comp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>priority_queue 提供了以下核心操作：</em></p>
<p><strong>push(const value_type&amp; x)：</strong> 向优先队列中插入元素。插入后会自动调整堆结构以保持最大堆或最小堆的性质</p>
<p><strong>pop()：</strong> 移除优先队列中优先级最高的元素。移除后会自动调整堆结构以保持最大堆或最小堆的性质</p>
<p><strong>top()：</strong> 返回优先队列中优先级最高的元素，但不移除它</p>
<p><strong>empty()：</strong> 检查优先队列是否为空</p>
<p><strong>size()：</strong> 返回优先队列中元素的数量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    // 创建一个最大堆</span><br><span class="line">    std::priority_queue&lt;int&gt; maxHeap;</span><br><span class="line"></span><br><span class="line">    // 插入元素</span><br><span class="line">    maxHeap.push(10);</span><br><span class="line">    maxHeap.push(20);</span><br><span class="line">    maxHeap.push(15);</span><br><span class="line"></span><br><span class="line">    // 输出元素</span><br><span class="line">    while (!maxHeap.empty()) &#123;</span><br><span class="line">        std::cout &lt;&lt; maxHeap.top() &lt;&lt; &quot; &quot;; // 输出最大值</span><br><span class="line">        maxHeap.pop(); // 删除最大值</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    // 创建一个最小堆</span><br><span class="line">    std::priority_queue&lt;int, std::vector&lt;int&gt;, std::greater&lt;int&gt;&gt; minHeap;</span><br><span class="line"></span><br><span class="line">    // 插入元素</span><br><span class="line">    minHeap.push(10);</span><br><span class="line">    minHeap.push(20);</span><br><span class="line">    minHeap.push(15);</span><br><span class="line"></span><br><span class="line">    // 输出元素</span><br><span class="line">    while (!minHeap.empty()) &#123;</span><br><span class="line">        std::cout &lt;&lt; minHeap.top() &lt;&lt; &quot; &quot;; // 输出最小值</span><br><span class="line">        minHeap.pop(); // 删除最小值</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>总结：</em></p>
<blockquote>
<p><code>priority_queue</code> 是通过封装底层容器（ 默认为 vector ）并利用 STL 堆算法来实现的优先队列。它提供了高效的插入和删除操作，并且可以通过自定义比较函数来改变优先级规则</p>
</blockquote>
<p><strong>算法：</strong> 熟悉常用算法 ( find, sort, transform, accumulate 等 )，理解它们的复杂度。学会用 Lambda 和函数对象定制算法行为。了解 C++17 的并行算法。</p>
<p><strong>sort</strong></p>
<blockquote>
<p>STL的sort采用内省排序（ Introsort ），结合了快速排序（ Quick Sort ）、堆排序（ Heap Sort ）和插入排序（ Insertion Sort ），优化了快速排序的递归深度问题</p>
</blockquote>
<ol>
<li>选择枢轴（ Pivot ）（ 通常取中间元素 ）</li>
<li>分割（ Partition ）：将序列分为两部分，左半部分≤枢轴，右半部分≥枢轴</li>
<li>递归排序左右子序列</li>
</ol>
<p>当递归深度超过2log₂n（ n 为序列长度 ）时，切换为堆排序（ 避免快速排序的最坏情况O(n²) ）。<br>当子序列长度小于16时，切换为插入排序（ 小数据量下插入排序效率更高 ）</p>
<p>时间复杂度：平均 O(n log n)，最坏 O(n log n)（ 因堆排序优化 ）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;functional&gt; // 用于greater&lt;&gt; </span><br><span class="line"> </span><br><span class="line">int main() &#123; </span><br><span class="line">    std::vector&lt;int&gt; nums = &#123;3, 1, 4, 1, 5, 9, 2, 6&#125;; </span><br><span class="line">    </span><br><span class="line">    // 1. 默认升序排序（使用less&lt;&gt;）</span><br><span class="line">    std::sort(nums.begin(),  nums.end());  </span><br><span class="line">    std::cout &lt;&lt; &quot;升序: &quot;; </span><br><span class="line">    for (int num : nums) std::cout &lt;&lt; num &lt;&lt; &quot; &quot;; // 输出: 1 1 2 3 4 5 6 9</span><br><span class="line">    </span><br><span class="line">    // 2. 降序排序（使用greater&lt;&gt;）</span><br><span class="line">    std::sort(nums.begin(),  nums.end(),  std::greater&lt;int&gt;()); </span><br><span class="line">    std::cout &lt;&lt; &quot;\n降序: &quot;; </span><br><span class="line">    for (int num : nums) std::cout &lt;&lt; num &lt;&lt; &quot; &quot;; // 输出: 9 6 5 4 3 2 1 1</span><br><span class="line">    </span><br><span class="line">    // 3. 自定义排序（lambda表达式，按绝对值排序）</span><br><span class="line">    std::vector&lt;int&gt; nums2 = &#123;-3, 1, -4, 1, 5, -9, 2, 6&#125;; </span><br><span class="line">    std::sort(nums2.begin(),  nums2.end(),  [](int a, int b) &#123; </span><br><span class="line">        return std::abs(a) &lt; std::abs(b); </span><br><span class="line">    &#125;); </span><br><span class="line">    std::cout &lt;&lt; &quot;\n按绝对值升序: &quot;; </span><br><span class="line">    for (int num : nums2) std::cout &lt;&lt; num &lt;&lt; &quot; &quot;; // 输出: 1 1 2 -3 -4 5 6 -9</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>find</strong></p>
<blockquote>
<p>find 是 C++ 标准模板库（ STL ）中非变易算法（ Non-mutating Algorithm ）的典型代表，用于在指定区间内查找第一个等于目标值的元素。它定义在<code> &lt;algorithm&gt;</code> 头文件中，依赖迭代器遍历容器，不修改原始数据，find 的底层实现遵循线性遍历逻辑，核心是相等性比较（ &#x3D;&#x3D; 运算符 ）</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template &lt;class InputIterator, class T&gt;</span><br><span class="line">InputIterator find(InputIterator first, InputIterator last, const T&amp; value) &#123;</span><br><span class="line">    while (first != last &amp;&amp; *first != value) ++first;</span><br><span class="line">    return first;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上这段代码的核心逻辑是一个 while 循环，它会不断递增迭代器 first，直到 first 指向的元素等于目标值 value 或者 first 达到范围的末尾 last。如果找到了目标值，函数返回指向该值的迭代器；否则，返回 last 迭代器，表示未找到目标值</p>
<p><strong>关键特性</strong></p>
<blockquote>
<p><strong>相等性比较：</strong>  std::find 使用 &#x3D;&#x3D; 运算符判断元素是否相等，因此自定义类型必须重载 operator&#x3D;&#x3D;，否则无法编译</p>
<p><strong>线性时间复杂度：</strong> 最坏情况下需遍历整个区间（ 如目标值不存在 ），时间复杂度为 O(n)（ n为区间元素个数 ）</p>
<p><strong>第一个匹配项：</strong> 仅返回第一个满足条件的元素，若需查找所有匹配项，需循环调用 std::find</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line"> </span><br><span class="line">int main() &#123; </span><br><span class="line">    std::vector&lt;int&gt; numbers = &#123;1, 2, 3, 4, 5&#125;; </span><br><span class="line">    int target = 3;</span><br><span class="line"> </span><br><span class="line">    auto it = std::find(numbers.begin(),  numbers.end(),  target); </span><br><span class="line"> </span><br><span class="line">    if (it != numbers.end())  &#123; </span><br><span class="line">        numbers.erase(it);   // 删除找到的元素 </span><br><span class="line">        std::cout &lt;&lt; &quot;删除元素 &quot; &lt;&lt; target &lt;&lt; &quot; 后，容器内容：&quot;; </span><br><span class="line">        for (int num : numbers) &#123; </span><br><span class="line">            std::cout &lt;&lt; num &lt;&lt; &quot; &quot;; </span><br><span class="line">        &#125; </span><br><span class="line">        std::cout &lt;&lt; std::endl;</span><br><span class="line">    &#125; else &#123; </span><br><span class="line">        std::cout &lt;&lt; &quot;未找到元素 &quot; &lt;&lt; target &lt;&lt; std::endl;</span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>其他库组件：</strong> <code>string_view</code> ( 零拷贝字符串“视图” )、filesystem ( 跨平台文件操作 )、chrono ( 精确时间处理 )、regex ( 正则表达式 ) 等都是非常实用的现代库</p>
<h1 id="4-征服并发与内存模型"><a href="#4-征服并发与内存模型" class="headerlink" title="4. 征服并发与内存模型"></a>4. 征服并发与内存模型</h1><blockquote>
<p>C++11 引入了正式的内存模型，用于定义程序中不同线程间内存操作如何互相影响。内存模型的主要目标是提供一种机制，使得程序员可以理解和预测多线程程序的行为，特别是在涉及共享数据时</p>
</blockquote>
<h2 id="1-内存模型基础"><a href="#1-内存模型基础" class="headerlink" title="1. 内存模型基础"></a>1. 内存模型基础</h2><blockquote>
<p>内存模型主要关注两个方面：基本结构（ 与对象和内存位置的布局有关 ）和并发（ 与多线程环境下的操作顺序和可见性有关 ）。在 C++ 中，所有数据都是由对象构成，而这些对象存储在内存位置中。每个内存位置可以是一个标量类型（ 如 unsigned short 或 <code>my_class* </code>）的对象，或者是一系列相邻的位字段</p>
</blockquote>
<ol>
<li>每个变量占独立内存位置（ 位域除外 ），相邻位域共享同一位置</li>
<li>所有线程对同一对象的写操作必须形成全局一致序列</li>
<li>位域处理易引发数据竞争，需显式同步（ 如互斥锁 ）避免未定义行为</li>
</ol>
<h2 id="2-原子操作与类型"><a href="#2-原子操作与类型" class="headerlink" title="2. 原子操作与类型"></a>2. 原子操作与类型</h2><blockquote>
<p>C++ 标准库提供了多种原子类型，如 <code>std::atomic&lt;int&gt;</code>、<code>std::atomic&lt;bool&gt;</code>、<code>std::atomic&lt;T*&gt;</code> 等。这些原子类型支持一系列的操作，包括但不限于 load、store、exchange、<code>compare_exchange_weak</code>、<code>compare_exchange_strong</code>、<code>fetch_add</code>、<code>fetch_sub</code>、<code>fetch_or</code>、<code>fetch_and</code>、<code>fetch_xor</code> 等。这些操作确保了对共享数据的访问是原子的( 不可分割的操作，确保读写一次完成 )，从而避免了数据竞争</p>
</blockquote>
<ol>
<li>多数原子类型通过 CPU 指令（ 如 x86 的 LOCK 前缀 ）直接实现，性能比互斥量高60-70%</li>
<li>复杂类型（ 如 <code>atomic&lt;struct&gt;</code> ）可能用内部锁，需 <code>is_lock_free ( )</code> 检测</li>
<li>用户自定义原子类型需满足可平凡复制（ Trivially Copyable ），否则限制应用场景</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;atomic&gt;</span><br><span class="line">#include &lt;thread&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">std::atomic&lt;int&gt; x(0);</span><br><span class="line">std::atomic&lt;int&gt; y(0);</span><br><span class="line">std::atomic&lt;int&gt; z(0);</span><br><span class="line"></span><br><span class="line">void increment(std::atomic&lt;int&gt;* var, int* values) &#123;</span><br><span class="line">    for (int i = 0; i &lt; 10; ++i) &#123;</span><br><span class="line">        values[i] = var-&gt;fetch_add(1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void read_vals(int* values) &#123;</span><br><span class="line">    for (int i = 0; i &lt; 10; ++i) &#123;</span><br><span class="line">        values[i] = x.load();</span><br><span class="line">        values[i + 10] = y.load();</span><br><span class="line">        values[i + 20] = z.load();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int values1[10], values2[10], values3[10], values4[30], values5[30];</span><br><span class="line">    std::thread t1(increment, &amp;x, values1);</span><br><span class="line">    std::thread t2(increment, &amp;y, values2);</span><br><span class="line">    std::thread t3(increment, &amp;z, values3);</span><br><span class="line">    std::thread t4(read_vals, values4);</span><br><span class="line">    std::thread t5(read_vals, values5);</span><br><span class="line"></span><br><span class="line">    t1.join();</span><br><span class="line">    t2.join();</span><br><span class="line">    t3.join();</span><br><span class="line">    t4.join();</span><br><span class="line">    t5.join();</span><br><span class="line"></span><br><span class="line">    // 打印结果</span><br><span class="line">    for (int i = 0; i &lt; 10; ++i) &#123;</span><br><span class="line">        std::cout &lt;&lt; &quot;values1[&quot; &lt;&lt; i &lt;&lt; &quot;] = &quot; &lt;&lt; values1[i] &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; &quot;values2[&quot; &lt;&lt; i &lt;&lt; &quot;] = &quot; &lt;&lt; values2[i] &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; &quot;values3[&quot; &lt;&lt; i &lt;&lt; &quot;] = &quot; &lt;&lt; values3[i] &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; &quot;values4[&quot; &lt;&lt; i &lt;&lt; &quot;] = &quot; &lt;&lt; values4[i] &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; &quot;values5[&quot; &lt;&lt; i &lt;&lt; &quot;] = &quot; &lt;&lt; values5[i] &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-内存顺序（Memory-Ordering）"><a href="#3-内存顺序（Memory-Ordering）" class="headerlink" title="3. 内存顺序（Memory Ordering）"></a>3. 内存顺序（Memory Ordering）</h2><blockquote>
<p>内存顺序的本质是<strong>约束编译器和CPU的优化行为</strong>，确保多线程间的操作顺序和数据可见性符合程序员的预期，具体解决以下问题：</p>
</blockquote>
<ol>
<li><strong>编译器乱序优化：</strong> 编译器可能调整代码顺序以提高性能，但会破坏多线程间的依赖关系</li>
<li><strong>CPU乱序执行：</strong> CPU 可能并行执行指令或重排顺序，导致线程间看到的操作顺序不一致</li>
<li><strong>缓存一致性：</strong> 多核 CPU 的缓存可能导致不同线程看到同一变量的不同值，内存顺序确保缓存同步</li>
</ol>
<p><strong>C++11 提供了六种内存序模式：</strong></p>
<ul>
<li><p><strong><code>memory_order_relaxed</code>：</strong> 开销低，最弱的内存顺序，仅保证原子性（ 操作不可分割 ），不保证操作顺序，编译器和 CPU 可以重排该原子操作与其他操作的顺序，除非明确知道不需要顺序一致性，否则不要使用 relaxed，如计数器、状态标志，不涉及线程间同步</p>
</li>
<li><p><strong><code>memory_order_consume</code>：</strong> 用于读操作，保证后续依赖该值的操作不会重排到该读之前，该语义目前不鼓励使用（ 规范修订中 ），建议用 acquire 代替</p>
</li>
<li><p><strong><code>memory_order_acquire</code>：</strong> 保证当前线程中所有后续操作在读取操作之后执行</p>
</li>
<li><p><strong><code>memory_order_release</code>：</strong> 保证当前线程中所有前续操作在写入操作之前执行</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data = prepare_data(); // 准备数据（前面的操作）</span><br><span class="line">flag.store(true,  memory_order_release); // 发布数据，前面的操作不会重排到后面 </span><br><span class="line"></span><br><span class="line">// 消费者线程 </span><br><span class="line">while (!flag.load(memory_order_acquire))  ; // 获取数据，后面的操作不会重排到前面 </span><br><span class="line">process_data(data); // 处理数据（后面的操作）</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong><code>memory_order_acq_rel</code>：</strong> 结合了 acquire 和 release 的特性，同时具备 acquire（ 读语义 ）和 release（ 写语义 ），用于 <strong>读-修改-写（RMW）</strong> 操作（ 如 <code>fetch_add</code> 、<code>compare_exchange_weak</code> ）</p>
</li>
<li><p><strong><code>memory_order_seq_cst</code>：</strong> 最强的内存序，默认值（ 若未指定内存顺序，原子操作默认使用<code>seq_cst</code> ），所有线程看到的操作顺序全局一致，相当于所有原子操作在一个全局队列中执行，性能最低，因为需要同步所有线程的操作顺序。除非必要，否则应避免使用（ 可优化为更弱的内存顺序 ）</p>
</li>
<li><p><strong>正确，再优化：</strong> 优先使用 <code>seq_cst</code> 保证正确性，再根据场景尝试更弱的内存顺序（ 如 acquire&#x2F;release、relaxed ）</p>
</li>
<li><p><strong>注释内存顺序：</strong> 在代码中注释每个原子操作的内存顺序选择理由（ 如: 使用 relaxed，因为计数器无需同步 ），便于后续维护</p>
</li>
<li><p><strong>避免<code>memory_order_consume</code>：</strong> 该语义目前不鼓励使用（ 规范修订中 ），建议用 acquire 代替</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;atomic&gt;</span><br><span class="line">#include &lt;thread&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">std::atomic&lt;bool&gt; x(false);</span><br><span class="line">std::atomic&lt;bool&gt; y(false);</span><br><span class="line">std::atomic&lt;int&gt; z(0);</span><br><span class="line"></span><br><span class="line">void write_x_then_y() &#123;</span><br><span class="line">    x.store(true, std::memory_order_relaxed); // 1</span><br><span class="line">    y.store(true, std::memory_order_release); // 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void read_y_then_x() &#123;</span><br><span class="line">    while (!y.load(std::memory_order_acquire)); // 3</span><br><span class="line">    if (x.load(std::memory_order_relaxed)) ++z; // 4</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    x = false;</span><br><span class="line">    y = false;</span><br><span class="line">    z = 0;</span><br><span class="line"></span><br><span class="line">    std::thread a(write_x_then_y);</span><br><span class="line">    std::thread b(read_y_then_x);</span><br><span class="line"></span><br><span class="line">    a.join();</span><br><span class="line">    b.join();</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; &quot;z = &quot; &lt;&lt; z.load() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-内存屏障（Memory-Barrier）"><a href="#4-内存屏障（Memory-Barrier）" class="headerlink" title="4. 内存屏障（Memory Barrier）"></a>4. 内存屏障（Memory Barrier）</h2><blockquote>
<p>内存屏障用于限制内存访问的重新排序和优化，确保特定的操作顺序。C++ 提供了 <code>std::atomic_thread_fence</code> 函数来创建内存屏障</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;atomic&gt;</span><br><span class="line">#include &lt;thread&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">std::atomic&lt;bool&gt; x(false);</span><br><span class="line">std::atomic&lt;bool&gt; y(false);</span><br><span class="line">std::atomic&lt;int&gt; z(0);</span><br><span class="line"></span><br><span class="line">void write_x_then_y() &#123;</span><br><span class="line">    x.store(true, std::memory_order_relaxed); // 1</span><br><span class="line">    std::atomic_thread_fence(std::memory_order_release); // 2</span><br><span class="line">    y.store(true, std::memory_order_relaxed); // 3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void read_y_then_x() &#123;</span><br><span class="line">    while (!y.load(std::memory_order_acquire)); // 4</span><br><span class="line">    if (x.load(std::memory_order_relaxed)) ++z; // 5</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    x = false;</span><br><span class="line">    y = false;</span><br><span class="line">    z = 0;</span><br><span class="line"></span><br><span class="line">    std::thread a(write_x_then_y);</span><br><span class="line">    std::thread b(read_y_then_x);</span><br><span class="line"></span><br><span class="line">    a.join();</span><br><span class="line">    b.join();</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; &quot;z = &quot; &lt;&lt; z.load() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="5-高级特性与惯用法"><a href="#5-高级特性与惯用法" class="headerlink" title="5. 高级特性与惯用法"></a>5. 高级特性与惯用法</h1><h2 id="function"><a href="#function" class="headerlink" title="function"></a>function</h2><blockquote>
<p>std::function 是 C++ 标准库中的一个通用多态函数封装器，可以存储、复制和调用任何可调用的目标——函数、lambda 表达式、绑定表达式或其他函数对象</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;functional&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line"></span><br><span class="line">class Test &#123;</span><br><span class="line">public:</span><br><span class="line">    void hello(std::string msg) &#123;</span><br><span class="line">        std::cout &lt;&lt; &quot;Hello, &quot; &lt;&lt; msg &lt;&lt; &quot;!&quot; &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    // 使用 lambda 表达式实例化 function</span><br><span class="line">    std::function&lt;int(int, int)&gt; func4 = [](int a, int b) -&gt; int &#123;</span><br><span class="line">        return a + b;</span><br><span class="line">    &#125;;</span><br><span class="line">    std::cout &lt;&lt; func4(100, 200) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    // 使用成员函数指针实例化 function</span><br><span class="line">    std::function&lt;void(Test*, std::string)&gt; func5 = &amp;Test::hello;</span><br><span class="line">    func5(&amp;Test(), &quot;call Test::hello!&quot;);</span><br><span class="line"></span><br><span class="line">    // 使用 function 替代 switch-case 操作</span><br><span class="line">    int choice = 0;</span><br><span class="line">    std::map&lt;int, std::function&lt;void()&gt;&gt; actionMap;</span><br><span class="line">    actionMap.insert(&#123;1, []() &#123; std::cout &lt;&lt; &quot;查看所有书籍信息&quot; &lt;&lt; std::endl; &#125;&#125;);</span><br><span class="line">    actionMap.insert(&#123;2, []() &#123; std::cout &lt;&lt; &quot;借书&quot; &lt;&lt; std::endl; &#125;&#125;);</span><br><span class="line">    actionMap.insert(&#123;3, []() &#123; std::cout &lt;&lt; &quot;还书&quot; &lt;&lt; std::endl; &#125;&#125;);</span><br><span class="line">    actionMap.insert(&#123;4, []() &#123; std::cout &lt;&lt; &quot;查询书籍&quot; &lt;&lt; std::endl; &#125;&#125;);</span><br><span class="line">    actionMap.insert(&#123;5, []() &#123; std::cout &lt;&lt; &quot;注销&quot; &lt;&lt; std::endl; &#125;&#125;);</span><br><span class="line"></span><br><span class="line">    for (;;) &#123;</span><br><span class="line">        std::cout &lt;&lt; &quot;-----------------&quot; &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; &quot;1.查看所有书籍信息&quot; &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; &quot;2.借书&quot; &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; &quot;3.还书&quot; &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; &quot;4.查询书籍&quot; &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; &quot;5.注销&quot; &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; &quot;-----------------&quot; &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; &quot;请选择:&quot;;</span><br><span class="line">        std::cin &gt;&gt; choice;</span><br><span class="line"></span><br><span class="line">        auto it = actionMap.find(choice);</span><br><span class="line">        if (it == actionMap.end()) &#123;</span><br><span class="line">            std::cout &lt;&lt; &quot;输入数字无效，重新选择!&quot; &lt;&lt; std::endl;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            it-&gt;second();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>实现原理</strong></p>
<blockquote>
<p>std::function 的实现原理主要依赖于类型擦除（ type erasure ）技术。它通过存储一个通用的函数对象来封装各种可调用对象。具体来说，std::function 内部维护一个指向具体函数对象的指针，并使用虚函数表（ vtable ）来管理这些对象的调用和销毁操作。当调用 std::function 对象时，实际调用的是存储在内部的函数对象的 operator() 方法</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template&lt;typename R, typename... Args&gt;</span><br><span class="line">class function&lt;R(Args...)&gt; &#123;</span><br><span class="line">private:</span><br><span class="line">    struct FunctionBase &#123;</span><br><span class="line">        virtual R operator()(Args... args) = 0;</span><br><span class="line">        virtual FunctionBase* clone() const = 0;</span><br><span class="line">        virtual \~FunctionBase() &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    template&lt;typename F&gt;</span><br><span class="line">    struct FunctionImpl : public FunctionBase &#123;</span><br><span class="line">        F f;</span><br><span class="line">        FunctionImpl(F f) : f(f) &#123;&#125;</span><br><span class="line">        R operator()(Args... args) override &#123; return f(args...); &#125;</span><br><span class="line">        FunctionBase* clone() const override &#123; return new FunctionImpl(*this); &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    FunctionBase* impl;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    template&lt;typename F&gt;</span><br><span class="line">    function(F f) : impl(new FunctionImpl&lt;F&gt;(f)) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    function(const function&amp; other) : impl(other.impl-&gt;clone()) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    \~function() &#123; delete impl; &#125;</span><br><span class="line"></span><br><span class="line">    R operator()(Args... args) &#123; return (*impl)(args...); &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="C-面向对象机制"><a href="#C-面向对象机制" class="headerlink" title="C++ 面向对象机制"></a>C++ 面向对象机制</h2><blockquote>
<p>C++ 面向对象机制的底层实现主要包括类、对象、虚函数、单一继承、多重继承、虚基类、构造函数和析构函数等在底层的实现方法和工作原理</p>
</blockquote>
<h3 id="虚函数与多态"><a href="#虚函数与多态" class="headerlink" title="虚函数与多态"></a>虚函数与多态</h3><ul>
<li><strong>虚表（vtable） ：</strong> 每个含虚函数的类生成虚表，存储函数入口地址</li>
<li><strong>虚指针（vptr） ：</strong> 对象首地址存储vptr，指向虚表（ 占用4&#x2F;8字节 ）</li>
<li><strong>调用过程：</strong> obj.action() → 底层：push this; call [vptr+offset]</li>
</ul>
<h3 id="继承内存布局"><a href="#继承内存布局" class="headerlink" title="继承内存布局"></a>继承内存布局</h3><ul>
<li><strong>单一继承：</strong> 派生类对象包含基类数据 + 自身数据 + 虚表指针</li>
<li><strong>多重继承：</strong> 派生类按顺序包含所有基类数据（ 可能冗余 ），各自维护虚表指针</li>
<li><strong>虚基类：</strong> 通过额外指针间接访问共享基类数据，避免冗余</li>
</ul>
<h3 id="构造-x2F-析构函数"><a href="#构造-x2F-析构函数" class="headerlink" title="构造&#x2F;析构函数"></a>构造&#x2F;析构函数</h3><ul>
<li><strong>非函数调用：</strong> 构造函数代码直接嵌入对象创建处（ 无函数调用开销 ）</li>
<li><strong>析构顺序：</strong> 反向析构成员，自动调用基类析构</li>
</ul>
<h2 id="编译期断言"><a href="#编译期断言" class="headerlink" title="编译期断言"></a>编译期断言</h2><blockquote>
<p>利用模板特化实现编译时检查</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template&lt;bool&gt; struct StaticAssert;      // 原始模板</span><br><span class="line">template&lt;&gt; struct StaticAssert&lt;true&gt; &#123;&#125;; // 仅true特化有效</span><br><span class="line">#define STATIC_ASSERT(x) sizeof(StaticAssert&lt;bool(x)&gt;)</span><br></pre></td></tr></table></figure>

<h1 id="6-异常处理"><a href="#6-异常处理" class="headerlink" title="6. 异常处理"></a>6. 异常处理</h1><blockquote>
<p><strong>异常机制与异常安全：</strong> C++ 异常处理通过 栈展开、异常对象管理 和 类型匹配 实现错误传递。核心是在保证资源安全（ RAII ）的前提下，将控制权转移至匹配的 catch 块。正确使用可提升程序健壮性，但需注意性能影响和资源管理细节</p>
</blockquote>
<h2 id="1-异常对象创建与抛出"><a href="#1-异常对象创建与抛出" class="headerlink" title="1. 异常对象创建与抛出"></a>1. 异常对象创建与抛出</h2><blockquote>
<p>当使用 throw 抛出异常时，异常对象会被创建，其生命周期由运行时系统管理。若对象在栈上，直接复制；若在堆上，需手动管理（ 但通常由编译器自动处理 ）</p>
<p>异常对象存储在线程信息块（ TIB ）或栈外的特殊内存空间，确保所有 catch 块均可访问，确保其在栈展开过程中持续存在</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">throw std::runtime_error(&quot;An error occurred&quot;);  // 创建异常对象并抛出</span><br></pre></td></tr></table></figure>

<h2 id="2-栈展开（Stack-Unwinding）"><a href="#2-栈展开（Stack-Unwinding）" class="headerlink" title="2. 栈展开（Stack Unwinding）"></a>2. 栈展开（Stack Unwinding）</h2><blockquote>
<p>从抛出异常的位置开始，程序沿着函数调用栈逆序查找匹配的 catch 块。在此过程中，会依次调用当前栈帧中局部对象的析构函数（ 即 RAII 机制中的资源释放 ）</p>
<p>栈展开依赖编译器生成的元数据（ 如调用栈信息 ），通过寄存器（ 如ebp、esp ）跟踪栈帧位置</p>
<p>若未找到匹配的 catch，程序调用 terminate() 终止 </p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func3() → func2() → func1() → main()</span><br><span class="line"></span><br><span class="line">// 若在 func3() 抛出异常，则依次退出 func3、func2、func1，最终在 main() 的 catch 块处理</span><br></pre></td></tr></table></figure>

<h2 id="3-异常捕获机制"><a href="#3-异常捕获机制" class="headerlink" title="3. 异常捕获机制"></a>3. 异常捕获机制</h2><blockquote>
<p>编译器为每个函数生成异常处理链（ 链表结构 ），记录 try 块的范围和对应的 catch 块信息</p>
<p>catch 块按声明顺序匹配异常类型。类型必须严格匹配（ 允许派生类到基类的隐式转换 ），且支持多态捕获（ 如catch(const std::exception&amp;) ）</p>
<p>运行时系统通过 nStep（ 当前执行步骤 ID ）匹配 try 块：</p>
</blockquote>
<ul>
<li><p>若当前函数的 nStep 值在某个 try 块范围内，检查其 catch 块是否匹配异常类型</p>
</li>
<li><p>若匹配，复制异常对象到 catch 块并执行；否则沿链表向上查找（ prev 指针 ）直至找到匹配或终止程序</p>
</li>
</ul>
<h2 id="4-未处理异常"><a href="#4-未处理异常" class="headerlink" title="4. 未处理异常"></a>4. 未处理异常</h2><ul>
<li><p>若遍历整个调用栈仍无匹配的 catch 块，调用 terminate() 终止程序</p>
</li>
<li><p>若异常在栈展开过程中再次抛出，同样触发 terminate()</p>
</li>
</ul>
<h2 id="5-资源管理与RAII"><a href="#5-资源管理与RAII" class="headerlink" title="5. 资源管理与RAII"></a>5. 资源管理与RAII</h2><blockquote>
<p>栈展开过程中，局部对象的析构函数自动调用，确保资源（ 如文件句柄、内存 ）正确释放。这是 RAII（ 资源获取即初始化 ）的核心机制</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class FileHandler &#123;</span><br><span class="line">  public:</span><br><span class="line">      FileHandler(const char* name) &#123; </span><br><span class="line">          file = fopen(name, &quot;r&quot;); </span><br><span class="line">          if (!file) throw std::runtime_error(&quot;Open failed&quot;); </span><br><span class="line">      &#125;</span><br><span class="line">      ~FileHandler() &#123; if (file) fclose(file); &#125;</span><br><span class="line">  private:</span><br><span class="line">      FILE* file;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="7-设计模式"><a href="#7-设计模式" class="headerlink" title="7. 设计模式"></a>7. 设计模式</h1><blockquote>
<p><strong>设计模式核心思想：</strong> 解决软件设计常见问题的可重用方案</p>
</blockquote>
<p><strong>核心目标：</strong></p>
<ul>
<li><p><strong>解耦与复用：</strong> 分离变化与不变部分，提升代码复用性</p>
</li>
<li><p><strong>扩展性：</strong> 通过组合而非继承，支持功能动态扩展（ 如装饰者模式 ）</p>
</li>
<li><p><strong>封装变化：</strong> 隔离不稳定因素（ 如策略模式封装算法 ）</p>
</li>
<li><p><strong>简化复杂性：</strong> 通过模式规范复杂对象的创建与交互（ 如建造者模式 ）</p>
</li>
<li><p><strong>遵循设计原则：</strong> 如单一职责、开闭原则、依赖倒置等</p>
</li>
</ul>
<h2 id="1-创建型模式"><a href="#1-创建型模式" class="headerlink" title="1. 创建型模式"></a>1. 创建型模式</h2><blockquote>
<p>将对象创建与使用分离，隐藏创建细节，提高灵活性</p>
</blockquote>
<h3 id="1-单例模式（Singleton）"><a href="#1-单例模式（Singleton）" class="headerlink" title="1. 单例模式（Singleton）"></a>1. 单例模式（Singleton）</h3><blockquote>
<p>确保类只有一个实例，并提供全局访问点，私有化构造函数、拷贝构造和赋值运算符，静态方法返回静态局部变量实例（ C++11起线程安全 ），如：日志管理器、线程池管理</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Singleton &#123;</span><br><span class="line">  public:</span><br><span class="line">      static Singleton&amp; getInstance() &#123;</span><br><span class="line">          static Singleton instance;  // C++11线程安全 </span><br><span class="line">          return instance;</span><br><span class="line">      &#125;</span><br><span class="line">      void printTest() &#123; std::cout &lt;&lt; &quot;Singleton works\n&quot;; &#125;</span><br><span class="line">  private:</span><br><span class="line">      Singleton() &#123;&#125;  // 阻止外部构造 </span><br><span class="line">      Singleton(const Singleton&amp;) = delete;  // 阻止拷贝 </span><br><span class="line">      Singleton&amp; operator=(const Singleton&amp;) = delete; // 阻止赋值 </span><br><span class="line">&#125;;</span><br><span class="line">// 使用：Singleton::getInstance().printTest();</span><br></pre></td></tr></table></figure>

<h3 id="2-工厂模式（Factory）"><a href="#2-工厂模式（Factory）" class="headerlink" title="2. 工厂模式（Factory）"></a>2. 工厂模式（Factory）</h3><ul>
<li><strong>简单工厂模式</strong></li>
</ul>
<blockquote>
<p>通过工厂类创建不同产品，避免直接调用具体类</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Product &#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void show() = 0;</span><br><span class="line">&#125;;</span><br><span class="line">class ProductA : public Product &#123; void show() override &#123; /*...*/ &#125; &#125;;</span><br><span class="line">class Factory &#123;</span><br><span class="line">public:</span><br><span class="line">    Product* createProduct(ProductType type) &#123;</span><br><span class="line">        switch(type) &#123;</span><br><span class="line">            case TypeA: return new ProductA();</span><br><span class="line">            // 其他类型分支</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>抽象工厂模式</strong></li>
</ul>
<blockquote>
<p>创建产品家族（ 多个相关产品 ），解耦产品创建与使用，支持扩展</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class AbstractFactory &#123;</span><br><span class="line">public:</span><br><span class="line">    virtual Product* createProduct() = 0;</span><br><span class="line">&#125;;</span><br><span class="line">class ConcreteFactory1 : public AbstractFactory &#123;</span><br><span class="line">    Product* createProduct() override &#123; return new ProductA(); &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="3-建造者模式（Builder）"><a href="#3-建造者模式（Builder）" class="headerlink" title="3.  建造者模式（Builder）"></a>3.  建造者模式（Builder）</h3><blockquote>
<p>分步构建复杂对象，将复杂对象的构建过程与表示分离，使相同构建过程可创建不同表示，它通过分步骤构建对象，将对象的创建细节封装在独立的建造者类中，由指挥者统一调度构建流程，提高灵活性和可维护性</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 1. 定义产品类 </span><br><span class="line">class Car &#123;</span><br><span class="line">public:</span><br><span class="line">    void setEngine(const string&amp; engine) &#123; engine_ = engine; &#125;</span><br><span class="line">    void setTires(const string&amp; tires) &#123; tires_ = tires; &#125;</span><br><span class="line">    void showSpecs() &#123; cout &lt;&lt; &quot;Engine: &quot; &lt;&lt; engine_ &lt;&lt; &quot;, Tires: &quot; &lt;&lt; tires_ &lt;&lt; endl; &#125;</span><br><span class="line">private:</span><br><span class="line">    string engine_;</span><br><span class="line">    string tires_;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">// 2. 定义抽象建造者</span><br><span class="line">class CarBuilder &#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void buildEngine() = 0;</span><br><span class="line">    virtual void buildTires() = 0;</span><br><span class="line">    virtual Car* getResult() = 0;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">// 3. 实现具体建造者（跑车）</span><br><span class="line">class SportsCarBuilder : public CarBuilder &#123;</span><br><span class="line">public:</span><br><span class="line">    void buildEngine() override &#123; car_-&gt;setEngine(&quot;V8 Turbo&quot;); &#125;</span><br><span class="line">    void buildTires() override &#123; car_-&gt;setTires(&quot;Racing Tires&quot;); &#125;</span><br><span class="line">    Car* getResult() override &#123; return car_; &#125;</span><br><span class="line">private:</span><br><span class="line">    Car* car_ = new Car();</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">// 4. 实现指挥者 </span><br><span class="line">class Director &#123;</span><br><span class="line">public:</span><br><span class="line">    void construct(CarBuilder* builder) &#123;</span><br><span class="line">        builder-&gt;buildEngine();</span><br><span class="line">        builder-&gt;buildTires();  // 固定构建顺序 </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">// 客户端使用 </span><br><span class="line">int main() &#123;</span><br><span class="line">    Director director;</span><br><span class="line">    SportsCarBuilder sportsBuilder;</span><br><span class="line">    director.construct(&amp;sportsBuilder); </span><br><span class="line">    Car* sportsCar = sportsBuilder.getResult(); </span><br><span class="line">    sportsCar-&gt;showSpecs();  // 输出：Engine: V8 Turbo, Tires: Racing Tires </span><br><span class="line">    delete sportsCar;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-结构型模式"><a href="#2-结构型模式" class="headerlink" title="2. 结构型模式"></a>2. 结构型模式</h2><blockquote>
<p>通过组合类或对象，形成更复杂的结构，解决接口兼容、功能扩展等问题</p>
</blockquote>
<h3 id="1-装饰模式（Decorator）"><a href="#1-装饰模式（Decorator）" class="headerlink" title="1. 装饰模式（Decorator）"></a>1. 装饰模式（Decorator）</h3><blockquote>
<p>动态扩展对象功能，避免子类爆炸，通过组合替代继承，动态扩展对象功能（ 如游戏装备系统 ）</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Phone &#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void show() &#123; /* 基础功能 */ &#125;</span><br><span class="line">&#125;;</span><br><span class="line">class Decorator : public Phone &#123;</span><br><span class="line">protected:</span><br><span class="line">    Phone* phone;</span><br><span class="line">public:</span><br><span class="line">    Decorator(Phone* p) : phone(p) &#123;&#125;</span><br><span class="line">    void show() override &#123; phone-&gt;show(); &#125;</span><br><span class="line">&#125;;</span><br><span class="line">class ScreenProtector : public Decorator &#123;</span><br><span class="line">    void show() override &#123;</span><br><span class="line">        Decorator::show();</span><br><span class="line">        addProtector();  // 新增功能 </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">// 使用：Phone* iphone = new ScreenProtector(new BasicPhone());</span><br></pre></td></tr></table></figure>

<h3 id="2-适配器模式（Adapter）"><a href="#2-适配器模式（Adapter）" class="headerlink" title="2. 适配器模式（Adapter）"></a>2. 适配器模式（Adapter）</h3><blockquote>
<p>将旧接口转换为新接口，整合不兼容接口（ 如旧系统改造 ），使不兼容的类可以协同工作（ 如将 legacy 系统适配到新框架 ）</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Target &#123;  // 目标接口</span><br><span class="line">public:</span><br><span class="line">    virtual void request() = 0;</span><br><span class="line">&#125;;</span><br><span class="line">class Adaptee &#123;  // 被适配者</span><br><span class="line">public:</span><br><span class="line">    void specificRequest() &#123; /* 原有接口 */ &#125;</span><br><span class="line">&#125;;</span><br><span class="line">class Adapter : public Target &#123;</span><br><span class="line">    Adaptee* adaptee;</span><br><span class="line">public:</span><br><span class="line">    void request() override &#123; adaptee-&gt;specificRequest(); &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="3-行为型模式"><a href="#3-行为型模式" class="headerlink" title="3. 行为型模式"></a>3. 行为型模式</h2><blockquote>
<p>定义对象间的通信方式，分配职责，降低耦合</p>
</blockquote>
<h3 id="1-观察者模式（Observer）"><a href="#1-观察者模式（Observer）" class="headerlink" title="1. 观察者模式（Observer）"></a>1. 观察者模式（Observer）</h3><blockquote>
<p>一对多依赖关系，主题状态变化时自动通知观察者，发布-订阅机制，事件处理系统、MVC 模型更新，定义对象间的依赖关系（ 主题-观察者 ），当主题状态变化时，自动通知所有观察者（ 如天气站通知用户、GUI 组件交互 ）</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Observer &#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void update(const string&amp; msg) = 0;</span><br><span class="line">&#125;;</span><br><span class="line">class Subject &#123;</span><br><span class="line">private:</span><br><span class="line">    vector&lt;Observer*&gt; observers;</span><br><span class="line">public:</span><br><span class="line">    void attach(Observer* obs) &#123; observers.push_back(obs);  &#125;</span><br><span class="line">    void notify(const string&amp; msg) &#123;</span><br><span class="line">        for (auto obs : observers) obs-&gt;update(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">class User : public Observer &#123;</span><br><span class="line">    void update(const string&amp; msg) override &#123; /* 处理消息 */ &#125;</span><br><span class="line">&#125;;</span><br><span class="line">// 使用：subject.attach(&amp;user);  subject.notify(&quot; 新文章发布&quot;);</span><br></pre></td></tr></table></figure>

<h3 id="2-策略模式（Strategy）"><a href="#2-策略模式（Strategy）" class="headerlink" title="2. 策略模式（Strategy）"></a>2. 策略模式（Strategy）</h3><blockquote>
<p>封装可互换算法、封装算法族，使算法可动态替换（ 如排序算法、支付方式 ）</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class DataParser &#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void read() = 0;     // 子类实现</span><br><span class="line">    virtual void process() = 0;</span><br><span class="line">    void parse() &#123;               // 固定流程</span><br><span class="line">        read();</span><br><span class="line">        process();</span><br><span class="line">        write();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">class CSVParser : public DataParser &#123;</span><br><span class="line">    void read() override &#123; cout &lt;&lt; &quot;Reading CSV...&quot;; &#125;</span><br><span class="line">    void process() override &#123; /*...*/ &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="8-性能优化与调试"><a href="#8-性能优化与调试" class="headerlink" title="8. 性能优化与调试"></a>8. 性能优化与调试</h1><blockquote>
<p>C++ 性能优化的核心思想是在保证正确性的前提下，通过减少计算开销、优化内存访问、利用硬件特性和编译器能力，最大化程序执行效率。其实现过程通常遵循“测量-&gt;分析-&gt;修改-&gt;验证”的迭代流程</p>
</blockquote>
<h2 id="减少计算开销"><a href="#减少计算开销" class="headerlink" title="减少计算开销"></a>减少计算开销</h2><ul>
<li>优化算法复杂度（ 如用哈希表替代线性查找 ），避免重复计算</li>
<li>将运行时计算转移至编译时（ 如常量表达式、模板元编程 ）</li>
<li>利用CPU特性：优先使用整型加减&#x2F;位操作等低开销指令，避免高开销操作（ 如除法、取余 ）</li>
<li>函数调用涉及压栈&#x2F;出栈操作，频繁调用会显著影响性能</li>
<li><strong>核心策略：</strong> 内联小函数、减少参数传递开销、合并功能相近的函数</li>
</ul>
<p><strong>内联函数：</strong> 消除压栈&#x2F;出栈指令，直接嵌入函数体</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 内联避免百万次调用的开销</span><br><span class="line">inline void smallFunction() &#123; </span><br><span class="line">    std::cout &lt;&lt; &quot;Small function\n&quot;; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>减少参数传递开销：</strong> 用引用替代值传递，尤其对大型对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 用结构体封装多个参数</span><br><span class="line">struct Point &#123; int x, y; &#125;;</span><br><span class="line">void drawPoint(const Point&amp; p); // 引用传递避免复制</span><br></pre></td></tr></table></figure>

<p><strong>强度削减（Strength Reduction）：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 用乘法替代除法（编译器常自动优化）</span><br><span class="line">// 原始：取余操作慢</span><br><span class="line">for (int i=0; i&lt;10000; i++) &#123;</span><br><span class="line">    if (i % 10 == 0) ... </span><br><span class="line">&#125;</span><br><span class="line">// 优化：位操作或乘法</span><br><span class="line">for (int i=0; i&lt;10000; i+=10) ... </span><br></pre></td></tr></table></figure>

<p><strong>编译时计算：</strong> 消除运行时函数调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 将atan2计算移至编译时</span><br><span class="line">constexpr double kTanPI3 = std::tan(M_PI/3);</span><br><span class="line">if (a &lt; b * kTanPI3) ... // 运行时仅需乘法</span><br></pre></td></tr></table></figure>

<p><strong>批量处理与缓存：</strong> 重复计算相同输入的函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 缓存昂贵计算结果</span><br><span class="line">std::map&lt;int, ExpensiveResult&gt; cache;</span><br><span class="line">if (!cache.count(key)) &#123;</span><br><span class="line">    cache[key] = computeExpensiveResult(); // 仅计算一次</span><br><span class="line">&#125;</span><br><span class="line">return cache[key];</span><br></pre></td></tr></table></figure>

<p><strong>循环优化：</strong> 降低循环控制指令占比</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 循环展开减少分支判断</span><br><span class="line">for (int i=0; i&lt;1000; i+=4) &#123;</span><br><span class="line">    arr[i] = i;</span><br><span class="line">    arr[i+1] = i+1;</span><br><span class="line">    arr[i+2] = i+2;</span><br><span class="line">    arr[i+3] = i+3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="优化内存访问"><a href="#优化内存访问" class="headerlink" title="优化内存访问"></a>优化内存访问</h2><p><strong>减少写操作：</strong> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 用位域合并多次写操作 传统写法需三次独立写操作</span><br><span class="line">struct Bitfield &#123;</span><br><span class="line">    int a:4, b:2, c:2; // 4+2+2位</span><br><span class="line">&#125;;</span><br><span class="line">Bitfield x;</span><br><span class="line">x.a = A; x.b = B; x.c = C; // 单次内存写入</span><br></pre></td></tr></table></figure>

<p><strong>预分配内存：</strong> 避免动态扩容时的复制开销</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// vector预分配避免多次扩容</span><br><span class="line">std::vector&lt;int&gt; vec;</span><br><span class="line">vec.reserve(1000); // 一次性分配内存</span><br></pre></td></tr></table></figure>

<h2 id="利用硬件并行"><a href="#利用硬件并行" class="headerlink" title="利用硬件并行"></a>利用硬件并行</h2><p><strong>并行计算：</strong> 任务需无数据依赖，避免锁竞争</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 多线程并行独立任务</span><br><span class="line">std::thread t1(task1);</span><br><span class="line">std::thread t2(task2);</span><br><span class="line">t1.join(); </span><br><span class="line">t2.join();</span><br></pre></td></tr></table></figure>

<p><strong>图像并行处理（ 数据并行 ）：</strong> 将图像按行分块，多线程并行处理，避免全局锁，各线程独立处理数据块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;thread&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">void processPixels(int startY, int endY) &#123;</span><br><span class="line">  for (int y = startY; y &lt; endY; ++y) &#123;</span><br><span class="line">    for (int x = 0; x &lt; IMAGE_WIDTH; ++x) &#123;</span><br><span class="line">      // 处理像素（如滤波、变换）</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">  const int THREAD_COUNT = 4;  // 4线程</span><br><span class="line">  std::vector&lt;std::thread&gt; threads;</span><br><span class="line">  int rowsPerThread = IMAGE_HEIGHT / THREAD_COUNT;</span><br><span class="line"></span><br><span class="line">  for (int i = 0; i &lt; THREAD_COUNT; ++i) &#123;</span><br><span class="line">    int startY = i * rowsPerThread;</span><br><span class="line">    int endY = (i == THREAD_COUNT-1) ? IMAGE_HEIGHT : startY + rowsPerThread;</span><br><span class="line">    threads.emplace_back(processPixels, startY, endY);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  for (auto&amp; t : threads) t.join();  // 等待所有线程</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>多核并行计算（任务并行）：</strong> 绑定线程到特定CPU核心，减少上下文切换，适用于计算密集型任务（ 如科学计算 ）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;pthread.h&gt;</span><br><span class="line"></span><br><span class="line">void* parallel_op(void* core_id) &#123;</span><br><span class="line">  int id = *(int*)core_id;</span><br><span class="line">  for (int i = 0; i &lt; 1000; ++i) &#123;</span><br><span class="line">    // 执行并行计算（如矩阵乘法）</span><br><span class="line">  &#125;</span><br><span class="line">  return nullptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">  pthread_t threads[8];</span><br><span class="line">  int core_ids[8] = &#123;0,1,2,3,4,5,6,7&#125;;</span><br><span class="line">  for (int i = 0; i &lt; 8; ++i) &#123;</span><br><span class="line">    pthread_create(&amp;threads[i], NULL, parallel_op, &amp;core_ids[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  for (int i = 0; i &lt; 8; ++i) pthread_join(threads[i], NULL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>“C++”</tag>
        <tag>“进阶”</tag>
        <tag>提高</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序tips</title>
    <url>/2017/02/22/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Ftips/</url>
    <content><![CDATA[<blockquote>
<p>最近公司项目改版，趁产品修改与UI出图的间歇用公司商户端UI图撸了一把微信小程序。因为刚刚实习那一会接触过前端开发，所以上手还比较快，当然也遇到了很多的问题，不过好在基本按图完成。趁此总结一下我遇到的问题,奉上一些可行的解决方案，希望可以帮助与我遇到相同问题的朋友。<a href="https://github.com/GavinCarter1991/wx-onePro">demo</a> </p>
</blockquote>
<h3 id="先上图"><a href="#先上图" class="headerlink" title="先上图"></a>先上图</h3><p><img src="https://i-blog.csdnimg.cn/blog_migrate/b6d605c3b3e52fc14fcf8b758b6c4b33.webp?x-image-process=image/format,png" alt="微信小程序"></p>
<h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><p><strong>背景图片不能使用本地的</strong></p>
<blockquote>
<p>这个问题坑了我很久，因为在模拟器上跑时，将本地图片作为View的背景图片是可以的，但是一到真机测试就不显示背景图片了，一开始还以为是路径错了，经过测试发现路径是没有问题的，最后在网上找到了原因：微信小程序的背景图片不能是本地图片，必须是是网络图片，于是我就找了一个网站将图片传了上去，将网址作为背景图片链接，就奇迹般的显示了，很是无语。</p>
</blockquote>
<h3 id="不能加载网页"><a href="#不能加载网页" class="headerlink" title="不能加载网页"></a>不能加载网页</h3><blockquote>
<p>微信小程序是不能跳转到网页的，也许是因为微信小程序本身就如同网页吧，也可能是微信不想有人越过它的审核，反正他是不允许直接加载网页的。</p>
</blockquote>
<h3 id="不能隐藏导航栏"><a href="#不能隐藏导航栏" class="headerlink" title="不能隐藏导航栏"></a>不能隐藏导航栏</h3><blockquote>
<p>我的登陆页面本来是不应该有导航栏的，可是就是隐藏不了，也许有方法，但是我找了很久也没有发现。</p>
</blockquote>
<h3 id="只支持HTTPS的网络协议并且一个月只能修改5次"><a href="#只支持HTTPS的网络协议并且一个月只能修改5次" class="headerlink" title="只支持HTTPS的网络协议并且一个月只能修改5次"></a>只支持HTTPS的网络协议并且一个月只能修改5次</h3><blockquote>
<p>在微信小程序中网络请求只能是https类型的。在添加URL的时候都已经限制死了。并且一个月只能修改5次，网络请求必须先进行服务器域名配置。</p>
</blockquote>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/48f1eaa31d6ea1dd09c872920e359dee.webp?x-image-process=image/format,png" alt="添加URL"><br>)</p>
<h3 id="所有的页面都必须在app-json中配置路径"><a href="#所有的页面都必须在app-json中配置路径" class="headerlink" title="所有的页面都必须在app.json中配置路径"></a>所有的页面都必须在app.json中配置路径</h3><blockquote>
<p>我之前新建一个页面然后跳转过去一直报路径错误，去网上查询才知道，每一个页面路径都需要提前配置。</p>
</blockquote>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/2cb2cfa23e160b24cec566232710f644.webp?x-image-process=image/format,png" alt="页面路径配置"></p>
<h3 id="网络请求的最大并发数为5、页面层级最多5层"><a href="#网络请求的最大并发数为5、页面层级最多5层" class="headerlink" title="网络请求的最大并发数为5、页面层级最多5层"></a>网络请求的最大并发数为5、页面层级最多5层</h3><blockquote>
<p>就是说同时最多5个网络请求，页面的子页面最多4个。我在想要是一个页面是一个视频列表展示怎么办，每一个视频都需要网络请求啊。</p>
<p>以上就是这次遇到的一些比较变态的问题。</p>
</blockquote>
<h3 id="谈谈我的一些代码实现"><a href="#谈谈我的一些代码实现" class="headerlink" title="谈谈我的一些代码实现"></a>谈谈我的一些代码实现</h3><p><strong>配置tabBar(app.json)</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;tabBar&quot;: &#123;</span><br><span class="line">  &quot;color&quot;: &quot;#888888&quot;,</span><br><span class="line">  &quot;selectedColor&quot;: &quot;#09BB07&quot;,</span><br><span class="line">  &quot;backgroundColor&quot;: &quot;&quot;,</span><br><span class="line">  &quot;borderStyle&quot;: &quot;white&quot;,</span><br><span class="line">  &quot;list&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;pagePath&quot;: &quot;pages/orderManage/orderManage&quot;,</span><br><span class="line">      &quot;text&quot;: &quot;订单管理&quot;,</span><br><span class="line">      &quot;iconPath&quot;: &quot;pages/images/order.png&quot;,</span><br><span class="line">      &quot;selectedIconPath&quot;: &quot;pages/images/order_r.png&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;pagePath&quot;: &quot;pages/moneyManage/moneyManage&quot;,</span><br><span class="line">      &quot;text&quot;: &quot;财务管理&quot;,</span><br><span class="line">      &quot;iconPath&quot;: &quot;pages/images/money.png&quot;,</span><br><span class="line">      &quot;selectedIconPath&quot;: &quot;pages/images/money_r.png&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;pagePath&quot;: &quot;pages/myself/myself&quot;,</span><br><span class="line">      &quot;text&quot;: &quot;我的商户&quot;,</span><br><span class="line">      &quot;iconPath&quot;: &quot;pages/images/people.png&quot;,</span><br><span class="line">      &quot;selectedIconPath&quot;: &quot;pages/images/people_r.png&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="订单管理页的菜单栏"><a href="#订单管理页的菜单栏" class="headerlink" title="订单管理页的菜单栏"></a>订单管理页的菜单栏</h3><blockquote>
<p>点击菜单栏切换View简单，直接将将点击的菜单的值赋给View让其偏移对应的百分比就好。</p>
<p>手势切换：通过触摸的起点与终点计算出滑动方向，然后偏移并且切换菜单栏。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    catchtouchstart:function(e)&#123;</span><br><span class="line">    var that = this;</span><br><span class="line">    that.setData(&#123;</span><br><span class="line">      startPoint: [e.touches[0].clientX,e.touches[0].clientY]</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  catchtouchend:function(e)&#123;</span><br><span class="line">    var that = this;</span><br><span class="line">    var currentNum = parseInt(this.data.currentNavtab);</span><br><span class="line">    var endPoint = [e.changedTouches[0].clientX,e.changedTouches[0].clientY];</span><br><span class="line">    var startPoint = that.data.startPoint</span><br><span class="line">    if(endPoint[0] &lt;= startPoint[0]) &#123;</span><br><span class="line">      if(Math.abs(endPoint[0] - startPoint[0]) &gt;= Math.abs(endPoint[1] - startPoint[1]) &amp;&amp; currentNum&lt; this.data.navTab.length -1) &#123;</span><br><span class="line">         currentNum=currentNum + 1;  </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">      if(Math.abs(endPoint[0] - startPoint[0]) &gt;= Math.abs(endPoint[1] - startPoint[1]) &amp;&amp; currentNum &gt; 0) &#123;</span><br><span class="line">          currentNum -= 1;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      currentNavtab: currentNum</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">// 点击菜单栏切换View</span><br><span class="line">  switchTab: function(e)&#123;</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      currentNavtab: e.currentTarget.dataset.idx</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><blockquote>
<p>整个程序还是很简单的，就是初次写还是有些不适应。尤其是把div改为了View，不能使用window对象和document对象，很不适应。再次奉上<a href="https://github.com/GavinCarter1991/wx-onePro">demo</a></p>
</blockquote>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>“微信小程序”</tag>
      </tags>
  </entry>
</search>
